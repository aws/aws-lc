diff --git a/cmake/lws_config.h.in b/cmake/lws_config.h.in
index e69d0845..bae5ff6a 100644
--- a/cmake/lws_config.h.in
+++ b/cmake/lws_config.h.in
@@ -144,6 +144,7 @@
 #cmakedefine LWS_WITH_ALSA
 #cmakedefine LWS_WITH_SYS_ASYNC_DNS
 #cmakedefine LWS_WITH_BORINGSSL
+#cmakedefine LWS_WITH_AWSLC
 #cmakedefine LWS_WITH_CGI
 #cmakedefine LWS_WITH_CONMON
 #cmakedefine LWS_WITH_COSE
diff --git a/lib/tls/CMakeLists.txt b/lib/tls/CMakeLists.txt
index 9b15d9c6..e3eb9e97 100644
--- a/lib/tls/CMakeLists.txt
+++ b/lib/tls/CMakeLists.txt
@@ -51,8 +51,8 @@ set(LWS_WOLFSSL_LIBRARIES CACHE PATH "Path to the wolfSSL library" )
 set(LWS_WOLFSSL_INCLUDE_DIRS CACHE PATH "Path to the wolfSSL include directory" )


-if (LWS_WITH_BORINGSSL)
-	# boringssl deprecated EVP_PKEY
+if (LWS_WITH_BORINGSSL OR LWS_WITH_AWSLC)
+	# boringssl and aws-lc deprecated EVP_PKEY
 	set (LWS_WITH_GENHASH OFF PARENT_SCOPE)
 endif()

@@ -261,7 +261,7 @@ if (LWS_WITH_SSL)
 			set(OPENSSL_INCLUDE_DIRS "${OPENSSL_INCLUDE_DIR}")
 		endif()

-		if (NOT OPENSSL_FOUND AND NOT LWS_WITH_BORINGSSL)
+		if (NOT OPENSSL_FOUND AND NOT LWS_WITH_BORINGSSL AND NOT LWS_WITH_AWSLC)
 			# TODO: Add support for STATIC also.
 			if (NOT LWS_PLAT_FREERTOS)
 				find_package(PkgConfig QUIET)
diff --git a/lib/tls/openssl/openssl-client.c b/lib/tls/openssl/openssl-client.c
index 884ca021..65b33030 100644
--- a/lib/tls/openssl/openssl-client.c
+++ b/lib/tls/openssl/openssl-client.c
@@ -275,7 +275,7 @@ lws_ssl_client_bio_create(struct lws *wsi)
 	wsi->tls.ssl = SSL_new(wsi->a.vhost->tls.ssl_client_ctx);
 	if (!wsi->tls.ssl) {
 		const char *es = ERR_error_string(
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 	(uint32_t)
 #else
 	(unsigned long)
@@ -434,7 +434,7 @@ lws_ssl_client_bio_create(struct lws *wsi)
 			(unsigned char *)
 #endif
 					data,
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 					(size_t)
 #else
 					(int)
@@ -464,7 +464,7 @@ lws_ssl_client_bio_create(struct lws *wsi)
 #endif

 					    data,
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 					(size_t)
 #else
 					(int)
@@ -475,7 +475,7 @@ lws_ssl_client_bio_create(struct lws *wsi)
 			(unsigned char *)
 #endif
 					    data,
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 					(size_t)
 #else
 					(int)
@@ -552,7 +552,7 @@ lws_tls_client_connect(struct lws *wsi, char *errbuf, size_t elen)
 #if defined(LWS_HAVE_SSL_SESSION_set_time)
 		sess = SSL_get_session(wsi->tls.ssl);
 		if (sess) /* should always be true */
-#if defined(OPENSSL_IS_BORINGSSL)
+#if defined(OPENSSL_IS_BORINGSSL) || defined(LWS_WITH_AWSLC)
 			SSL_SESSION_set_time(sess, (uint64_t)time(NULL)); /* extend session lifetime */
 #else
 			SSL_SESSION_set_time(sess, (long)time(NULL)); /* extend session lifetime */
@@ -654,7 +654,7 @@ lws_tls_client_confirm_peer_cert(struct lws *wsi, char *ebuf, size_t ebuf_len)
 	}

 	es = ERR_error_string(
-	#if defined(LWS_WITH_BORINGSSL)
+	#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 					 (uint32_t)
 	#else
 					 (unsigned long)
@@ -749,7 +749,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,

 		error = ERR_get_error();
 		es = ERR_error_string(
-		#if defined(LWS_WITH_BORINGSSL)
+		#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 			(uint32_t)
 		#else
 			(unsigned long)
@@ -857,7 +857,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,

 		error = ERR_get_error();
 		es = ERR_error_string(
-		#if defined(LWS_WITH_BORINGSSL)
+		#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 			(uint32_t)
 		#else
 			(unsigned long)
@@ -911,7 +911,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 			 SSL_MODE_RELEASE_BUFFERS);

 #if !defined(USE_WOLFSSL)
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 				uint32_t
 #else
 #if (OPENSSL_VERSION_NUMBER >= 0x10003000l) && \
@@ -926,7 +926,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 #endif
 			ssl_client_options_set_value =
 #if !defined(USE_WOLFSSL)
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 				(uint32_t)
 #else
 #if (OPENSSL_VERSION_NUMBER >= 0x10003000l) && \
@@ -945,7 +945,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 #if (OPENSSL_VERSION_NUMBER >= 0x009080df) && !defined(USE_WOLFSSL)

 	/* SSL_clear_options introduced in 0.9.8m */
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
                 uint32_t
 #else
 #if (OPENSSL_VERSION_NUMBER >= 0x10003000l) && \
@@ -957,7 +957,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 #endif

 			ssl_client_options_clear_value =
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 				(uint32_t)
 #else
 #if (OPENSSL_VERSION_NUMBER >= 0x10003000l) && \
@@ -1098,7 +1098,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 		}

 		n = SSL_CTX_use_certificate_ASN1(vh->tls.ssl_client_ctx,
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 				(size_t)
 #else
 				(int)
@@ -1149,7 +1149,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 		}

 		n = SSL_CTX_use_PrivateKey_ASN1(EVP_PKEY_RSA, vh->tls.ssl_client_ctx, p,
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 				(size_t)
 #else
 				(long)(lws_intptr_t)
@@ -1158,7 +1158,7 @@ lws_tls_client_create_vhost_context(struct lws_vhost *vh,
 		if (n != 1)
 			n = SSL_CTX_use_PrivateKey_ASN1(EVP_PKEY_EC,
 							vh->tls.ssl_client_ctx, p,
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 				(size_t)
 #else
 				(long)(lws_intptr_t)
diff --git a/lib/tls/openssl/openssl-server.c b/lib/tls/openssl/openssl-server.c
index a3c8d120..8c768b21 100644
--- a/lib/tls/openssl/openssl-server.c
+++ b/lib/tls/openssl/openssl-server.c
@@ -159,7 +159,7 @@ lws_tls_server_certs_load(struct lws_vhost *vhost, struct lws *wsi,
     ((OPENSSL_VERSION_NUMBER < 0x30000000l) || \
      defined(LWS_SUPPRESS_DEPRECATED_API_WARNINGS))
 	const char *ecdh_curve = "prime256v1";
-#if !defined(LWS_WITH_BORINGSSL) && defined(LWS_HAVE_SSL_EXTRA_CHAIN_CERTS)
+#if !defined(LWS_WITH_BORINGSSL) && !defined(LWS_WITH_AWSLC) && defined(LWS_HAVE_SSL_EXTRA_CHAIN_CERTS)
 	STACK_OF(X509) *extra_certs = NULL;
 #endif
 	EC_KEY *ecdh, *EC_key = NULL;
@@ -216,7 +216,7 @@ lws_tls_server_certs_load(struct lws_vhost *vhost, struct lws *wsi,
 			error = ERR_get_error();

 			s = ERR_error_string(
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 				(uint32_t)
 #endif
 					error,
@@ -238,7 +238,7 @@ lws_tls_server_certs_load(struct lws_vhost *vhost, struct lws *wsi,
 				const char *s;
 				error = ERR_get_error();
 				s = ERR_error_string(
-	#if defined(LWS_WITH_BORINGSSL)
+	#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 					(uint32_t)
 	#endif
 						error,
@@ -263,7 +263,7 @@ lws_tls_server_certs_load(struct lws_vhost *vhost, struct lws *wsi,

 #if !defined(USE_WOLFSSL)
 	ret = SSL_CTX_use_certificate_ASN1(vhost->tls.ssl_ctx,
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 				(size_t)
 #else
 				(int)
@@ -291,7 +291,7 @@ lws_tls_server_certs_load(struct lws_vhost *vhost, struct lws *wsi,

 #if !defined(USE_WOLFSSL)
 	ret = SSL_CTX_use_PrivateKey_ASN1(EVP_PKEY_RSA, vhost->tls.ssl_ctx, p,
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 			(size_t)
 #else
 					  (long)(long long)
@@ -300,7 +300,7 @@ lws_tls_server_certs_load(struct lws_vhost *vhost, struct lws *wsi,
 	if (ret != 1) {
 		ret = SSL_CTX_use_PrivateKey_ASN1(EVP_PKEY_EC,
 						  vhost->tls.ssl_ctx, p,
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 			(size_t)
 #else
 					  (long)(long long)
@@ -439,7 +439,7 @@ check_key:
 		lwsl_notice(" Using ECDH certificate support\n");

 	/* Get X509 certificate from ssl context */
-#if !defined(LWS_WITH_BORINGSSL) && !defined(USE_WOLFSSL)
+#if !defined(LWS_WITH_BORINGSSL) && !defined(LWS_WITH_AWSLC) && !defined(USE_WOLFSSL)
 #if !defined(LWS_HAVE_SSL_EXTRA_CHAIN_CERTS)
 	x = sk_X509_value(vhost->tls.ssl_ctx->extra_certs, 0);
 #else
@@ -482,7 +482,7 @@ check_key:

 	EC_KEY_free(EC_key);

-#if !defined(OPENSSL_NO_EC) && !defined(LWS_WITH_BORINGSSL) && !defined(USE_WOLFSSL)
+#if !defined(OPENSSL_NO_EC) && !defined(LWS_WITH_BORINGSSL) && !defined(LWS_WITH_AWSLC) && !defined(USE_WOLFSSL)
 post_ecdh:
 #endif
 	vhost->tls.skipped_certs = 0;
@@ -504,7 +504,7 @@ lws_tls_server_vhost_backend_init(const struct lws_context_creation_info *info,
 		const char *s;
 		error = ERR_get_error();
 		s = ERR_error_string(
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 			(uint32_t)
 #endif
 				error,
@@ -520,7 +520,7 @@ lws_tls_server_vhost_backend_init(const struct lws_context_creation_info *info,

 		error = ERR_get_error();
 		s = ERR_error_string(
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 			(uint32_t)
 #endif
 				error,
@@ -572,7 +572,7 @@ lws_tls_server_vhost_backend_init(const struct lws_context_creation_info *info,
 #if defined(USE_WOLFSSL)
 		long
 #else
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 		uint32_t
 #else
 #if (OPENSSL_VERSION_NUMBER >= 0x10003000l) && !defined(LIBRESSL_VERSION_NUMBER) /* not documented by openssl */
@@ -586,7 +586,7 @@ lws_tls_server_vhost_backend_init(const struct lws_context_creation_info *info,
 #if defined(USE_WOLFSSL)
 				(long)
 #else
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 				(uint32_t)
 #else
 #if (OPENSSL_VERSION_NUMBER >= 0x10003000l) && !defined(LIBRESSL_VERSION_NUMBER) /* not documented by openssl */
@@ -604,7 +604,7 @@ lws_tls_server_vhost_backend_init(const struct lws_context_creation_info *info,
 #if (OPENSSL_VERSION_NUMBER >= 0x009080df) && !defined(USE_WOLFSSL)

 /* SSL_clear_options introduced in 0.9.8m */
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 	uint32_t
 #else
 #if (OPENSSL_VERSION_NUMBER >= 0x10003000l)  && !defined(LIBRESSL_VERSION_NUMBER)/* not documented by openssl */
@@ -615,7 +615,7 @@ lws_tls_server_vhost_backend_init(const struct lws_context_creation_info *info,
 #endif

 	ssl_options_clear_value =
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 				(uint32_t)
 #else
 #if (OPENSSL_VERSION_NUMBER >= 0x10003000l)  && !defined(LIBRESSL_VERSION_NUMBER)/* not documented by openssl */
diff --git a/lib/tls/openssl/openssl-session.c b/lib/tls/openssl/openssl-session.c
index e27a8f38..517249b9 100644
--- a/lib/tls/openssl/openssl-session.c
+++ b/lib/tls/openssl/openssl-session.c
@@ -105,7 +105,7 @@ lws_tls_reuse_session(struct lws *wsi)
 #if !defined(USE_WOLFSSL)
 	/* extend session lifetime */
 	SSL_SESSION_set_time(ts->session,
-#if defined(OPENSSL_IS_BORINGSSL)
+#if defined(OPENSSL_IS_BORINGSSL) || defined(OPENSSL_IS_AWSLC)
 			(unsigned long)
 #else
 			(long)
@@ -356,7 +356,7 @@ lws_tls_session_cache(struct lws_vhost *vh, uint32_t ttl)
 	if (!ttl)
 		return;

-#if defined(OPENSSL_IS_BORINGSSL)
+#if defined(OPENSSL_IS_BORINGSSL) || defined(OPENSSL_IS_AWSLC)
 	SSL_CTX_set_timeout(vh->tls.ssl_client_ctx, ttl);
 #else
 	SSL_CTX_set_timeout(vh->tls.ssl_client_ctx, (long)ttl);
diff --git a/lib/tls/openssl/openssl-ssl.c b/lib/tls/openssl/openssl-ssl.c
index 11e9b49f..c8666429 100644
--- a/lib/tls/openssl/openssl-ssl.c
+++ b/lib/tls/openssl/openssl-ssl.c
@@ -176,7 +176,8 @@ lws_ssl_destroy(struct lws_vhost *vhost)
 #else
 #if OPENSSL_VERSION_NUMBER >= 0x1010005f && \
     !defined(LIBRESSL_VERSION_NUMBER) && \
-    !defined(OPENSSL_IS_BORINGSSL)
+    !defined(OPENSSL_IS_BORINGSSL) && \
+	!defined(OPENSSL_IS_AWSLC)
 	ERR_remove_thread_state();
 #else
 	ERR_remove_thread_state(NULL);
@@ -505,7 +506,8 @@ lws_ssl_context_destroy(struct lws_context *context)
 #else
 #if OPENSSL_VERSION_NUMBER >= 0x1010005f && \
     !defined(LIBRESSL_VERSION_NUMBER) && \
-    !defined(OPENSSL_IS_BORINGSSL)
+    !defined(OPENSSL_IS_BORINGSSL) && \
+	!defined(OPENSSL_IS_AWSLC)
 	ERR_remove_thread_state();
 #else
 	ERR_remove_thread_state(NULL);
diff --git a/lib/tls/openssl/openssl-tls.c b/lib/tls/openssl/openssl-tls.c
index 3080d772..c7f26925 100644
--- a/lib/tls/openssl/openssl-tls.c
+++ b/lib/tls/openssl/openssl-tls.c
@@ -43,7 +43,7 @@ lws_tls_err_describe_clear(void)
 			break;

 		ERR_error_string_n(
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 				(uint32_t)
 #endif
 				l, buf, sizeof(buf));
@@ -90,8 +90,10 @@ lws_context_init_ssl_library(struct lws_context *cx,
 	lwsl_cx_info(cx, " Compiled with wolfSSL support");
 #endif
 #else
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL)
 	lwsl_cx_info(cx, " Compiled with BoringSSL support");
+#elif defined(LWS_WITH_AWSLC)
+	lwsl_cx_info(cx, " Compiled with AWS-LC support");
 #else
 	lwsl_cx_info(cx, " Compiled with OpenSSL support");
 #endif
diff --git a/lib/tls/openssl/openssl-x509.c b/lib/tls/openssl/openssl-x509.c
index d8e8dcc8..586ed48d 100644
--- a/lib/tls/openssl/openssl-x509.c
+++ b/lib/tls/openssl/openssl-x509.c
@@ -250,8 +250,12 @@ lws_tls_openssl_cert_info(X509 *x509, enum lws_tls_cert_info type,
 		{
 			const X509V3_EXT_METHOD* method = X509V3_EXT_get(ext);
 			STACK_OF(CONF_VALUE) *cv;
+		#if defined(LWS_WITH_AWSLC)
+			size_t j;
+		#else
 			int j;
-
+		#endif
+
 			cv = i2v_GENERAL_NAMES((X509V3_EXT_METHOD*)method, akid->issuer, NULL);
 			if (!cv)
 				goto bail_ak;
diff --git a/lib/tls/private-lib-tls.h b/lib/tls/private-lib-tls.h
index 28203c58..f43b4392 100644
--- a/lib/tls/private-lib-tls.h
+++ b/lib/tls/private-lib-tls.h
@@ -121,7 +121,7 @@ enum lws_tls_extant {
 #if defined(LWS_WITH_TLS)

 #if defined(LWS_WITH_TLS_SESSIONS) && defined(LWS_WITH_CLIENT) && \
-	(defined(LWS_WITH_MBEDTLS) || defined(OPENSSL_IS_BORINGSSL))
+	(defined(LWS_WITH_MBEDTLS) || defined(OPENSSL_IS_BORINGSSL)) || defined(OPENSSL_IS_AWSLC)
 #define LWS_TLS_SYNTHESIZE_CB 1
 #endif

diff --git a/test-apps/test-client.c b/test-apps/test-client.c
index 05d08ed7..429b735a 100644
--- a/test-apps/test-client.c
+++ b/test-apps/test-client.c
@@ -311,7 +311,7 @@ callback_dumb_increment(struct lws *wsi, enum lws_callback_reasons reason,

 				n = (int)ERR_get_error();
 				es = ERR_error_string(
-#if defined(LWS_WITH_BORINGSSL)
+#if defined(LWS_WITH_BORINGSSL) || defined(LWS_WITH_AWSLC)
 							 (uint32_t)
 #else
 							 (unsigned long)
