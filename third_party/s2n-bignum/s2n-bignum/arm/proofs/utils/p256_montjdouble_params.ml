(*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0 OR ISC OR MIT-0
 *)

(* The number of instructions of functions. *)

let count_insts (execth:thm*thm option array) =
  let length_th = fst execth in
  dest_small_numeral (snd (dest_eq (concl length_th))) / 4;;

let len_montsqr_p256, len_montmul_p256, len_sub_p256 =
  count_insts BIGNUM_MONTSQR_P256_EXEC,
  count_insts BIGNUM_MONTMUL_P256_EXEC,
  count_insts BIGNUM_SUB_P256_EXEC;;

(* ------------------------------------------------------------------------- *)
(* Building actions for proving correctness of optimization step 1 inlining. *)
(* The inlined code is simply the result of turning 'bl' to macro invocation *)
(* and removing the 'ret' instruction at the end of subroutine.              *)
(* The functions were inlined by hand, not using a script.                   *)
(* ------------------------------------------------------------------------- *)

let num_insns_weakadd = 17 and num_insns_cmsubc9 = 61 and
    num_insns_cmsub41 = 32 and num_insns_cmsub38 = 54;;
let code_blocks = [
  (* (action("equal"|"call <subroutine>"), # instructions if "equal") *)
  ("equal", Some 2);
  ("call montsqr_p256", None);
  ("call montsqr_p256", None);
  ("call sub_p256", None);
  ("equal", Some num_insns_weakadd);
  ("call montmul_p256", None);
  ("call add_p256", None);
  ("call montmul_p256", None);
  ("call montsqr_p256", None);
  ("call montsqr_p256", None);
  ("equal", Some num_insns_cmsubc9);
  ("call sub_p256", None);
  ("call montsqr_p256", None);
  ("call montmul_p256", None);
  ("call sub_p256", None);
  ("equal", Some num_insns_cmsub41);
  ("equal", Some num_insns_cmsub38);
];;

(* The number of instructions of functions. *)

let len_montsqr_p256, len_montmul_p256, len_sub_p256,
    len_add_p256 =
  count_insts BIGNUM_MONTSQR_P256_EXEC,
  count_insts BIGNUM_MONTMUL_P256_EXEC,
  count_insts BIGNUM_SUB_P256_EXEC,
  count_insts BIGNUM_ADD_P256_EXEC;;

let actions1 = ref [];;
let last_n1 = ref 0 and last_n2 = ref 0;;
List.iter (fun code_block ->
  let n1,n2 = !last_n1,!last_n2 in
  match code_block with
  | "equal", Some nsteps ->
    actions1 := !actions1 @ [("equal",n1,n1+nsteps,n2,n2+nsteps)];
    last_n1 := nsteps + n1;
    last_n2 := nsteps + n2
  | callfn, None ->
    (* nsteps_prologue = # fn arguments
       nsteps_fnbody = # insts of fn except last ret *)
    let nsteps_prologue, nsteps_fnbody = match callfn with
      | "call montsqr_p256" -> 2, len_montsqr_p256 - 1
      | "call montmul_p256" -> 3, len_montmul_p256 - 1
      | "call sub_p256" -> 3, len_sub_p256 - 1
      | "call add_p256" -> 3, len_add_p256 - 1
      | _ -> failwith callfn in begin
    actions1 := !actions1 @
      [(* For argument assignments, use 'replace' not 'equiv' because
          the symbolic expression of memory addresses shouldn't be abbreviated.
          Otherwise symbolic simulator will be confused. *)
       ("replace",n1,n1+nsteps_prologue,n2,n2+nsteps_prologue)];
    let n1 = n1+nsteps_prologue and n2 = n2+nsteps_prologue in begin
    actions1 := !actions1 @
      [(* bl *)
       ("delete", n1, n1+1, n2, n2);
       (* fn body *)
       ("equal",  n1+1, n1+1+nsteps_fnbody,
                  n2, n2+nsteps_fnbody);
       (* ret *)
       ("delete", n1+1+nsteps_fnbody, n1+1+nsteps_fnbody+1,
                  n2+nsteps_fnbody, n2+nsteps_fnbody)];
    last_n1 := n1+1+nsteps_fnbody+1;
    last_n2 := n2+nsteps_fnbody
    end end)
  code_blocks;;


(* ------------------------------------------------------------------------- *)
(* Actions for proving correctness of step 2 memory optimizations.           *)
(* To get this, trim the callee-save register spills & ret from the assembly *)
(* source files after the first stage (inlining) and second stage (mem opt), *)
(* and run                                                                   *)
(* 'tools/gen-actions.py <trimmed first asm> <trimmed second asm>'.          *)
(* ------------------------------------------------------------------------- *)

let actions2 = [
  ("equal", 0, 3, 0, 3);
  ("replace", 3, 9, 3, 8);
  ("equal", 9, 134, 8, 133);
  ("replace", 134, 147, 133, 144);
  ("equal", 147, 276, 144, 273);
  ("replace", 276, 289, 273, 281);
  ("equal", 289, 290, 281, 282);
  ("replace", 290, 291, 282, 283);
  ("equal", 291, 292, 283, 284);
  ("replace", 292, 294, 284, 286);
  ("equal", 294, 295, 286, 287);
  ("replace", 295, 298, 287, 290);
  ("equal", 298, 299, 290, 291);
  ("replace", 299, 302, 291, 293);
  ("equal", 302, 303, 293, 294);
  ("replace", 303, 306, 294, 296);
  ("equal", 306, 307, 296, 297);
  ("replace", 307, 308, 297, 298);
  ("equal", 308, 309, 298, 299);
  ("replace", 309, 310, 299, 300);
  ("equal", 310, 313, 300, 303);
  ("replace", 313, 314, 303, 304);
  ("equal", 314, 315, 304, 305);
  ("replace", 315, 323, 305, 307);
  ("equal", 323, 324, 307, 308);
  ("replace", 324, 325, 308, 309);
  ("equal", 325, 328, 309, 312);
  ("replace", 328, 329, 312, 313);
  ("equal", 329, 330, 313, 314);
  ("replace", 330, 333, 314, 317);
  ("equal", 333, 334, 317, 318);
  ("replace", 334, 335, 318, 319);
  ("equal", 335, 336, 319, 320);
  ("replace", 336, 337, 320, 321);
  ("equal", 337, 341, 321, 325);
  ("replace", 341, 342, 325, 326);
  ("equal", 342, 347, 326, 331);
  ("replace", 347, 348, 331, 332);
  ("equal", 348, 364, 332, 348);
  ("delete", 364, 365, 348, 348);
  ("equal", 365, 372, 348, 355);
  ("replace", 372, 374, 355, 357);
  ("equal", 374, 376, 357, 359);
  ("replace", 376, 377, 359, 360);
  ("equal", 377, 396, 360, 379);
  ("replace", 396, 398, 379, 381);
  ("equal", 398, 400, 381, 383);
  ("replace", 400, 401, 383, 384);
  ("equal", 401, 402, 384, 385);
  ("replace", 402, 403, 385, 386);
  ("equal", 403, 404, 386, 387);
  ("delete", 404, 405, 387, 387);
  ("equal", 405, 428, 387, 410);
  ("delete", 428, 429, 410, 410);
  ("equal", 429, 448, 410, 429);
  ("delete", 448, 449, 429, 429);
  ("equal", 449, 455, 429, 435);
  ("delete", 455, 456, 435, 435);
  ("equal", 456, 459, 435, 438);
  ("replace", 459, 461, 438, 440);
  ("equal", 461, 462, 440, 441);
  ("replace", 462, 463, 441, 442);
  ("equal", 463, 464, 442, 443);
  ("replace", 464, 465, 443, 444);
  ("equal", 465, 514, 444, 493);
  ("replace", 514, 515, 493, 494);
  ("equal", 515, 516, 494, 495);
  ("replace", 516, 517, 495, 496);
  ("equal", 517, 518, 496, 497);
  ("replace", 518, 527, 497, 503);
  ("equal", 527, 529, 503, 505);
  ("replace", 529, 531, 505, 507);
  ("equal", 531, 545, 507, 521);
  ("replace", 545, 555, 521, 528);
  ("equal", 555, 563, 528, 536);
  ("replace", 563, 564, 536, 537);
  ("equal", 564, 579, 537, 552);
  ("replace", 579, 580, 552, 553);
  ("equal", 580, 596, 553, 569);
  ("replace", 596, 597, 569, 570);
  ("equal", 597, 628, 570, 601);
  ("replace", 628, 630, 601, 603);
  ("equal", 630, 632, 603, 605);
  ("replace", 632, 633, 605, 606);
  ("equal", 633, 634, 606, 607);
  ("replace", 634, 635, 607, 608);
  ("equal", 635, 636, 608, 609);
  ("delete", 636, 637, 609, 609);
  ("equal", 637, 660, 609, 632);
  ("delete", 660, 661, 632, 632);
  ("equal", 661, 680, 632, 651);
  ("delete", 680, 681, 651, 651);
  ("equal", 681, 687, 651, 657);
  ("delete", 687, 688, 657, 657);
  ("equal", 688, 691, 657, 660);
  ("replace", 691, 693, 660, 662);
  ("equal", 693, 694, 662, 663);
  ("replace", 694, 695, 663, 664);
  ("equal", 695, 696, 664, 665);
  ("replace", 696, 697, 665, 666);
  ("equal", 697, 746, 666, 715);
  ("replace", 746, 747, 715, 716);
  ("equal", 747, 748, 716, 717);
  ("replace", 748, 749, 717, 718);
  ("equal", 749, 750, 718, 719);
  ("replace", 750, 751, 719, 720);
  ("equal", 751, 753, 720, 722);
  ("replace", 753, 761, 722, 726);
  ("equal", 761, 763, 726, 728);
  ("replace", 763, 764, 728, 729);
  ("equal", 764, 768, 729, 733);
  ("replace", 768, 770, 733, 735);
  ("equal", 770, 776, 735, 741);
  ("replace", 776, 777, 741, 742);
  ("equal", 777, 782, 742, 747);
  ("replace", 782, 783, 747, 748);
  ("equal", 783, 809, 748, 774);
  ("replace", 809, 810, 774, 775);
  ("equal", 810, 818, 775, 783);
  ("replace", 818, 819, 783, 784);
  ("equal", 819, 826, 784, 791);
  ("replace", 826, 827, 791, 792);
  ("equal", 827, 832, 792, 797);
  ("replace", 832, 833, 797, 798);
  ("equal", 833, 835, 798, 800);
  ("replace", 835, 836, 800, 801);
  ("equal", 836, 843, 801, 808);
  ("replace", 843, 844, 808, 809);
  ("equal", 844, 848, 809, 813);
  ("replace", 848, 849, 813, 814);
  ("equal", 849, 886, 814, 851);
  ("replace", 886, 899, 851, 860);
  ("equal", 899, 1024, 860, 985);
  ("replace", 1024, 1025, 985, 986);
  ("equal", 1025, 1026, 986, 987);
  ("replace", 1026, 1030, 987, 989);
  ("equal", 1030, 1032, 989, 991);
  ("replace", 1032, 1034, 991, 992);
  ("equal", 1034, 1035, 992, 993);
  ("replace", 1035, 1038, 993, 995);
  ("equal", 1038, 1039, 995, 996);
  ("replace", 1039, 1040, 996, 997);
  ("equal", 1040, 1053, 997, 1010);
  ("replace", 1053, 1056, 1010, 1012);
  ("equal", 1056, 1057, 1012, 1013);
  ("replace", 1057, 1059, 1013, 1015);
  ("equal", 1059, 1083, 1015, 1039);
  ("replace", 1083, 1084, 1039, 1040);
  ("equal", 1084, 1085, 1040, 1041);
  ("replace", 1085, 1087, 1041, 1043);
  ("equal", 1087, 1088, 1043, 1044);
  ("replace", 1088, 1093, 1044, 1047);
  ("equal", 1093, 1094, 1047, 1048);
  ("delete", 1094, 1095, 1048, 1048);
  ("equal", 1095, 1096, 1048, 1049);
  ("replace", 1096, 1099, 1049, 1051);
  ("equal", 1099, 1100, 1051, 1052);
  ("replace", 1100, 1102, 1052, 1054);
  ("equal", 1102, 1109, 1054, 1061);
  ("replace", 1109, 1111, 1061, 1063);
  ("equal", 1111, 1112, 1063, 1064);
  ("replace", 1112, 1118, 1064, 1069);
  ("equal", 1118, 1243, 1069, 1194);
  ("replace", 1243, 1257, 1194, 1203);
  ("equal", 1257, 1258, 1203, 1204);
  ("replace", 1258, 1259, 1204, 1205);
  ("equal", 1259, 1262, 1205, 1208);
  ("replace", 1262, 1263, 1208, 1209);
  ("equal", 1263, 1264, 1209, 1210);
  ("replace", 1264, 1267, 1210, 1213);
  ("equal", 1267, 1268, 1213, 1214);
  ("replace", 1268, 1269, 1214, 1215);
  ("equal", 1269, 1270, 1215, 1216);
  ("replace", 1270, 1271, 1216, 1217);
  ("equal", 1271, 1281, 1217, 1227);
  ("replace", 1281, 1282, 1227, 1228);
  ("equal", 1282, 1298, 1228, 1244);
  ("replace", 1298, 1299, 1244, 1245);
  ("equal", 1299, 1330, 1245, 1276);
  ("replace", 1330, 1332, 1276, 1278);
  ("equal", 1332, 1334, 1278, 1280);
  ("replace", 1334, 1335, 1280, 1281);
  ("equal", 1335, 1336, 1281, 1282);
  ("replace", 1336, 1337, 1282, 1283);
  ("equal", 1337, 1338, 1283, 1284);
  ("delete", 1338, 1339, 1284, 1284);
  ("equal", 1339, 1362, 1284, 1307);
  ("delete", 1362, 1363, 1307, 1307);
  ("equal", 1363, 1382, 1307, 1326);
  ("delete", 1382, 1383, 1326, 1326);
  ("equal", 1383, 1389, 1326, 1332);
  ("delete", 1389, 1390, 1332, 1332);
  ("equal", 1390, 1393, 1332, 1335);
  ("replace", 1393, 1395, 1335, 1337);
  ("equal", 1395, 1396, 1337, 1338);
  ("replace", 1396, 1397, 1338, 1339);
  ("equal", 1397, 1398, 1339, 1340);
  ("replace", 1398, 1399, 1340, 1341);
  ("equal", 1399, 1448, 1341, 1390);
  ("replace", 1448, 1449, 1390, 1391);
  ("equal", 1449, 1450, 1391, 1392);
  ("replace", 1450, 1451, 1392, 1393);
  ("equal", 1451, 1452, 1393, 1394);
  ("replace", 1452, 1461, 1394, 1400);
  ("equal", 1461, 1463, 1400, 1402);
  ("replace", 1463, 1465, 1402, 1404);
  ("equal", 1465, 1474, 1404, 1413);
  ("replace", 1474, 1476, 1413, 1415);
  ("equal", 1476, 1508, 1415, 1447);
  ("delete", 1508, 1509, 1447, 1447);
  ("equal", 1509, 1510, 1447, 1448);
  ("replace", 1510, 1512, 1448, 1449);
  ("equal", 1512, 1513, 1449, 1450);
  ("replace", 1513, 1516, 1450, 1452);
  ("equal", 1516, 1517, 1452, 1453);
  ("replace", 1517, 1518, 1453, 1454);
  ("equal", 1518, 1524, 1454, 1460);
  ("replace", 1524, 1527, 1460, 1462);
  ("equal", 1527, 1528, 1462, 1463);
  ("replace", 1528, 1530, 1463, 1465);
  ("equal", 1530, 1531, 1465, 1466);
  ("replace", 1531, 1534, 1466, 1468);
  ("equal", 1534, 1535, 1468, 1469);
  ("replace", 1535, 1537, 1469, 1471);
  ("equal", 1537, 1562, 1471, 1496);
];;


(* ------------------------------------------------------------------------- *)
(* Full actions.                                                             *)
(* ------------------------------------------------------------------------- *)

let actions_merged = merge_actions (!actions1,actions2);;

(* ------------------------------------------------------------------------- *)
(* Define arrays describing which registers are containing dead values at    *)
(* each program location.                                                    *)
(*                                                                           *)
(* First, let's build dead value info of the original program. These don't   *)
(* consider callee-save register spills and ret.                             *)
(* ------------------------------------------------------------------------- *)

let local_montmul_p256_dead_value_info = [|
  []; (* 1: ldr q20, [x2] *)
  []; (* 2: ldp x7, x17, [x1] *)
  []; (* 3: ldr q0, [x1] *)
  []; (* 4: ldp x6, x10, [x2] *)
  []; (* 5: ldp x11, x15, [x1, #16] *)
  []; (* 6: rev64       v16.4s, v20.4s *)
  []; (* 7: subs        x4, x7, x17 *)
  []; (* 8: csetm       x3, cc  // cc = lo, ul, last *)
  [`CF`; `NF`; `ZF`; `VF`; `X4`]; (* 9: cneg    x13, x4, cc  // cc = lo, ul, last *)
  []; (* 10: mul        v16.4s, v16.4s, v0.4s *)
  []; (* 11: umulh      x12, x17, x10 *)
  [`Q20`]; (* 12: uzp1  v28.4s, v20.4s, v0.4s *)
  []; (* 13: subs       x14, x11, x7 *)
  []; (* 14: ldr        q20, [x2, #16] *)
  [`X17`]; (* 15: sbcs  x5, x15, x17 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 16: ngc  x17, xzr *)
  [`X11`; `X15`]; (* 17: subs   x8, x11, x15 *)
  [`Q16`]; (* 18: uaddlp        v27.2d, v16.4s *)
  [`X7`]; (* 19: umulh  x4, x7, x6 *)
  [`Q0`]; (* 20: uzp1   v21.4s, v0.4s, v0.4s *)
  [`X8`]; (* 21: cneg   x11, x8, cc  // cc = lo, ul, last *)
  [`Q27`]; (* 22: shl   v17.2d, v27.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 23: csetm        x15, cc  // cc = lo, ul, last *)
  []; (* 24: subs       x9, x10, x6 *)
  [`X14`]; (* 25: eor   x7, x14, x17 *)
  [`Q21`; `Q28`]; (* 26: umlal  v17.2d, v21.2s, v28.2s *)
  [`X9`]; (* 27: cneg   x8, x9, cc  // cc = lo, ul, last *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 28: cinv   x9, x3, cc  // cc = lo, ul, last *)
  []; (* 29: cmn        x17, #0x1 *)
  []; (* 30: ldr        q28, [x1, #16] *)
  [`X7`]; (* 31: adcs   x14, x7, xzr *)
  []; (* 32: mul        x7, x13, x8 *)
  [`X5`]; (* 33: eor    x1, x5, x17 *)
  [`CF`; `NF`; `ZF`; `VF`; `X1`]; (* 34: adcs   x5, x1, xzr *)
  []; (* 35: xtn        v1.2s, v20.2d *)
  []; (* 36: mov        x1, v17.d[0] *)
  [`Q17`]; (* 37: mov   x3, v17.d[1] *)
  []; (* 38: uzp2       v16.4s, v20.4s, v20.4s *)
  [`X13`; `X8`]; (* 39: umulh   x16, x13, x8 *)
  [`X7`]; (* 40: eor    x13, x7, x9 *)
  []; (* 41: adds       x8, x1, x3 *)
  []; (* 42: adcs       x7, x4, x12 *)
  []; (* 43: xtn        v0.2s, v28.2d *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 44: adcs x12, x12, xzr *)
  [`X4`]; (* 45: adds   x8, x4, x8 *)
  [`X7`]; (* 46: adcs   x3, x3, x7 *)
  []; (* 47: ldp        x7, x2, [x2, #16] *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 48: adcs x12, x12, xzr *)
  []; (* 49: cmn        x9, #0x1 *)
  [`X13`]; (* 50: adcs  x8, x8, x13 *)
  [`X16`]; (* 51: eor   x13, x16, x9 *)
  [`X13`; `X3`]; (* 52: adcs    x16, x3, x13 *)
  []; (* 53: lsl        x3, x1, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`; `X9`]; (* 54: adc     x13, x12, x9 *)
  [`X6`]; (* 55: subs   x12, x6, x7 *)
  [`X10`]; (* 56: sbcs  x9, x10, x2 *)
  []; (* 57: lsr        x10, x1, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 58: ngc  x4, xzr *)
  [`X2`; `X7`]; (* 59: subs     x6, x2, x7 *)
  [`X15`]; (* 60: cinv  x2, x15, cc  // cc = lo, ul, last *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 61: cneg x6, x6, cc  // cc = lo, ul, last *)
  []; (* 62: subs       x7, x1, x3 *)
  []; (* 63: eor        x9, x9, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 64: sbc  x1, x1, x10 *)
  [`X3`; `X8`]; (* 65: adds     x15, x8, x3 *)
  [`X10`; `X16`]; (* 66: adcs   x3, x16, x10 *)
  []; (* 67: mul        x16, x11, x6 *)
  [`X13`; `X7`]; (* 68: adcs    x8, x13, x7 *)
  [`X12`]; (* 69: eor   x13, x12, x4 *)
  [`CF`; `NF`; `ZF`; `VF`; `X1`]; (* 70: adc    x10, x1, xzr *)
  []; (* 71: cmn        x4, #0x1 *)
  [`X11`]; (* 72: umulh x6, x11, x6 *)
  [`X13`]; (* 73: adcs  x11, x13, xzr *)
  [`CF`; `NF`; `ZF`; `VF`; `X9`]; (* 74: adcs   x1, x9, xzr *)
  []; (* 75: lsl        x13, x15, #32 *)
  []; (* 76: subs       x12, x15, x13 *)
  []; (* 77: lsr        x7, x15, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 78: sbc  x15, x15, x7 *)
  [`X13`; `X3`]; (* 79: adds    x9, x3, x13 *)
  [`X7`; `X8`]; (* 80: adcs     x3, x8, x7 *)
  []; (* 81: umulh      x8, x14, x11 *)
  []; (* 82: umull      v21.2d, v0.2s, v1.2s *)
  [`X10`]; (* 83: adcs  x12, x10, x12 *)
  []; (* 84: umull      v3.2d, v0.2s, v16.2s *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 85: adc  x15, x15, xzr *)
  [`Q20`]; (* 86: rev64 v24.4s, v20.4s *)
  [`X12`; `X15`]; (* 87: stp    x12, x15, [x0, #16] *)
  []; (* 88: movi       v2.2d, #0xffffffff *)
  []; (* 89: mul        x10, x14, x11 *)
  [`Q24`]; (* 90: mul   v4.4s, v24.4s, v28.4s *)
  [`X14`]; (* 91: subs  x13, x14, x5 *)
  [`Q28`]; (* 92: uzp2  v19.4s, v28.4s, v28.4s *)
  []; (* 93: csetm      x15, cc  // cc = lo, ul, last *)
  [`Q21`]; (* 94: usra  v3.2d, v21.2d, #32 *)
  []; (* 95: mul        x7, x5, x1 *)
  [`Q16`]; (* 96: umull v21.2d, v19.2s, v16.2s *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 97: cneg x13, x13, cc  // cc = lo, ul, last *)
  [`Q4`]; (* 98: uaddlp v5.2d, v4.4s *)
  []; (* 99: subs       x11, x1, x11 *)
  [`Q2`]; (* 100: and   v16.16b, v3.16b, v2.16b *)
  [`X1`]; (* 101: umulh x5, x5, x1 *)
  [`Q5`]; (* 102: shl   v24.2d, v5.2d, #32 *)
  []; (* 103: cneg      x11, x11, cc  // cc = lo, ul, last *)
  [`Q19`]; (* 104: umlal        v16.2d, v19.2s, v1.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X15`]; (* 105: cinv x12, x15, cc  // cc = lo, ul, last *)
  [`Q0`; `Q1`]; (* 106: umlal   v24.2d, v0.2s, v1.2s *)
  []; (* 107: adds      x15, x10, x7 *)
  []; (* 108: mul       x14, x13, x11 *)
  [`X6`]; (* 109: eor   x1, x6, x2 *)
  []; (* 110: adcs      x6, x8, x5 *)
  [`X3`; `X9`]; (* 111: stp     x9, x3, [x0] *)
  [`Q3`]; (* 112: usra  v21.2d, v3.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 113: adcs  x9, x5, xzr *)
  [`X13`]; (* 114: umulh        x11, x13, x11 *)
  [`X8`]; (* 115: adds  x15, x8, x15 *)
  [`X6`]; (* 116: adcs  x7, x7, x6 *)
  [`X14`]; (* 117: eor  x8, x14, x12 *)
  [`Q16`]; (* 118: usra v21.2d, v16.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X9`]; (* 119: adcs  x13, x9, xzr *)
  []; (* 120: cmn       x12, #0x1 *)
  []; (* 121: mov       x9, v24.d[1] *)
  [`X15`; `X8`]; (* 122: adcs   x14, x15, x8 *)
  [`X11`]; (* 123: eor  x6, x11, x12 *)
  [`X7`]; (* 124: adcs  x6, x7, x6 *)
  [`Q24`]; (* 125: mov  x5, v24.d[0] *)
  []; (* 126: mov       x11, v21.d[1] *)
  [`Q21`]; (* 127: mov  x7, v21.d[0] *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`; `X13`]; (* 128: adc   x3, x13, x12 *)
  []; (* 129: adds      x12, x5, x9 *)
  []; (* 130: adcs      x13, x7, x11 *)
  []; (* 131: ldp       x15, x8, [x0] *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 132: adcs        x11, x11, xzr *)
  [`X7`]; (* 133: adds  x12, x7, x12 *)
  []; (* 134: eor       x16, x16, x2 *)
  [`X13`; `X9`]; (* 135: adcs   x7, x9, x13 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 136: adcs        x11, x11, xzr *)
  []; (* 137: cmn       x2, #0x1 *)
  []; (* 138: ldp       x9, x13, [x0, #16] *)
  [`X12`]; (* 139: adcs x16, x12, x16 *)
  [`X7`]; (* 140: adcs  x1, x7, x1 *)
  [`CF`; `NF`; `ZF`; `VF`; `X11`]; (* 141: adc  x2, x11, x2 *)
  [`X15`; `X5`]; (* 142: adds   x7, x5, x15 *)
  [`X16`; `X8`]; (* 143: adcs   x15, x16, x8 *)
  [`X17`; `X4`]; (* 144: eor    x5, x17, x4 *)
  [`X1`]; (* 145: adcs  x9, x1, x9 *)
  [`X10`]; (* 146: eor  x1, x10, x5 *)
  [`X13`; `X2`]; (* 147: adcs   x16, x2, x13 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 148: adc x2, xzr, xzr *)
  []; (* 149: cmn       x5, #0x1 *)
  [`X14`]; (* 150: eor  x13, x14, x5 *)
  [`X1`]; (* 151: adcs  x14, x1, x7 *)
  [`X6`]; (* 152: eor   x1, x6, x5 *)
  [`X13`]; (* 153: adcs x6, x13, x15 *)
  [`X1`]; (* 154: adcs  x10, x1, x9 *)
  [`X3`]; (* 155: eor   x4, x3, x5 *)
  []; (* 156: mov       x1, #0xffffffff                 // #4294967295 *)
  [`X4`]; (* 157: adcs  x8, x4, x16 *)
  []; (* 158: lsr       x13, x14, #32 *)
  []; (* 159: adcs      x17, x2, x5 *)
  []; (* 160: adcs      x11, x5, xzr *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 161: adc   x4, x5, xzr *)
  [`X10`; `X7`]; (* 162: adds   x12, x10, x7 *)
  [`X15`; `X8`]; (* 163: adcs   x7, x8, x15 *)
  [`X17`; `X9`]; (* 164: adcs   x5, x17, x9 *)
  [`X11`; `X16`]; (* 165: adcs  x9, x11, x16 *)
  []; (* 166: lsl       x11, x14, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X2`; `X4`]; (* 167: adc     x10, x4, x2 *)
  []; (* 168: subs      x17, x14, x11 *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`]; (* 169: sbc  x4, x14, x13 *)
  [`X6`]; (* 170: adds  x11, x6, x11 *)
  [`X13`]; (* 171: adcs x12, x12, x13 *)
  []; (* 172: lsl       x15, x11, #32 *)
  [`X7`]; (* 173: adcs  x17, x7, x17 *)
  []; (* 174: lsr       x7, x11, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X4`]; (* 175: adc   x13, x4, xzr *)
  []; (* 176: subs      x4, x11, x15 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 177: sbc x11, x11, x7 *)
  [`X12`; `X15`]; (* 178: adds  x8, x12, x15 *)
  [`X17`; `X7`]; (* 179: adcs   x15, x17, x7 *)
  [`X13`]; (* 180: adcs x4, x13, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 181: adc x11, x11, xzr *)
  [`X4`; `X5`]; (* 182: adds    x7, x5, x4 *)
  [`X11`; `X9`]; (* 183: adcs   x17, x9, x11 *)
  [`CF`; `NF`; `ZF`; `VF`; `X10`]; (* 184: adc  x13, x10, xzr *)
  []; (* 185: add       x12, x13, #0x1 *)
  []; (* 186: neg       x11, x12 *)
  []; (* 187: lsl       x4, x12, #32 *)
  []; (* 188: adds      x17, x17, x4 *)
  []; (* 189: sub       x4, x4, #0x1 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 190: adc x13, x13, xzr *)
  [`X8`]; (* 191: subs  x11, x8, x11 *)
  [`X15`]; (* 192: sbcs x4, x15, x4 *)
  []; (* 193: sbcs      x7, x7, xzr *)
  []; (* 194: sbcs      x17, x17, x12 *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`]; (* 195: sbcs x13, x13, x12 *)
  []; (* 196: mov       x12, #0xffffffff00000001        // #-4294967295 *)
  []; (* 197: adds      x11, x11, x13 *)
  []; (* 198: and       x1, x1, x13 *)
  [`X1`]; (* 199: adcs  x4, x4, x1 *)
  [`X12`; `X13`]; (* 200: and   x1, x12, x13 *)
  [`X11`; `X4`]; (* 201: stp    x11, x4, [x0] *)
  [`X7`]; (* 202: adcs  x4, x7, xzr *)
  [`CF`; `NF`; `ZF`; `VF`; `X17`]; (* 203: adc  x1, x17, x1 *)
  [`X1`; `X4`]; (* 204: stp     x4, x1, [x0, #16] *)
|];;

let local_montsqr_p256_dead_value_info = [|
  []; (* 1: ldr q19, [x1] *)
  []; (* 2: ldp x9, x13, [x1] *)
  []; (* 3: ldr q23, [x1, #16] *)
  []; (* 4: ldr q0, [x1] *)
  []; (* 5: ldp x1, x10, [x1, #16] *)
  []; (* 6: uzp2        v29.4s, v19.4s, v19.4s *)
  []; (* 7: xtn v4.2s, v19.2d *)
  []; (* 8: umulh       x8, x9, x13 *)
  []; (* 9: rev64       v20.4s, v23.4s *)
  []; (* 10: umull      v16.2d, v19.2s, v19.2s *)
  [`Q29`; `Q4`]; (* 11: umull   v1.2d, v29.2s, v4.2s *)
  []; (* 12: mul        v20.4s, v20.4s, v0.4s *)
  []; (* 13: subs       x14, x9, x13 *)
  []; (* 14: umulh      x15, x9, x1 *)
  []; (* 15: mov        x16, v16.d[1] *)
  [`Q19`]; (* 16: umull2        v4.2d, v19.4s, v19.4s *)
  [`Q16`]; (* 17: mov   x4, v16.d[0] *)
  [`Q23`]; (* 18: uzp1  v17.4s, v23.4s, v0.4s *)
  [`Q20`]; (* 19: uaddlp        v19.2d, v20.4s *)
  []; (* 20: lsr        x7, x8, #63 *)
  [`X9`]; (* 21: mul    x11, x9, x13 *)
  []; (* 22: mov        x12, v1.d[0] *)
  []; (* 23: csetm      x5, cc  // cc = lo, ul, last *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`]; (* 24: cneg  x6, x14, cc  // cc = lo, ul, last *)
  []; (* 25: mov        x3, v4.d[1] *)
  [`Q4`]; (* 26: mov    x14, v4.d[0] *)
  []; (* 27: subs       x2, x10, x1 *)
  [`Q1`]; (* 28: mov    x9, v1.d[1] *)
  [`X2`]; (* 29: cneg   x17, x2, cc  // cc = lo, ul, last *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 30: cinv   x2, x5, cc  // cc = lo, ul, last *)
  [`X4`]; (* 31: adds   x5, x4, x12, lsl #33 *)
  [`X8`]; (* 32: extr   x4, x8, x11, #63 *)
  [`X12`]; (* 33: lsr   x8, x12, #31 *)
  [`Q0`]; (* 34: uzp1   v20.4s, v0.4s, v0.4s *)
  []; (* 35: shl        v19.2d, v19.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X8`]; (* 36: adc    x16, x16, x8 *)
  [`X14`]; (* 37: adds  x8, x14, x9, lsl #33 *)
  [`X9`]; (* 38: lsr    x14, x9, #31 *)
  []; (* 39: lsl        x9, x5, #32 *)
  [`Q17`; `Q20`]; (* 40: umlal  v19.2d, v20.2s, v17.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 41: adc    x14, x3, x14 *)
  [`X11`]; (* 42: adds  x16, x16, x11, lsl #1 *)
  []; (* 43: lsr        x3, x5, #32 *)
  []; (* 44: umulh      x12, x6, x17 *)
  [`X8`]; (* 45: adcs   x4, x8, x4 *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`; `X7`]; (* 46: adc     x11, x14, x7 *)
  []; (* 47: subs       x8, x5, x9 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 48: sbc  x5, x5, x3 *)
  [`X9`]; (* 49: adds   x16, x16, x9 *)
  []; (* 50: mov        x14, v19.d[0] *)
  [`X6`]; (* 51: mul    x17, x6, x17 *)
  [`X4`]; (* 52: adcs   x3, x4, x3 *)
  []; (* 53: lsl        x7, x16, #32 *)
  []; (* 54: umulh      x13, x13, x10 *)
  [`X8`]; (* 55: adcs   x11, x11, x8 *)
  []; (* 56: lsr        x8, x16, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 57: adc  x5, x5, xzr *)
  []; (* 58: subs       x9, x16, x7 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 59: sbc  x16, x16, x8 *)
  [`X3`]; (* 60: adds   x7, x3, x7 *)
  [`Q19`]; (* 61: mov   x3, v19.d[1] *)
  [`X11`; `X8`]; (* 62: adcs    x6, x11, x8 *)
  []; (* 63: umulh      x11, x1, x10 *)
  [`X9`]; (* 64: adcs   x5, x5, x9 *)
  [`X12`]; (* 65: eor   x8, x12, x2 *)
  [`CF`; `NF`; `ZF`; `VF`; `X16`]; (* 66: adc   x9, x16, xzr *)
  []; (* 67: adds       x16, x14, x15 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 68: adc  x15, x15, xzr *)
  [`X16`]; (* 69: adds  x12, x16, x3 *)
  [`X17`]; (* 70: eor   x16, x17, x2 *)
  []; (* 71: mul        x4, x1, x10 *)
  []; (* 72: adcs       x15, x15, x13 *)
  [`CF`; `NF`; `ZF`; `VF`; `X13`]; (* 73: adc   x17, x13, xzr *)
  [`X3`]; (* 74: adds   x15, x15, x3 *)
  [`CF`; `NF`; `ZF`; `VF`; `X17`]; (* 75: adc   x3, x17, xzr *)
  []; (* 76: cmn        x2, #0x1 *)
  []; (* 77: mul        x17, x10, x10 *)
  [`X16`]; (* 78: adcs  x12, x12, x16 *)
  [`X15`; `X8`]; (* 79: adcs    x16, x15, x8 *)
  []; (* 80: umulh      x10, x10, x10 *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 81: adc    x2, x3, x2 *)
  []; (* 82: adds       x14, x14, x14 *)
  []; (* 83: adcs       x12, x12, x12 *)
  []; (* 84: adcs       x16, x16, x16 *)
  []; (* 85: adcs       x2, x2, x2 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 86: adc  x15, xzr, xzr *)
  [`X7`]; (* 87: adds   x14, x14, x7 *)
  []; (* 88: mul        x3, x1, x1 *)
  [`X6`]; (* 89: adcs   x12, x12, x6 *)
  []; (* 90: lsr        x7, x14, #32 *)
  [`X5`]; (* 91: adcs   x16, x16, x5 *)
  []; (* 92: lsl        x5, x14, #32 *)
  [`X1`]; (* 93: umulh  x13, x1, x1 *)
  [`X9`]; (* 94: adcs   x2, x2, x9 *)
  []; (* 95: mov        x6, #0xffffffff                 // #4294967295 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 96: adc  x15, x15, xzr *)
  [`X4`]; (* 97: adds   x8, x4, x4 *)
  [`X11`]; (* 98: adcs  x1, x11, x11 *)
  []; (* 99: mov        x11, #0xffffffff00000001        // #-4294967295 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 100: adc x4, xzr, xzr *)
  []; (* 101: subs      x9, x14, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 102: sbc x14, x14, x7 *)
  [`X5`]; (* 103: adds  x12, x12, x5 *)
  [`X7`]; (* 104: adcs  x16, x16, x7 *)
  []; (* 105: lsl       x5, x12, #32 *)
  []; (* 106: lsr       x7, x12, #32 *)
  [`X9`]; (* 107: adcs  x2, x2, x9 *)
  [`X15`]; (* 108: adcs x14, x15, x14 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 109: adc x15, xzr, xzr *)
  []; (* 110: subs      x9, x12, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 111: sbc x12, x12, x7 *)
  [`X5`]; (* 112: adds  x16, x16, x5 *)
  [`X7`]; (* 113: adcs  x2, x2, x7 *)
  [`X9`]; (* 114: adcs  x14, x14, x9 *)
  [`X15`]; (* 115: adcs x12, x15, x12 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 116: adc x15, xzr, xzr *)
  [`X3`]; (* 117: adds  x16, x16, x3 *)
  [`X13`]; (* 118: adcs x2, x2, x13 *)
  [`X17`]; (* 119: adcs x14, x14, x17 *)
  [`X10`]; (* 120: adcs x12, x12, x10 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 121: adc x15, x15, xzr *)
  [`X8`]; (* 122: adds  x2, x2, x8 *)
  [`X1`]; (* 123: adcs  x14, x14, x1 *)
  [`X4`]; (* 124: adcs  x12, x12, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 125: adcs        x15, x15, xzr *)
  []; (* 126: adds      x3, x16, #0x1 *)
  [`X6`]; (* 127: sbcs  x5, x2, x6 *)
  []; (* 128: sbcs      x8, x14, xzr *)
  []; (* 129: sbcs      x11, x12, x11 *)
  [`X15`]; (* 130: sbcs xzr, x15, xzr *)
  [`X3`]; (* 131: csel  x16, x3, x16, cs  // cs = hs, nlast *)
  [`X8`]; (* 132: csel  x14, x8, x14, cs  // cs = hs, nlast *)
  [`X11`]; (* 133: csel x12, x11, x12, cs  // cs = hs, nlast *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 134: csel  x2, x5, x2, cs  // cs = hs, nlast *)
  [`X12`; `X14`]; (* 135: stp   x14, x12, [x0, #16] *)
  [`X16`; `X2`]; (* 136: stp    x16, x2, [x0] *)
|];;

let local_sub_p256_dead_value_info = [|
  []; (* 1: ldp x5, x6, [x1] *)
  []; (* 2: ldp x4, x3, [x2] *)
  [`X4`]; (* 3: subs    x5, x5, x4 *)
  [`X3`]; (* 4: sbcs    x6, x6, x3 *)
  []; (* 5: ldp x7, x8, [x1, #16] *)
  []; (* 6: ldp x4, x3, [x2, #16] *)
  [`X4`]; (* 7: sbcs    x7, x7, x4 *)
  [`X3`]; (* 8: sbcs    x8, x8, x3 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 9: csetm x3, cc  // cc = lo, ul, last *)
  []; (* 10: adds       x5, x5, x3 *)
  []; (* 11: and        x4, x3, #0xffffffff *)
  [`X4`]; (* 12: adcs   x6, x6, x4 *)
  []; (* 13: adcs       x7, x7, xzr *)
  [`X3`]; (* 14: and    x4, x3, #0xffffffff00000001 *)
  [`CF`; `NF`; `ZF`; `VF`; `X4`]; (* 15: adc    x8, x8, x4 *)
  [`X5`; `X6`]; (* 16: stp      x5, x6, [x0] *)
  [`X7`; `X8`]; (* 17: stp      x7, x8, [x0, #16] *)
|];;

let local_add_p256_dead_value_info = [|
  []; (* 1: ldp x4, x5, [x1] *)
  []; (* 2: ldp x8, x9, [x2] *)
  [`X8`]; (* 3: adds    x4, x4, x8 *)
  [`X9`]; (* 4: adcs    x5, x5, x9 *)
  []; (* 5: ldp x6, x7, [x1, #16] *)
  []; (* 6: ldp x10, x11, [x2, #16] *)
  [`X10`]; (* 7: adcs   x6, x6, x10 *)
  [`X11`]; (* 8: adcs   x7, x7, x11 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 9: adc   x3, xzr, xzr *)
  []; (* 10: adds       x8, x4, #0x1 *)
  []; (* 11: mov        x9, #0xffffffff                 // #4294967295 *)
  []; (* 12: sbcs       x9, x5, x9 *)
  []; (* 13: sbcs       x10, x6, xzr *)
  []; (* 14: mov        x11, #0xffffffff00000001        // #-4294967295 *)
  []; (* 15: sbcs       x11, x7, x11 *)
  [`X3`]; (* 16: sbcs   x3, x3, xzr *)
  [`X8`]; (* 17: csel   x4, x4, x8, cc  // cc = lo, ul, last *)
  [`X9`]; (* 18: csel   x5, x5, x9, cc  // cc = lo, ul, last *)
  [`X10`]; (* 19: csel  x6, x6, x10, cc // cc = lo, ul, last *)
  [`CF`; `NF`; `ZF`; `VF`; `X11`]; (* 20: csel  x7, x7, x11, cc // cc = lo, ul, last *)
  [`X4`; `X5`]; (* 21: stp      x4, x5, [x0] *)
  [`X6`; `X7`]; (* 22: stp      x6, x7, [x0, #16] *)
|];;

let p256_montjdouble_unopt_dead_value_info =
  let _,_,n,_,_ = last !actions1 in Array.init n (fun _ -> []);;

let i = ref 0;;
List.iter (fun code_block ->
  match code_block with
  | "equal", Some instcnt ->
    (* simply, don't add any data. *)
    i := instcnt + !i
  | callstr, None -> begin
    match callstr with
    | "call montmul_p256" ->
      i := 4 + !i; (* arguments + bl *)
      for j = 0 to Array.length local_montmul_p256_dead_value_info - 1 do
        p256_montjdouble_unopt_dead_value_info.(!i) <-
          local_montmul_p256_dead_value_info.(j);
        i := 1 + !i;
      done;
      i := 1 + !i (* ret *)
    | "call montsqr_p256" ->
      i := 3 + !i; (* arguments + bl *)
      for j = 0 to Array.length local_montsqr_p256_dead_value_info - 1 do
        p256_montjdouble_unopt_dead_value_info.(!i) <-
          local_montsqr_p256_dead_value_info.(j);
        i := 1 + !i;
      done;
      i := 1 + !i (* ret *)
    | "call sub_p256" ->
      i := 4 + !i; (* arguments + bl *)
      for j = 0 to Array.length local_sub_p256_dead_value_info - 1 do
        p256_montjdouble_unopt_dead_value_info.(!i) <-
          local_sub_p256_dead_value_info.(j);
        i := 1 + !i;
      done;
      i := 1 + !i (* ret *)
    | "call add_p256" ->
      i := 4 + !i; (* arguments + bl *)
      for j = 0 to Array.length local_add_p256_dead_value_info - 1 do
        p256_montjdouble_unopt_dead_value_info.(!i) <-
          local_add_p256_dead_value_info.(j);
        i := 1 + !i;
      done;
      i := 1 + !i (* ret *)
  end)
  code_blocks;;

assert (!i = Array.length p256_montjdouble_unopt_dead_value_info);;

(* ------------------------------------------------------------------------- *)
(* Second, build dead value info of the optimized program.                   *)
(* ------------------------------------------------------------------------- *)

let p256_montjdouble_dead_value_info = [|
  []; (* 1: mov x19, x0 *)
  []; (* 2: mov x20, x1 *)
  []; (* 3: mov x0, sp *)
  []; (* 4: ldr q19, [x20, #64] *)
  []; (* 5: ldp x9, x13, [x20, #64] *)
  []; (* 6: ldr q23, [x20, #80] *)
  []; (* 7: ldr q0, [x20, #64] *)
  []; (* 8: ldp x1, x10, [x20, #80] *)
  []; (* 9: uzp2 v29.4s, v19.4s, v19.4s *)
  []; (* 10: xtn v4.2s, v19.2d *)
  []; (* 11: umulh x8, x9, x13 *)
  []; (* 12: rev64 v20.4s, v23.4s *)
  []; (* 13: umull v16.2d, v19.2s, v19.2s *)
  [`Q29`; `Q4`]; (* 14: umull v1.2d, v29.2s, v4.2s *)
  []; (* 15: mul v20.4s, v20.4s, v0.4s *)
  []; (* 16: subs x14, x9, x13 *)
  []; (* 17: umulh x15, x9, x1 *)
  []; (* 18: mov x16, v16.d[1] *)
  [`Q19`]; (* 19: umull2 v4.2d, v19.4s, v19.4s *)
  [`Q16`]; (* 20: mov x4, v16.d[0] *)
  [`Q23`]; (* 21: uzp1 v17.4s, v23.4s, v0.4s *)
  [`Q20`]; (* 22: uaddlp v19.2d, v20.4s *)
  []; (* 23: lsr x7, x8, #63 *)
  [`X9`]; (* 24: mul x11, x9, x13 *)
  []; (* 25: mov x12, v1.d[0] *)
  []; (* 26: csetm x5, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`]; (* 27: cneg x6, x14, cc *)
  []; (* 28: mov x3, v4.d[1] *)
  [`Q4`]; (* 29: mov x14, v4.d[0] *)
  []; (* 30: subs x2, x10, x1 *)
  [`Q1`]; (* 31: mov x9, v1.d[1] *)
  [`X2`]; (* 32: cneg x17, x2, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 33: cinv x2, x5, cc *)
  [`X4`]; (* 34: adds x5, x4, x12, lsl #33 *)
  [`X8`]; (* 35: extr x4, x8, x11, #63 *)
  [`X12`]; (* 36: lsr x8, x12, #31 *)
  [`Q0`]; (* 37: uzp1 v20.4s, v0.4s, v0.4s *)
  []; (* 38: shl v19.2d, v19.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X8`]; (* 39: adc x16, x16, x8 *)
  [`X14`]; (* 40: adds x8, x14, x9, lsl #33 *)
  [`X9`]; (* 41: lsr x14, x9, #31 *)
  []; (* 42: lsl x9, x5, #32 *)
  [`Q17`; `Q20`]; (* 43: umlal v19.2d, v20.2s, v17.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 44: adc x14, x3, x14 *)
  [`X11`]; (* 45: adds x16, x16, x11, lsl #1 *)
  []; (* 46: lsr x3, x5, #32 *)
  []; (* 47: umulh x12, x6, x17 *)
  [`X8`]; (* 48: adcs x4, x8, x4 *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`; `X7`]; (* 49: adc x11, x14, x7 *)
  []; (* 50: subs x8, x5, x9 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 51: sbc x5, x5, x3 *)
  [`X9`]; (* 52: adds x16, x16, x9 *)
  []; (* 53: mov x14, v19.d[0] *)
  [`X6`]; (* 54: mul x17, x6, x17 *)
  [`X4`]; (* 55: adcs x3, x4, x3 *)
  []; (* 56: lsl x7, x16, #32 *)
  []; (* 57: umulh x13, x13, x10 *)
  [`X8`]; (* 58: adcs x11, x11, x8 *)
  []; (* 59: lsr x8, x16, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 60: adc x5, x5, xzr *)
  []; (* 61: subs x9, x16, x7 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 62: sbc x16, x16, x8 *)
  [`X3`]; (* 63: adds x7, x3, x7 *)
  [`Q19`]; (* 64: mov x3, v19.d[1] *)
  [`X11`; `X8`]; (* 65: adcs x6, x11, x8 *)
  []; (* 66: umulh x11, x1, x10 *)
  [`X9`]; (* 67: adcs x5, x5, x9 *)
  [`X12`]; (* 68: eor x8, x12, x2 *)
  [`CF`; `NF`; `ZF`; `VF`; `X16`]; (* 69: adc x9, x16, xzr *)
  []; (* 70: adds x16, x14, x15 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 71: adc x15, x15, xzr *)
  [`X16`]; (* 72: adds x12, x16, x3 *)
  [`X17`]; (* 73: eor x16, x17, x2 *)
  []; (* 74: mul x4, x1, x10 *)
  []; (* 75: adcs x15, x15, x13 *)
  [`CF`; `NF`; `ZF`; `VF`; `X13`]; (* 76: adc x17, x13, xzr *)
  [`X3`]; (* 77: adds x15, x15, x3 *)
  [`CF`; `NF`; `ZF`; `VF`; `X17`]; (* 78: adc x3, x17, xzr *)
  []; (* 79: cmn x2, #0x1 *)
  []; (* 80: mul x17, x10, x10 *)
  [`X16`]; (* 81: adcs x12, x12, x16 *)
  [`X15`; `X8`]; (* 82: adcs x16, x15, x8 *)
  []; (* 83: umulh x10, x10, x10 *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 84: adc x2, x3, x2 *)
  []; (* 85: adds x14, x14, x14 *)
  []; (* 86: adcs x12, x12, x12 *)
  []; (* 87: adcs x16, x16, x16 *)
  []; (* 88: adcs x2, x2, x2 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 89: adc x15, xzr, xzr *)
  [`X7`]; (* 90: adds x14, x14, x7 *)
  []; (* 91: mul x3, x1, x1 *)
  [`X6`]; (* 92: adcs x12, x12, x6 *)
  []; (* 93: lsr x7, x14, #32 *)
  [`X5`]; (* 94: adcs x16, x16, x5 *)
  []; (* 95: lsl x5, x14, #32 *)
  [`X1`]; (* 96: umulh x13, x1, x1 *)
  [`X9`]; (* 97: adcs x2, x2, x9 *)
  []; (* 98: mov x6, #0xffffffff *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 99: adc x15, x15, xzr *)
  [`X4`]; (* 100: adds x8, x4, x4 *)
  [`X11`]; (* 101: adcs x1, x11, x11 *)
  []; (* 102: mov x11, #0xffffffff00000001 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 103: adc x4, xzr, xzr *)
  []; (* 104: subs x9, x14, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 105: sbc x14, x14, x7 *)
  [`X5`]; (* 106: adds x12, x12, x5 *)
  [`X7`]; (* 107: adcs x16, x16, x7 *)
  []; (* 108: lsl x5, x12, #32 *)
  []; (* 109: lsr x7, x12, #32 *)
  [`X9`]; (* 110: adcs x2, x2, x9 *)
  [`X15`]; (* 111: adcs x14, x15, x14 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 112: adc x15, xzr, xzr *)
  []; (* 113: subs x9, x12, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 114: sbc x12, x12, x7 *)
  [`X5`]; (* 115: adds x16, x16, x5 *)
  [`X7`]; (* 116: adcs x2, x2, x7 *)
  [`X9`]; (* 117: adcs x14, x14, x9 *)
  [`X15`]; (* 118: adcs x12, x15, x12 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 119: adc x15, xzr, xzr *)
  [`X3`]; (* 120: adds x16, x16, x3 *)
  [`X13`]; (* 121: adcs x2, x2, x13 *)
  [`X17`]; (* 122: adcs x14, x14, x17 *)
  [`X10`]; (* 123: adcs x12, x12, x10 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 124: adc x15, x15, xzr *)
  [`X8`]; (* 125: adds x2, x2, x8 *)
  [`X1`]; (* 126: adcs x14, x14, x1 *)
  [`X4`]; (* 127: adcs x12, x12, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 128: adcs x15, x15, xzr *)
  []; (* 129: adds x3, x16, #0x1 *)
  [`X6`]; (* 130: sbcs x5, x2, x6 *)
  []; (* 131: sbcs x8, x14, xzr *)
  []; (* 132: sbcs x11, x12, x11 *)
  [`X15`]; (* 133: sbcs xzr, x15, xzr *)
  [`X16`; `X3`]; (* 134: csel x21, x3, x16, cs *)
  [`X14`; `X8`]; (* 135: csel x22, x8, x14, cs *)
  [`X11`; `X12`]; (* 136: csel x23, x11, x12, cs *)
  [`CF`; `NF`; `ZF`; `VF`; `X2`; `X5`]; (* 137: csel x24, x5, x2, cs *)
  []; (* 138: stp x22, x23, [x0, #16] *)
  [`X0`]; (* 139: stp x21, x24, [x0] *)
  []; (* 140: ldr q19, [x20, #32] *)
  []; (* 141: ldp x9, x13, [x20, #32] *)
  []; (* 142: ldr q23, [x20, #48] *)
  []; (* 143: ldr q0, [x20, #32] *)
  []; (* 144: ldp x1, x10, [x20, #48] *)
  []; (* 145: uzp2 v29.4s, v19.4s, v19.4s *)
  []; (* 146: xtn v4.2s, v19.2d *)
  []; (* 147: umulh x8, x9, x13 *)
  []; (* 148: rev64 v20.4s, v23.4s *)
  []; (* 149: umull v16.2d, v19.2s, v19.2s *)
  [`Q29`; `Q4`]; (* 150: umull v1.2d, v29.2s, v4.2s *)
  []; (* 151: mul v20.4s, v20.4s, v0.4s *)
  []; (* 152: subs x14, x9, x13 *)
  []; (* 153: umulh x15, x9, x1 *)
  []; (* 154: mov x16, v16.d[1] *)
  [`Q19`]; (* 155: umull2 v4.2d, v19.4s, v19.4s *)
  [`Q16`]; (* 156: mov x4, v16.d[0] *)
  [`Q23`]; (* 157: uzp1 v17.4s, v23.4s, v0.4s *)
  [`Q20`]; (* 158: uaddlp v19.2d, v20.4s *)
  []; (* 159: lsr x7, x8, #63 *)
  [`X9`]; (* 160: mul x11, x9, x13 *)
  []; (* 161: mov x12, v1.d[0] *)
  []; (* 162: csetm x5, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`]; (* 163: cneg x6, x14, cc *)
  []; (* 164: mov x3, v4.d[1] *)
  [`Q4`]; (* 165: mov x14, v4.d[0] *)
  []; (* 166: subs x2, x10, x1 *)
  [`Q1`]; (* 167: mov x9, v1.d[1] *)
  [`X2`]; (* 168: cneg x17, x2, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 169: cinv x2, x5, cc *)
  [`X4`]; (* 170: adds x5, x4, x12, lsl #33 *)
  [`X8`]; (* 171: extr x4, x8, x11, #63 *)
  [`X12`]; (* 172: lsr x8, x12, #31 *)
  [`Q0`]; (* 173: uzp1 v20.4s, v0.4s, v0.4s *)
  []; (* 174: shl v19.2d, v19.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X8`]; (* 175: adc x16, x16, x8 *)
  [`X14`]; (* 176: adds x8, x14, x9, lsl #33 *)
  [`X9`]; (* 177: lsr x14, x9, #31 *)
  []; (* 178: lsl x9, x5, #32 *)
  [`Q17`; `Q20`]; (* 179: umlal v19.2d, v20.2s, v17.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 180: adc x14, x3, x14 *)
  [`X11`]; (* 181: adds x16, x16, x11, lsl #1 *)
  []; (* 182: lsr x3, x5, #32 *)
  []; (* 183: umulh x12, x6, x17 *)
  [`X8`]; (* 184: adcs x4, x8, x4 *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`; `X7`]; (* 185: adc x11, x14, x7 *)
  []; (* 186: subs x8, x5, x9 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 187: sbc x5, x5, x3 *)
  [`X9`]; (* 188: adds x16, x16, x9 *)
  []; (* 189: mov x14, v19.d[0] *)
  [`X6`]; (* 190: mul x17, x6, x17 *)
  [`X4`]; (* 191: adcs x3, x4, x3 *)
  []; (* 192: lsl x7, x16, #32 *)
  []; (* 193: umulh x13, x13, x10 *)
  [`X8`]; (* 194: adcs x11, x11, x8 *)
  []; (* 195: lsr x8, x16, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 196: adc x5, x5, xzr *)
  []; (* 197: subs x9, x16, x7 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 198: sbc x16, x16, x8 *)
  [`X3`]; (* 199: adds x7, x3, x7 *)
  [`Q19`]; (* 200: mov x3, v19.d[1] *)
  [`X11`; `X8`]; (* 201: adcs x6, x11, x8 *)
  []; (* 202: umulh x11, x1, x10 *)
  [`X9`]; (* 203: adcs x5, x5, x9 *)
  [`X12`]; (* 204: eor x8, x12, x2 *)
  [`CF`; `NF`; `ZF`; `VF`; `X16`]; (* 205: adc x9, x16, xzr *)
  []; (* 206: adds x16, x14, x15 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 207: adc x15, x15, xzr *)
  [`X16`]; (* 208: adds x12, x16, x3 *)
  [`X17`]; (* 209: eor x16, x17, x2 *)
  []; (* 210: mul x4, x1, x10 *)
  []; (* 211: adcs x15, x15, x13 *)
  [`CF`; `NF`; `ZF`; `VF`; `X13`]; (* 212: adc x17, x13, xzr *)
  [`X3`]; (* 213: adds x15, x15, x3 *)
  [`CF`; `NF`; `ZF`; `VF`; `X17`]; (* 214: adc x3, x17, xzr *)
  []; (* 215: cmn x2, #0x1 *)
  []; (* 216: mul x17, x10, x10 *)
  [`X16`]; (* 217: adcs x12, x12, x16 *)
  [`X15`; `X8`]; (* 218: adcs x16, x15, x8 *)
  []; (* 219: umulh x10, x10, x10 *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 220: adc x2, x3, x2 *)
  []; (* 221: adds x14, x14, x14 *)
  []; (* 222: adcs x12, x12, x12 *)
  []; (* 223: adcs x16, x16, x16 *)
  []; (* 224: adcs x2, x2, x2 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 225: adc x15, xzr, xzr *)
  [`X7`]; (* 226: adds x14, x14, x7 *)
  []; (* 227: mul x3, x1, x1 *)
  [`X6`]; (* 228: adcs x12, x12, x6 *)
  []; (* 229: lsr x7, x14, #32 *)
  [`X5`]; (* 230: adcs x16, x16, x5 *)
  []; (* 231: lsl x5, x14, #32 *)
  [`X1`]; (* 232: umulh x13, x1, x1 *)
  [`X9`]; (* 233: adcs x2, x2, x9 *)
  []; (* 234: mov x6, #0xffffffff *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 235: adc x15, x15, xzr *)
  [`X4`]; (* 236: adds x8, x4, x4 *)
  [`X11`]; (* 237: adcs x1, x11, x11 *)
  []; (* 238: mov x11, #0xffffffff00000001 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 239: adc x4, xzr, xzr *)
  []; (* 240: subs x9, x14, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 241: sbc x14, x14, x7 *)
  [`X5`]; (* 242: adds x12, x12, x5 *)
  [`X7`]; (* 243: adcs x16, x16, x7 *)
  []; (* 244: lsl x5, x12, #32 *)
  []; (* 245: lsr x7, x12, #32 *)
  [`X9`]; (* 246: adcs x2, x2, x9 *)
  [`X15`]; (* 247: adcs x14, x15, x14 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 248: adc x15, xzr, xzr *)
  []; (* 249: subs x9, x12, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 250: sbc x12, x12, x7 *)
  [`X5`]; (* 251: adds x16, x16, x5 *)
  [`X7`]; (* 252: adcs x2, x2, x7 *)
  [`X9`]; (* 253: adcs x14, x14, x9 *)
  [`X15`]; (* 254: adcs x12, x15, x12 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 255: adc x15, xzr, xzr *)
  [`X3`]; (* 256: adds x16, x16, x3 *)
  [`X13`]; (* 257: adcs x2, x2, x13 *)
  [`X17`]; (* 258: adcs x14, x14, x17 *)
  [`X10`]; (* 259: adcs x12, x12, x10 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 260: adc x15, x15, xzr *)
  [`X8`]; (* 261: adds x2, x2, x8 *)
  [`X1`]; (* 262: adcs x14, x14, x1 *)
  [`X4`]; (* 263: adcs x12, x12, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 264: adcs x15, x15, xzr *)
  []; (* 265: adds x3, x16, #0x1 *)
  [`X6`]; (* 266: sbcs x5, x2, x6 *)
  []; (* 267: sbcs x8, x14, xzr *)
  []; (* 268: sbcs x11, x12, x11 *)
  [`X15`]; (* 269: sbcs xzr, x15, xzr *)
  [`X3`]; (* 270: csel x16, x3, x16, cs *)
  [`X8`]; (* 271: csel x14, x8, x14, cs *)
  [`X11`]; (* 272: csel x12, x11, x12, cs *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 273: csel x2, x5, x2, cs *)
  [`X12`; `X14`]; (* 274: stp x14, x12, [sp, #48] *)
  [`X16`; `X2`]; (* 275: stp x16, x2, [sp, #32] *)
  []; (* 276: ldp x5, x6, [x20, #0] *)
  []; (* 277: subs x5, x5, x21 *)
  []; (* 278: sbcs x6, x6, x24 *)
  []; (* 279: ldp x7, x8, [x20, #16] *)
  []; (* 280: sbcs x7, x7, x22 *)
  []; (* 281: sbcs x8, x8, x23 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 282: csetm x3, cc *)
  [`X5`]; (* 283: adds x10, x5, x3 *)
  []; (* 284: and x4, x3, #0xffffffff *)
  [`X4`; `X6`]; (* 285: adcs x25, x6, x4 *)
  [`X7`]; (* 286: adcs x26, x7, xzr *)
  [`X3`]; (* 287: and x4, x3, #0xffffffff00000001 *)
  [`CF`; `NF`; `ZF`; `VF`; `X4`; `X8`]; (* 288: adc x27, x8, x4 *)
  []; (* 289: stp x10, x25, [sp, #96] *)
  []; (* 290: stp x26, x27, [sp, #112] *)
  []; (* 291: ldp x5, x6, [x20] *)
  [`X21`]; (* 292: adds x5, x5, x21 *)
  [`X24`]; (* 293: adcs x6, x6, x24 *)
  []; (* 294: ldp x7, x8, [x20, #16] *)
  [`X22`]; (* 295: adcs x7, x7, x22 *)
  [`X23`]; (* 296: adcs x8, x8, x23 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 297: csetm x3, cs *)
  [`X5`]; (* 298: subs x9, x5, x3 *)
  []; (* 299: and x1, x3, #0xffffffff *)
  [`X1`; `X6`]; (* 300: sbcs x5, x6, x1 *)
  []; (* 301: sbcs x7, x7, xzr *)
  [`X3`]; (* 302: and x2, x3, #0xffffffff00000001 *)
  [`CF`; `NF`; `ZF`; `VF`; `X2`]; (* 303: sbc x8, x8, x2 *)
  []; (* 304: stp x9, x5, [sp, #64] *)
  []; (* 305: stp x7, x8, [sp, #80] *)
  []; (* 306: ldr q20, [sp, #96] *)
  []; (* 307: ldr q0, [sp, #64] *)
  []; (* 308: rev64 v16.4s, v20.4s *)
  []; (* 309: subs x4, x9, x5 *)
  []; (* 310: csetm x3, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X4`]; (* 311: cneg x13, x4, cc *)
  []; (* 312: mul v16.4s, v16.4s, v0.4s *)
  []; (* 313: umulh x12, x5, x25 *)
  [`Q20`]; (* 314: uzp1 v28.4s, v20.4s, v0.4s *)
  []; (* 315: subs x14, x7, x9 *)
  []; (* 316: ldr q20, [sp, #112] *)
  []; (* 317: sbcs x5, x8, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 318: ngc x17, xzr *)
  [`X7`]; (* 319: subs x8, x7, x8 *)
  [`Q16`]; (* 320: uaddlp v27.2d, v16.4s *)
  [`X9`]; (* 321: umulh x4, x9, x10 *)
  [`Q0`]; (* 322: uzp1 v21.4s, v0.4s, v0.4s *)
  [`X8`]; (* 323: cneg x11, x8, cc *)
  [`Q27`]; (* 324: shl v17.2d, v27.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 325: csetm x15, cc *)
  []; (* 326: subs x9, x25, x10 *)
  [`X14`]; (* 327: eor x7, x14, x17 *)
  [`Q21`; `Q28`]; (* 328: umlal v17.2d, v21.2s, v28.2s *)
  [`X9`]; (* 329: cneg x8, x9, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 330: cinv x9, x3, cc *)
  []; (* 331: cmn x17, #0x1 *)
  []; (* 332: ldr q28, [sp, #80] *)
  [`X7`]; (* 333: adcs x14, x7, xzr *)
  []; (* 334: mul x7, x13, x8 *)
  [`X5`]; (* 335: eor x1, x5, x17 *)
  [`CF`; `NF`; `ZF`; `VF`; `X1`]; (* 336: adcs x5, x1, xzr *)
  []; (* 337: xtn v1.2s, v20.2d *)
  []; (* 338: mov x1, v17.d[0] *)
  [`Q17`]; (* 339: mov x3, v17.d[1] *)
  []; (* 340: uzp2 v16.4s, v20.4s, v20.4s *)
  [`X13`; `X8`]; (* 341: umulh x16, x13, x8 *)
  [`X7`]; (* 342: eor x13, x7, x9 *)
  []; (* 343: adds x8, x1, x3 *)
  []; (* 344: adcs x7, x4, x12 *)
  []; (* 345: xtn v0.2s, v28.2d *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 346: adcs x12, x12, xzr *)
  [`X4`]; (* 347: adds x8, x4, x8 *)
  [`X7`]; (* 348: adcs x3, x3, x7 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 349: adcs x12, x12, xzr *)
  []; (* 350: cmn x9, #0x1 *)
  [`X13`]; (* 351: adcs x8, x8, x13 *)
  [`X16`]; (* 352: eor x13, x16, x9 *)
  [`X13`; `X3`]; (* 353: adcs x16, x3, x13 *)
  []; (* 354: lsl x3, x1, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`; `X9`]; (* 355: adc x13, x12, x9 *)
  [`X10`]; (* 356: subs x12, x10, x26 *)
  [`X25`]; (* 357: sbcs x9, x25, x27 *)
  []; (* 358: lsr x10, x1, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 359: ngc x4, xzr *)
  [`X26`; `X27`]; (* 360: subs x6, x27, x26 *)
  [`X15`]; (* 361: cinv x2, x15, cc *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 362: cneg x6, x6, cc *)
  []; (* 363: subs x7, x1, x3 *)
  []; (* 364: eor x9, x9, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 365: sbc x1, x1, x10 *)
  [`X3`; `X8`]; (* 366: adds x15, x8, x3 *)
  [`X10`; `X16`]; (* 367: adcs x3, x16, x10 *)
  []; (* 368: mul x16, x11, x6 *)
  [`X13`; `X7`]; (* 369: adcs x8, x13, x7 *)
  [`X12`]; (* 370: eor x13, x12, x4 *)
  [`CF`; `NF`; `ZF`; `VF`; `X1`]; (* 371: adc x10, x1, xzr *)
  []; (* 372: cmn x4, #0x1 *)
  [`X11`]; (* 373: umulh x6, x11, x6 *)
  [`X13`]; (* 374: adcs x11, x13, xzr *)
  [`CF`; `NF`; `ZF`; `VF`; `X9`]; (* 375: adcs x1, x9, xzr *)
  []; (* 376: lsl x13, x15, #32 *)
  []; (* 377: subs x12, x15, x13 *)
  []; (* 378: lsr x7, x15, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 379: sbc x15, x15, x7 *)
  [`X13`; `X3`]; (* 380: adds x21, x3, x13 *)
  [`X7`; `X8`]; (* 381: adcs x22, x8, x7 *)
  []; (* 382: umulh x8, x14, x11 *)
  []; (* 383: umull v21.2d, v0.2s, v1.2s *)
  [`X10`; `X12`]; (* 384: adcs x23, x10, x12 *)
  []; (* 385: umull v3.2d, v0.2s, v16.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X15`]; (* 386: adc x24, x15, xzr *)
  [`Q20`]; (* 387: rev64 v24.4s, v20.4s *)
  []; (* 388: movi v2.2d, #0xffffffff *)
  []; (* 389: mul x10, x14, x11 *)
  [`Q24`]; (* 390: mul v4.4s, v24.4s, v28.4s *)
  [`X14`]; (* 391: subs x13, x14, x5 *)
  [`Q28`]; (* 392: uzp2 v19.4s, v28.4s, v28.4s *)
  []; (* 393: csetm x15, cc *)
  [`Q21`]; (* 394: usra v3.2d, v21.2d, #32 *)
  []; (* 395: mul x7, x5, x1 *)
  [`Q16`]; (* 396: umull v21.2d, v19.2s, v16.2s *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 397: cneg x13, x13, cc *)
  [`Q4`]; (* 398: uaddlp v5.2d, v4.4s *)
  []; (* 399: subs x11, x1, x11 *)
  [`Q2`]; (* 400: and v16.16b, v3.16b, v2.16b *)
  [`X1`]; (* 401: umulh x5, x5, x1 *)
  [`Q5`]; (* 402: shl v24.2d, v5.2d, #32 *)
  []; (* 403: cneg x11, x11, cc *)
  [`Q19`]; (* 404: umlal v16.2d, v19.2s, v1.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X15`]; (* 405: cinv x12, x15, cc *)
  [`Q0`; `Q1`]; (* 406: umlal v24.2d, v0.2s, v1.2s *)
  []; (* 407: adds x15, x10, x7 *)
  []; (* 408: mul x14, x13, x11 *)
  [`X6`]; (* 409: eor x1, x6, x2 *)
  []; (* 410: adcs x6, x8, x5 *)
  [`Q3`]; (* 411: usra v21.2d, v3.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 412: adcs x9, x5, xzr *)
  [`X13`]; (* 413: umulh x11, x13, x11 *)
  [`X8`]; (* 414: adds x15, x8, x15 *)
  [`X6`]; (* 415: adcs x7, x7, x6 *)
  [`X14`]; (* 416: eor x8, x14, x12 *)
  [`Q16`]; (* 417: usra v21.2d, v16.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X9`]; (* 418: adcs x13, x9, xzr *)
  []; (* 419: cmn x12, #0x1 *)
  []; (* 420: mov x9, v24.d[1] *)
  [`X15`; `X8`]; (* 421: adcs x14, x15, x8 *)
  [`X11`]; (* 422: eor x6, x11, x12 *)
  [`X7`]; (* 423: adcs x6, x7, x6 *)
  [`Q24`]; (* 424: mov x5, v24.d[0] *)
  []; (* 425: mov x11, v21.d[1] *)
  [`Q21`]; (* 426: mov x7, v21.d[0] *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`; `X13`]; (* 427: adc x3, x13, x12 *)
  []; (* 428: adds x12, x5, x9 *)
  []; (* 429: adcs x13, x7, x11 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 430: adcs x11, x11, xzr *)
  [`X7`]; (* 431: adds x12, x7, x12 *)
  []; (* 432: eor x16, x16, x2 *)
  [`X13`; `X9`]; (* 433: adcs x7, x9, x13 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 434: adcs x11, x11, xzr *)
  []; (* 435: cmn x2, #0x1 *)
  [`X12`]; (* 436: adcs x16, x12, x16 *)
  [`X7`]; (* 437: adcs x1, x7, x1 *)
  [`CF`; `NF`; `ZF`; `VF`; `X11`]; (* 438: adc x2, x11, x2 *)
  [`X21`; `X5`]; (* 439: adds x7, x5, x21 *)
  [`X16`; `X22`]; (* 440: adcs x15, x16, x22 *)
  [`X17`; `X4`]; (* 441: eor x5, x17, x4 *)
  [`X1`; `X23`]; (* 442: adcs x9, x1, x23 *)
  [`X10`]; (* 443: eor x1, x10, x5 *)
  [`X2`; `X24`]; (* 444: adcs x16, x2, x24 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 445: adc x2, xzr, xzr *)
  []; (* 446: cmn x5, #0x1 *)
  [`X14`]; (* 447: eor x13, x14, x5 *)
  [`X1`]; (* 448: adcs x14, x1, x7 *)
  [`X6`]; (* 449: eor x1, x6, x5 *)
  [`X13`]; (* 450: adcs x6, x13, x15 *)
  [`X1`]; (* 451: adcs x10, x1, x9 *)
  [`X3`]; (* 452: eor x4, x3, x5 *)
  []; (* 453: mov x1, #0xffffffff *)
  [`X4`]; (* 454: adcs x8, x4, x16 *)
  []; (* 455: lsr x13, x14, #32 *)
  []; (* 456: adcs x17, x2, x5 *)
  []; (* 457: adcs x11, x5, xzr *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 458: adc x4, x5, xzr *)
  [`X10`; `X7`]; (* 459: adds x12, x10, x7 *)
  [`X15`; `X8`]; (* 460: adcs x7, x8, x15 *)
  [`X17`; `X9`]; (* 461: adcs x5, x17, x9 *)
  [`X11`; `X16`]; (* 462: adcs x9, x11, x16 *)
  []; (* 463: lsl x11, x14, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X2`; `X4`]; (* 464: adc x10, x4, x2 *)
  []; (* 465: subs x17, x14, x11 *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`]; (* 466: sbc x4, x14, x13 *)
  [`X6`]; (* 467: adds x11, x6, x11 *)
  [`X13`]; (* 468: adcs x12, x12, x13 *)
  []; (* 469: lsl x15, x11, #32 *)
  [`X7`]; (* 470: adcs x17, x7, x17 *)
  []; (* 471: lsr x7, x11, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X4`]; (* 472: adc x13, x4, xzr *)
  []; (* 473: subs x4, x11, x15 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 474: sbc x11, x11, x7 *)
  [`X12`; `X15`]; (* 475: adds x8, x12, x15 *)
  [`X17`; `X7`]; (* 476: adcs x15, x17, x7 *)
  [`X13`]; (* 477: adcs x4, x13, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 478: adc x11, x11, xzr *)
  [`X4`; `X5`]; (* 479: adds x7, x5, x4 *)
  [`X11`; `X9`]; (* 480: adcs x17, x9, x11 *)
  [`CF`; `NF`; `ZF`; `VF`; `X10`]; (* 481: adc x13, x10, xzr *)
  []; (* 482: add x12, x13, #0x1 *)
  []; (* 483: neg x11, x12 *)
  []; (* 484: lsl x4, x12, #32 *)
  []; (* 485: adds x17, x17, x4 *)
  []; (* 486: sub x4, x4, #0x1 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 487: adc x13, x13, xzr *)
  [`X8`]; (* 488: subs x11, x8, x11 *)
  [`X15`]; (* 489: sbcs x4, x15, x4 *)
  []; (* 490: sbcs x7, x7, xzr *)
  []; (* 491: sbcs x17, x17, x12 *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`]; (* 492: sbcs x13, x13, x12 *)
  []; (* 493: mov x12, #0xffffffff00000001 *)
  [`X11`]; (* 494: adds x21, x11, x13 *)
  []; (* 495: and x1, x1, x13 *)
  [`X1`; `X4`]; (* 496: adcs x22, x4, x1 *)
  [`X12`; `X13`]; (* 497: and x1, x12, x13 *)
  []; (* 498: stp x21, x22, [sp, #96] *)
  [`X7`]; (* 499: adcs x23, x7, xzr *)
  [`CF`; `NF`; `ZF`; `VF`; `X1`; `X17`]; (* 500: adc x24, x17, x1 *)
  []; (* 501: stp x23, x24, [sp, #112] *)
  []; (* 502: ldp x4, x5, [x20, #32] *)
  []; (* 503: ldp x8, x9, [x20, #64] *)
  [`X8`]; (* 504: adds x4, x4, x8 *)
  [`X9`]; (* 505: adcs x5, x5, x9 *)
  []; (* 506: ldp x6, x7, [x20, #48] *)
  []; (* 507: ldp x10, x11, [x20, #80] *)
  [`X10`]; (* 508: adcs x6, x6, x10 *)
  [`X11`]; (* 509: adcs x7, x7, x11 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 510: adc x3, xzr, xzr *)
  []; (* 511: adds x8, x4, #0x1 *)
  []; (* 512: mov x9, #0xffffffff *)
  []; (* 513: sbcs x9, x5, x9 *)
  []; (* 514: sbcs x10, x6, xzr *)
  []; (* 515: mov x11, #0xffffffff00000001 *)
  []; (* 516: sbcs x11, x7, x11 *)
  [`X3`]; (* 517: sbcs x3, x3, xzr *)
  [`X8`]; (* 518: csel x4, x4, x8, cc *)
  [`X9`]; (* 519: csel x5, x5, x9, cc *)
  [`X10`]; (* 520: csel x6, x6, x10, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X11`]; (* 521: csel x7, x7, x11, cc *)
  [`X4`; `X5`]; (* 522: stp x4, x5, [sp, #64] *)
  [`X6`; `X7`]; (* 523: stp x6, x7, [sp, #80] *)
  []; (* 524: ldr q20, [sp, #32] *)
  []; (* 525: ldp x7, x17, [x20, #0] *)
  []; (* 526: ldr q0, [x20, #0] *)
  []; (* 527: ldp x6, x10, [sp, #32] *)
  []; (* 528: ldp x11, x15, [x20, #16] *)
  []; (* 529: rev64 v16.4s, v20.4s *)
  []; (* 530: subs x4, x7, x17 *)
  []; (* 531: csetm x3, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X4`]; (* 532: cneg x13, x4, cc *)
  []; (* 533: mul v16.4s, v16.4s, v0.4s *)
  []; (* 534: umulh x12, x17, x10 *)
  [`Q20`]; (* 535: uzp1 v28.4s, v20.4s, v0.4s *)
  []; (* 536: subs x14, x11, x7 *)
  []; (* 537: ldr q20, [sp, #48] *)
  [`X17`]; (* 538: sbcs x5, x15, x17 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 539: ngc x17, xzr *)
  [`X11`; `X15`]; (* 540: subs x8, x11, x15 *)
  [`Q16`]; (* 541: uaddlp v27.2d, v16.4s *)
  [`X7`]; (* 542: umulh x4, x7, x6 *)
  [`Q0`]; (* 543: uzp1 v21.4s, v0.4s, v0.4s *)
  [`X8`]; (* 544: cneg x11, x8, cc *)
  [`Q27`]; (* 545: shl v17.2d, v27.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 546: csetm x15, cc *)
  []; (* 547: subs x9, x10, x6 *)
  [`X14`]; (* 548: eor x7, x14, x17 *)
  [`Q21`; `Q28`]; (* 549: umlal v17.2d, v21.2s, v28.2s *)
  [`X9`]; (* 550: cneg x8, x9, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 551: cinv x9, x3, cc *)
  []; (* 552: cmn x17, #0x1 *)
  [`X20`]; (* 553: ldr q28, [x20, #16] *)
  [`X7`]; (* 554: adcs x14, x7, xzr *)
  []; (* 555: mul x7, x13, x8 *)
  [`X5`]; (* 556: eor x1, x5, x17 *)
  [`CF`; `NF`; `ZF`; `VF`; `X1`]; (* 557: adcs x5, x1, xzr *)
  []; (* 558: xtn v1.2s, v20.2d *)
  []; (* 559: mov x1, v17.d[0] *)
  [`Q17`]; (* 560: mov x3, v17.d[1] *)
  []; (* 561: uzp2 v16.4s, v20.4s, v20.4s *)
  [`X13`; `X8`]; (* 562: umulh x16, x13, x8 *)
  [`X7`]; (* 563: eor x13, x7, x9 *)
  []; (* 564: adds x8, x1, x3 *)
  []; (* 565: adcs x7, x4, x12 *)
  []; (* 566: xtn v0.2s, v28.2d *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 567: adcs x12, x12, xzr *)
  [`X4`]; (* 568: adds x8, x4, x8 *)
  [`X7`]; (* 569: adcs x3, x3, x7 *)
  []; (* 570: ldp x7, x2, [sp, #48] *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 571: adcs x12, x12, xzr *)
  []; (* 572: cmn x9, #0x1 *)
  [`X13`]; (* 573: adcs x8, x8, x13 *)
  [`X16`]; (* 574: eor x13, x16, x9 *)
  [`X13`; `X3`]; (* 575: adcs x16, x3, x13 *)
  []; (* 576: lsl x3, x1, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`; `X9`]; (* 577: adc x13, x12, x9 *)
  [`X6`]; (* 578: subs x12, x6, x7 *)
  [`X10`]; (* 579: sbcs x9, x10, x2 *)
  []; (* 580: lsr x10, x1, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 581: ngc x4, xzr *)
  [`X2`; `X7`]; (* 582: subs x6, x2, x7 *)
  [`X15`]; (* 583: cinv x2, x15, cc *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 584: cneg x6, x6, cc *)
  []; (* 585: subs x7, x1, x3 *)
  []; (* 586: eor x9, x9, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 587: sbc x1, x1, x10 *)
  [`X3`; `X8`]; (* 588: adds x15, x8, x3 *)
  [`X10`; `X16`]; (* 589: adcs x3, x16, x10 *)
  []; (* 590: mul x16, x11, x6 *)
  [`X13`; `X7`]; (* 591: adcs x8, x13, x7 *)
  [`X12`]; (* 592: eor x13, x12, x4 *)
  [`CF`; `NF`; `ZF`; `VF`; `X1`]; (* 593: adc x10, x1, xzr *)
  []; (* 594: cmn x4, #0x1 *)
  [`X11`]; (* 595: umulh x6, x11, x6 *)
  [`X13`]; (* 596: adcs x11, x13, xzr *)
  [`CF`; `NF`; `ZF`; `VF`; `X9`]; (* 597: adcs x1, x9, xzr *)
  []; (* 598: lsl x13, x15, #32 *)
  []; (* 599: subs x12, x15, x13 *)
  []; (* 600: lsr x7, x15, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 601: sbc x15, x15, x7 *)
  [`X13`; `X3`]; (* 602: adds x20, x3, x13 *)
  [`X7`; `X8`]; (* 603: adcs x25, x8, x7 *)
  []; (* 604: umulh x8, x14, x11 *)
  []; (* 605: umull v21.2d, v0.2s, v1.2s *)
  [`X10`; `X12`]; (* 606: adcs x26, x10, x12 *)
  []; (* 607: umull v3.2d, v0.2s, v16.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X15`]; (* 608: adc x27, x15, xzr *)
  [`Q20`]; (* 609: rev64 v24.4s, v20.4s *)
  []; (* 610: movi v2.2d, #0xffffffff *)
  []; (* 611: mul x10, x14, x11 *)
  [`Q24`]; (* 612: mul v4.4s, v24.4s, v28.4s *)
  [`X14`]; (* 613: subs x13, x14, x5 *)
  [`Q28`]; (* 614: uzp2 v19.4s, v28.4s, v28.4s *)
  []; (* 615: csetm x15, cc *)
  [`Q21`]; (* 616: usra v3.2d, v21.2d, #32 *)
  []; (* 617: mul x7, x5, x1 *)
  [`Q16`]; (* 618: umull v21.2d, v19.2s, v16.2s *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 619: cneg x13, x13, cc *)
  [`Q4`]; (* 620: uaddlp v5.2d, v4.4s *)
  []; (* 621: subs x11, x1, x11 *)
  [`Q2`]; (* 622: and v16.16b, v3.16b, v2.16b *)
  [`X1`]; (* 623: umulh x5, x5, x1 *)
  [`Q5`]; (* 624: shl v24.2d, v5.2d, #32 *)
  []; (* 625: cneg x11, x11, cc *)
  [`Q19`]; (* 626: umlal v16.2d, v19.2s, v1.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X15`]; (* 627: cinv x12, x15, cc *)
  [`Q0`; `Q1`]; (* 628: umlal v24.2d, v0.2s, v1.2s *)
  []; (* 629: adds x15, x10, x7 *)
  []; (* 630: mul x14, x13, x11 *)
  [`X6`]; (* 631: eor x1, x6, x2 *)
  []; (* 632: adcs x6, x8, x5 *)
  [`Q3`]; (* 633: usra v21.2d, v3.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 634: adcs x9, x5, xzr *)
  [`X13`]; (* 635: umulh x11, x13, x11 *)
  [`X8`]; (* 636: adds x15, x8, x15 *)
  [`X6`]; (* 637: adcs x7, x7, x6 *)
  [`X14`]; (* 638: eor x8, x14, x12 *)
  [`Q16`]; (* 639: usra v21.2d, v16.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X9`]; (* 640: adcs x13, x9, xzr *)
  []; (* 641: cmn x12, #0x1 *)
  []; (* 642: mov x9, v24.d[1] *)
  [`X15`; `X8`]; (* 643: adcs x14, x15, x8 *)
  [`X11`]; (* 644: eor x6, x11, x12 *)
  [`X7`]; (* 645: adcs x6, x7, x6 *)
  [`Q24`]; (* 646: mov x5, v24.d[0] *)
  []; (* 647: mov x11, v21.d[1] *)
  [`Q21`]; (* 648: mov x7, v21.d[0] *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`; `X13`]; (* 649: adc x3, x13, x12 *)
  []; (* 650: adds x12, x5, x9 *)
  []; (* 651: adcs x13, x7, x11 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 652: adcs x11, x11, xzr *)
  [`X7`]; (* 653: adds x12, x7, x12 *)
  []; (* 654: eor x16, x16, x2 *)
  [`X13`; `X9`]; (* 655: adcs x7, x9, x13 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 656: adcs x11, x11, xzr *)
  []; (* 657: cmn x2, #0x1 *)
  [`X12`]; (* 658: adcs x16, x12, x16 *)
  [`X7`]; (* 659: adcs x1, x7, x1 *)
  [`CF`; `NF`; `ZF`; `VF`; `X11`]; (* 660: adc x2, x11, x2 *)
  [`X20`; `X5`]; (* 661: adds x7, x5, x20 *)
  [`X16`; `X25`]; (* 662: adcs x15, x16, x25 *)
  [`X17`; `X4`]; (* 663: eor x5, x17, x4 *)
  [`X1`; `X26`]; (* 664: adcs x9, x1, x26 *)
  [`X10`]; (* 665: eor x1, x10, x5 *)
  [`X2`; `X27`]; (* 666: adcs x16, x2, x27 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 667: adc x2, xzr, xzr *)
  []; (* 668: cmn x5, #0x1 *)
  [`X14`]; (* 669: eor x13, x14, x5 *)
  [`X1`]; (* 670: adcs x14, x1, x7 *)
  [`X6`]; (* 671: eor x1, x6, x5 *)
  [`X13`]; (* 672: adcs x6, x13, x15 *)
  [`X1`]; (* 673: adcs x10, x1, x9 *)
  [`X3`]; (* 674: eor x4, x3, x5 *)
  []; (* 675: mov x1, #0xffffffff *)
  [`X4`]; (* 676: adcs x8, x4, x16 *)
  []; (* 677: lsr x13, x14, #32 *)
  []; (* 678: adcs x17, x2, x5 *)
  []; (* 679: adcs x11, x5, xzr *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 680: adc x4, x5, xzr *)
  [`X10`; `X7`]; (* 681: adds x12, x10, x7 *)
  [`X15`; `X8`]; (* 682: adcs x7, x8, x15 *)
  [`X17`; `X9`]; (* 683: adcs x5, x17, x9 *)
  [`X11`; `X16`]; (* 684: adcs x9, x11, x16 *)
  []; (* 685: lsl x11, x14, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X2`; `X4`]; (* 686: adc x10, x4, x2 *)
  []; (* 687: subs x17, x14, x11 *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`]; (* 688: sbc x4, x14, x13 *)
  [`X6`]; (* 689: adds x11, x6, x11 *)
  [`X13`]; (* 690: adcs x12, x12, x13 *)
  []; (* 691: lsl x15, x11, #32 *)
  [`X7`]; (* 692: adcs x17, x7, x17 *)
  []; (* 693: lsr x7, x11, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X4`]; (* 694: adc x13, x4, xzr *)
  []; (* 695: subs x4, x11, x15 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 696: sbc x11, x11, x7 *)
  [`X12`; `X15`]; (* 697: adds x8, x12, x15 *)
  [`X17`; `X7`]; (* 698: adcs x15, x17, x7 *)
  [`X13`]; (* 699: adcs x4, x13, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 700: adc x11, x11, xzr *)
  [`X4`; `X5`]; (* 701: adds x7, x5, x4 *)
  [`X11`; `X9`]; (* 702: adcs x17, x9, x11 *)
  [`CF`; `NF`; `ZF`; `VF`; `X10`]; (* 703: adc x13, x10, xzr *)
  []; (* 704: add x12, x13, #0x1 *)
  []; (* 705: neg x11, x12 *)
  []; (* 706: lsl x4, x12, #32 *)
  []; (* 707: adds x17, x17, x4 *)
  []; (* 708: sub x4, x4, #0x1 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 709: adc x13, x13, xzr *)
  [`X8`]; (* 710: subs x11, x8, x11 *)
  [`X15`]; (* 711: sbcs x4, x15, x4 *)
  []; (* 712: sbcs x7, x7, xzr *)
  []; (* 713: sbcs x17, x17, x12 *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`]; (* 714: sbcs x13, x13, x12 *)
  []; (* 715: mov x12, #0xffffffff00000001 *)
  [`X11`]; (* 716: adds x20, x11, x13 *)
  []; (* 717: and x1, x1, x13 *)
  [`X1`; `X4`]; (* 718: adcs x25, x4, x1 *)
  [`X12`; `X13`]; (* 719: and x1, x12, x13 *)
  []; (* 720: stp x20, x25, [sp, #128] *)
  [`X7`]; (* 721: adcs x4, x7, xzr *)
  [`CF`; `NF`; `ZF`; `VF`; `X17`]; (* 722: adc x1, x17, x1 *)
  [`X1`; `X4`]; (* 723: stp x4, x1, [sp, #144] *)
  []; (* 724: ldr q19, [sp, #96] *)
  []; (* 725: ldr q23, [sp, #112] *)
  []; (* 726: ldr q0, [sp, #96] *)
  []; (* 727: uzp2 v29.4s, v19.4s, v19.4s *)
  []; (* 728: xtn v4.2s, v19.2d *)
  []; (* 729: umulh x8, x21, x22 *)
  []; (* 730: rev64 v20.4s, v23.4s *)
  []; (* 731: umull v16.2d, v19.2s, v19.2s *)
  [`Q29`; `Q4`]; (* 732: umull v1.2d, v29.2s, v4.2s *)
  []; (* 733: mul v20.4s, v20.4s, v0.4s *)
  []; (* 734: subs x14, x21, x22 *)
  []; (* 735: umulh x15, x21, x23 *)
  []; (* 736: mov x16, v16.d[1] *)
  [`Q19`]; (* 737: umull2 v4.2d, v19.4s, v19.4s *)
  [`Q16`]; (* 738: mov x4, v16.d[0] *)
  [`Q23`]; (* 739: uzp1 v17.4s, v23.4s, v0.4s *)
  [`Q20`]; (* 740: uaddlp v19.2d, v20.4s *)
  []; (* 741: lsr x7, x8, #63 *)
  [`X21`]; (* 742: mul x11, x21, x22 *)
  []; (* 743: mov x12, v1.d[0] *)
  []; (* 744: csetm x5, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`]; (* 745: cneg x6, x14, cc *)
  []; (* 746: mov x3, v4.d[1] *)
  [`Q4`]; (* 747: mov x14, v4.d[0] *)
  []; (* 748: subs x2, x24, x23 *)
  [`Q1`]; (* 749: mov x9, v1.d[1] *)
  [`X2`]; (* 750: cneg x17, x2, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 751: cinv x2, x5, cc *)
  [`X4`]; (* 752: adds x5, x4, x12, lsl #33 *)
  [`X8`]; (* 753: extr x4, x8, x11, #63 *)
  [`X12`]; (* 754: lsr x8, x12, #31 *)
  [`Q0`]; (* 755: uzp1 v20.4s, v0.4s, v0.4s *)
  []; (* 756: shl v19.2d, v19.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X8`]; (* 757: adc x16, x16, x8 *)
  [`X14`]; (* 758: adds x8, x14, x9, lsl #33 *)
  [`X9`]; (* 759: lsr x14, x9, #31 *)
  []; (* 760: lsl x9, x5, #32 *)
  [`Q17`; `Q20`]; (* 761: umlal v19.2d, v20.2s, v17.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 762: adc x14, x3, x14 *)
  [`X11`]; (* 763: adds x16, x16, x11, lsl #1 *)
  []; (* 764: lsr x3, x5, #32 *)
  []; (* 765: umulh x12, x6, x17 *)
  [`X8`]; (* 766: adcs x4, x8, x4 *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`; `X7`]; (* 767: adc x11, x14, x7 *)
  []; (* 768: subs x8, x5, x9 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 769: sbc x5, x5, x3 *)
  [`X9`]; (* 770: adds x16, x16, x9 *)
  []; (* 771: mov x14, v19.d[0] *)
  [`X6`]; (* 772: mul x17, x6, x17 *)
  [`X4`]; (* 773: adcs x3, x4, x3 *)
  []; (* 774: lsl x7, x16, #32 *)
  [`X22`]; (* 775: umulh x13, x22, x24 *)
  [`X8`]; (* 776: adcs x11, x11, x8 *)
  []; (* 777: lsr x8, x16, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 778: adc x5, x5, xzr *)
  []; (* 779: subs x9, x16, x7 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 780: sbc x16, x16, x8 *)
  [`X3`]; (* 781: adds x7, x3, x7 *)
  [`Q19`]; (* 782: mov x3, v19.d[1] *)
  [`X11`; `X8`]; (* 783: adcs x6, x11, x8 *)
  []; (* 784: umulh x11, x23, x24 *)
  [`X9`]; (* 785: adcs x5, x5, x9 *)
  [`X12`]; (* 786: eor x8, x12, x2 *)
  [`CF`; `NF`; `ZF`; `VF`; `X16`]; (* 787: adc x9, x16, xzr *)
  []; (* 788: adds x16, x14, x15 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 789: adc x15, x15, xzr *)
  [`X16`]; (* 790: adds x12, x16, x3 *)
  [`X17`]; (* 791: eor x16, x17, x2 *)
  []; (* 792: mul x4, x23, x24 *)
  []; (* 793: adcs x15, x15, x13 *)
  [`CF`; `NF`; `ZF`; `VF`; `X13`]; (* 794: adc x17, x13, xzr *)
  [`X3`]; (* 795: adds x15, x15, x3 *)
  [`CF`; `NF`; `ZF`; `VF`; `X17`]; (* 796: adc x3, x17, xzr *)
  []; (* 797: cmn x2, #0x1 *)
  []; (* 798: mul x17, x24, x24 *)
  [`X16`]; (* 799: adcs x12, x12, x16 *)
  [`X15`; `X8`]; (* 800: adcs x16, x15, x8 *)
  [`X24`]; (* 801: umulh x10, x24, x24 *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 802: adc x2, x3, x2 *)
  []; (* 803: adds x14, x14, x14 *)
  []; (* 804: adcs x12, x12, x12 *)
  []; (* 805: adcs x16, x16, x16 *)
  []; (* 806: adcs x2, x2, x2 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 807: adc x15, xzr, xzr *)
  [`X7`]; (* 808: adds x14, x14, x7 *)
  []; (* 809: mul x3, x23, x23 *)
  [`X6`]; (* 810: adcs x12, x12, x6 *)
  []; (* 811: lsr x7, x14, #32 *)
  [`X5`]; (* 812: adcs x16, x16, x5 *)
  []; (* 813: lsl x5, x14, #32 *)
  [`X23`]; (* 814: umulh x13, x23, x23 *)
  [`X9`]; (* 815: adcs x2, x2, x9 *)
  []; (* 816: mov x6, #0xffffffff *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 817: adc x15, x15, xzr *)
  [`X4`]; (* 818: adds x8, x4, x4 *)
  [`X11`]; (* 819: adcs x1, x11, x11 *)
  []; (* 820: mov x11, #0xffffffff00000001 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 821: adc x4, xzr, xzr *)
  []; (* 822: subs x9, x14, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 823: sbc x14, x14, x7 *)
  [`X5`]; (* 824: adds x12, x12, x5 *)
  [`X7`]; (* 825: adcs x16, x16, x7 *)
  []; (* 826: lsl x5, x12, #32 *)
  []; (* 827: lsr x7, x12, #32 *)
  [`X9`]; (* 828: adcs x2, x2, x9 *)
  [`X15`]; (* 829: adcs x14, x15, x14 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 830: adc x15, xzr, xzr *)
  []; (* 831: subs x9, x12, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 832: sbc x12, x12, x7 *)
  [`X5`]; (* 833: adds x16, x16, x5 *)
  [`X7`]; (* 834: adcs x2, x2, x7 *)
  [`X9`]; (* 835: adcs x14, x14, x9 *)
  [`X15`]; (* 836: adcs x12, x15, x12 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 837: adc x15, xzr, xzr *)
  [`X3`]; (* 838: adds x16, x16, x3 *)
  [`X13`]; (* 839: adcs x2, x2, x13 *)
  [`X17`]; (* 840: adcs x14, x14, x17 *)
  [`X10`]; (* 841: adcs x12, x12, x10 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 842: adc x15, x15, xzr *)
  [`X8`]; (* 843: adds x2, x2, x8 *)
  [`X1`]; (* 844: adcs x14, x14, x1 *)
  [`X4`]; (* 845: adcs x12, x12, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 846: adcs x15, x15, xzr *)
  []; (* 847: adds x3, x16, #0x1 *)
  [`X6`]; (* 848: sbcs x5, x2, x6 *)
  []; (* 849: sbcs x8, x14, xzr *)
  []; (* 850: sbcs x11, x12, x11 *)
  [`X15`]; (* 851: sbcs xzr, x15, xzr *)
  [`X16`; `X3`]; (* 852: csel x21, x3, x16, cs *)
  [`X14`; `X8`]; (* 853: csel x22, x8, x14, cs *)
  [`X11`; `X12`]; (* 854: csel x23, x11, x12, cs *)
  [`CF`; `NF`; `ZF`; `VF`; `X2`; `X5`]; (* 855: csel x24, x5, x2, cs *)
  []; (* 856: ldr q19, [sp, #64] *)
  []; (* 857: ldp x9, x13, [sp, #64] *)
  []; (* 858: ldr q23, [sp, #80] *)
  []; (* 859: ldr q0, [sp, #64] *)
  []; (* 860: ldp x1, x10, [sp, #80] *)
  []; (* 861: uzp2 v29.4s, v19.4s, v19.4s *)
  []; (* 862: xtn v4.2s, v19.2d *)
  []; (* 863: umulh x8, x9, x13 *)
  []; (* 864: rev64 v20.4s, v23.4s *)
  []; (* 865: umull v16.2d, v19.2s, v19.2s *)
  [`Q29`; `Q4`]; (* 866: umull v1.2d, v29.2s, v4.2s *)
  []; (* 867: mul v20.4s, v20.4s, v0.4s *)
  []; (* 868: subs x14, x9, x13 *)
  []; (* 869: umulh x15, x9, x1 *)
  []; (* 870: mov x16, v16.d[1] *)
  [`Q19`]; (* 871: umull2 v4.2d, v19.4s, v19.4s *)
  [`Q16`]; (* 872: mov x4, v16.d[0] *)
  [`Q23`]; (* 873: uzp1 v17.4s, v23.4s, v0.4s *)
  [`Q20`]; (* 874: uaddlp v19.2d, v20.4s *)
  []; (* 875: lsr x7, x8, #63 *)
  [`X9`]; (* 876: mul x11, x9, x13 *)
  []; (* 877: mov x12, v1.d[0] *)
  []; (* 878: csetm x5, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`]; (* 879: cneg x6, x14, cc *)
  []; (* 880: mov x3, v4.d[1] *)
  [`Q4`]; (* 881: mov x14, v4.d[0] *)
  []; (* 882: subs x2, x10, x1 *)
  [`Q1`]; (* 883: mov x9, v1.d[1] *)
  [`X2`]; (* 884: cneg x17, x2, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 885: cinv x2, x5, cc *)
  [`X4`]; (* 886: adds x5, x4, x12, lsl #33 *)
  [`X8`]; (* 887: extr x4, x8, x11, #63 *)
  [`X12`]; (* 888: lsr x8, x12, #31 *)
  [`Q0`]; (* 889: uzp1 v20.4s, v0.4s, v0.4s *)
  []; (* 890: shl v19.2d, v19.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X8`]; (* 891: adc x16, x16, x8 *)
  [`X14`]; (* 892: adds x8, x14, x9, lsl #33 *)
  [`X9`]; (* 893: lsr x14, x9, #31 *)
  []; (* 894: lsl x9, x5, #32 *)
  [`Q17`; `Q20`]; (* 895: umlal v19.2d, v20.2s, v17.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 896: adc x14, x3, x14 *)
  [`X11`]; (* 897: adds x16, x16, x11, lsl #1 *)
  []; (* 898: lsr x3, x5, #32 *)
  []; (* 899: umulh x12, x6, x17 *)
  [`X8`]; (* 900: adcs x4, x8, x4 *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`; `X7`]; (* 901: adc x11, x14, x7 *)
  []; (* 902: subs x8, x5, x9 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 903: sbc x5, x5, x3 *)
  [`X9`]; (* 904: adds x16, x16, x9 *)
  []; (* 905: mov x14, v19.d[0] *)
  [`X6`]; (* 906: mul x17, x6, x17 *)
  [`X4`]; (* 907: adcs x3, x4, x3 *)
  []; (* 908: lsl x7, x16, #32 *)
  []; (* 909: umulh x13, x13, x10 *)
  [`X8`]; (* 910: adcs x11, x11, x8 *)
  []; (* 911: lsr x8, x16, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 912: adc x5, x5, xzr *)
  []; (* 913: subs x9, x16, x7 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 914: sbc x16, x16, x8 *)
  [`X3`]; (* 915: adds x7, x3, x7 *)
  [`Q19`]; (* 916: mov x3, v19.d[1] *)
  [`X11`; `X8`]; (* 917: adcs x6, x11, x8 *)
  []; (* 918: umulh x11, x1, x10 *)
  [`X9`]; (* 919: adcs x5, x5, x9 *)
  [`X12`]; (* 920: eor x8, x12, x2 *)
  [`CF`; `NF`; `ZF`; `VF`; `X16`]; (* 921: adc x9, x16, xzr *)
  []; (* 922: adds x16, x14, x15 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 923: adc x15, x15, xzr *)
  [`X16`]; (* 924: adds x12, x16, x3 *)
  [`X17`]; (* 925: eor x16, x17, x2 *)
  []; (* 926: mul x4, x1, x10 *)
  []; (* 927: adcs x15, x15, x13 *)
  [`CF`; `NF`; `ZF`; `VF`; `X13`]; (* 928: adc x17, x13, xzr *)
  [`X3`]; (* 929: adds x15, x15, x3 *)
  [`CF`; `NF`; `ZF`; `VF`; `X17`]; (* 930: adc x3, x17, xzr *)
  []; (* 931: cmn x2, #0x1 *)
  []; (* 932: mul x17, x10, x10 *)
  [`X16`]; (* 933: adcs x12, x12, x16 *)
  [`X15`; `X8`]; (* 934: adcs x16, x15, x8 *)
  []; (* 935: umulh x10, x10, x10 *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 936: adc x2, x3, x2 *)
  []; (* 937: adds x14, x14, x14 *)
  []; (* 938: adcs x12, x12, x12 *)
  []; (* 939: adcs x16, x16, x16 *)
  []; (* 940: adcs x2, x2, x2 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 941: adc x15, xzr, xzr *)
  [`X7`]; (* 942: adds x14, x14, x7 *)
  []; (* 943: mul x3, x1, x1 *)
  [`X6`]; (* 944: adcs x12, x12, x6 *)
  []; (* 945: lsr x7, x14, #32 *)
  [`X5`]; (* 946: adcs x16, x16, x5 *)
  []; (* 947: lsl x5, x14, #32 *)
  [`X1`]; (* 948: umulh x13, x1, x1 *)
  [`X9`]; (* 949: adcs x2, x2, x9 *)
  []; (* 950: mov x6, #0xffffffff *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 951: adc x15, x15, xzr *)
  [`X4`]; (* 952: adds x8, x4, x4 *)
  [`X11`]; (* 953: adcs x1, x11, x11 *)
  []; (* 954: mov x11, #0xffffffff00000001 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 955: adc x4, xzr, xzr *)
  []; (* 956: subs x9, x14, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 957: sbc x14, x14, x7 *)
  [`X5`]; (* 958: adds x12, x12, x5 *)
  [`X7`]; (* 959: adcs x16, x16, x7 *)
  []; (* 960: lsl x5, x12, #32 *)
  []; (* 961: lsr x7, x12, #32 *)
  [`X9`]; (* 962: adcs x2, x2, x9 *)
  [`X15`]; (* 963: adcs x14, x15, x14 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 964: adc x15, xzr, xzr *)
  []; (* 965: subs x9, x12, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 966: sbc x12, x12, x7 *)
  [`X5`]; (* 967: adds x16, x16, x5 *)
  [`X7`]; (* 968: adcs x2, x2, x7 *)
  [`X9`]; (* 969: adcs x14, x14, x9 *)
  [`X15`]; (* 970: adcs x12, x15, x12 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 971: adc x15, xzr, xzr *)
  [`X3`]; (* 972: adds x16, x16, x3 *)
  [`X13`]; (* 973: adcs x2, x2, x13 *)
  [`X17`]; (* 974: adcs x14, x14, x17 *)
  [`X10`]; (* 975: adcs x12, x12, x10 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 976: adc x15, x15, xzr *)
  [`X8`]; (* 977: adds x2, x2, x8 *)
  [`X1`]; (* 978: adcs x14, x14, x1 *)
  [`X4`]; (* 979: adcs x12, x12, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 980: adcs x15, x15, xzr *)
  []; (* 981: adds x3, x16, #0x1 *)
  [`X6`]; (* 982: sbcs x5, x2, x6 *)
  []; (* 983: sbcs x8, x14, xzr *)
  []; (* 984: sbcs x11, x12, x11 *)
  [`X15`]; (* 985: sbcs xzr, x15, xzr *)
  [`X16`; `X3`]; (* 986: csel x13, x3, x16, cs *)
  [`X8`]; (* 987: csel x14, x8, x14, cs *)
  [`X11`; `X12`]; (* 988: csel x15, x11, x12, cs *)
  [`CF`; `NF`; `ZF`; `VF`; `X2`; `X5`]; (* 989: csel x26, x5, x2, cs *)
  []; (* 990: mov x1, #0x9 *)
  []; (* 991: mov x2, #0xffffffffffffffff *)
  [`X2`; `X21`]; (* 992: subs x9, x2, x21 *)
  []; (* 993: mov x2, #0xffffffff *)
  [`X2`; `X24`]; (* 994: sbcs x10, x2, x24 *)
  [`X22`]; (* 995: ngcs x11, x22 *)
  []; (* 996: mov x2, #0xffffffff00000001 *)
  [`CF`; `NF`; `ZF`; `VF`; `X2`; `X23`]; (* 997: sbc x12, x2, x23 *)
  []; (* 998: mul x3, x1, x9 *)
  []; (* 999: mul x4, x1, x10 *)
  []; (* 1000: mul x5, x1, x11 *)
  []; (* 1001: mul x6, x1, x12 *)
  []; (* 1002: umulh x9, x1, x9 *)
  []; (* 1003: umulh x10, x1, x10 *)
  []; (* 1004: umulh x11, x1, x11 *)
  [`X1`; `X12`]; (* 1005: umulh x7, x1, x12 *)
  [`X9`]; (* 1006: adds x4, x4, x9 *)
  [`X10`]; (* 1007: adcs x5, x5, x10 *)
  [`X11`]; (* 1008: adcs x6, x6, x11 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1009: adc x7, x7, xzr *)
  []; (* 1010: mov x1, #0xc *)
  []; (* 1011: mul x8, x20, x1 *)
  [`X20`]; (* 1012: umulh x9, x20, x1 *)
  [`X8`]; (* 1013: adds x3, x3, x8 *)
  []; (* 1014: mul x8, x25, x1 *)
  [`X25`]; (* 1015: umulh x10, x25, x1 *)
  [`X8`]; (* 1016: adcs x4, x4, x8 *)
  []; (* 1017: ldp x11, x12, [sp, #144] *)
  []; (* 1018: mul x8, x11, x1 *)
  []; (* 1019: umulh x11, x11, x1 *)
  [`X8`]; (* 1020: adcs x5, x5, x8 *)
  []; (* 1021: mul x8, x12, x1 *)
  [`X1`]; (* 1022: umulh x12, x12, x1 *)
  [`X8`]; (* 1023: adcs x6, x6, x8 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1024: adc x7, x7, xzr *)
  [`X9`]; (* 1025: adds x4, x4, x9 *)
  [`X10`]; (* 1026: adcs x5, x5, x10 *)
  [`X11`]; (* 1027: adcs x6, x6, x11 *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`]; (* 1028: adc x7, x7, x12 *)
  []; (* 1029: add x8, x7, #0x1 *)
  []; (* 1030: lsl x10, x8, #32 *)
  []; (* 1031: adds x6, x6, x10 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1032: adc x7, x7, xzr *)
  []; (* 1033: neg x9, x8 *)
  []; (* 1034: sub x10, x10, #0x1 *)
  [`X9`]; (* 1035: subs x3, x3, x9 *)
  [`X10`]; (* 1036: sbcs x4, x4, x10 *)
  []; (* 1037: sbcs x5, x5, xzr *)
  []; (* 1038: sbcs x6, x6, x8 *)
  [`CF`; `NF`; `ZF`; `VF`; `X7`]; (* 1039: sbc x8, x7, x8 *)
  [`X3`]; (* 1040: adds x20, x3, x8 *)
  [`X8`]; (* 1041: and x9, x8, #0xffffffff *)
  [`X4`]; (* 1042: adcs x21, x4, x9 *)
  [`X5`]; (* 1043: adcs x22, x5, xzr *)
  [`X9`]; (* 1044: neg x10, x9 *)
  [`CF`; `NF`; `ZF`; `VF`; `X10`; `X6`]; (* 1045: adc x23, x6, x10 *)
  []; (* 1046: stp x20, x21, [sp, #160] *)
  []; (* 1047: stp x22, x23, [sp, #176] *)
  []; (* 1048: mov x2, sp *)
  []; (* 1049: ldp x4, x3, [x2] *)
  [`X13`; `X4`]; (* 1050: subs x5, x13, x4 *)
  [`X26`; `X3`]; (* 1051: sbcs x6, x26, x3 *)
  [`X2`]; (* 1052: ldp x4, x3, [x2, #16] *)
  [`X14`; `X4`]; (* 1053: sbcs x7, x14, x4 *)
  [`X15`; `X3`]; (* 1054: sbcs x8, x15, x3 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1055: csetm x3, cc *)
  []; (* 1056: adds x5, x5, x3 *)
  []; (* 1057: and x4, x3, #0xffffffff *)
  [`X4`]; (* 1058: adcs x6, x6, x4 *)
  []; (* 1059: adcs x7, x7, xzr *)
  [`X3`]; (* 1060: and x4, x3, #0xffffffff00000001 *)
  [`CF`; `NF`; `ZF`; `VF`; `X4`]; (* 1061: adc x8, x8, x4 *)
  [`X5`; `X6`]; (* 1062: stp x5, x6, [sp, #64] *)
  [`X7`; `X8`]; (* 1063: stp x7, x8, [sp, #80] *)
  []; (* 1064: mov x0, sp *)
  []; (* 1065: ldr q19, [sp, #32] *)
  []; (* 1066: ldp x9, x13, [sp, #32] *)
  []; (* 1067: ldr q23, [sp, #48] *)
  []; (* 1068: ldr q0, [sp, #32] *)
  []; (* 1069: ldp x1, x10, [sp, #48] *)
  []; (* 1070: uzp2 v29.4s, v19.4s, v19.4s *)
  []; (* 1071: xtn v4.2s, v19.2d *)
  []; (* 1072: umulh x8, x9, x13 *)
  []; (* 1073: rev64 v20.4s, v23.4s *)
  []; (* 1074: umull v16.2d, v19.2s, v19.2s *)
  [`Q29`; `Q4`]; (* 1075: umull v1.2d, v29.2s, v4.2s *)
  []; (* 1076: mul v20.4s, v20.4s, v0.4s *)
  []; (* 1077: subs x14, x9, x13 *)
  []; (* 1078: umulh x15, x9, x1 *)
  []; (* 1079: mov x16, v16.d[1] *)
  [`Q19`]; (* 1080: umull2 v4.2d, v19.4s, v19.4s *)
  [`Q16`]; (* 1081: mov x4, v16.d[0] *)
  [`Q23`]; (* 1082: uzp1 v17.4s, v23.4s, v0.4s *)
  [`Q20`]; (* 1083: uaddlp v19.2d, v20.4s *)
  []; (* 1084: lsr x7, x8, #63 *)
  [`X9`]; (* 1085: mul x11, x9, x13 *)
  []; (* 1086: mov x12, v1.d[0] *)
  []; (* 1087: csetm x5, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`]; (* 1088: cneg x6, x14, cc *)
  []; (* 1089: mov x3, v4.d[1] *)
  [`Q4`]; (* 1090: mov x14, v4.d[0] *)
  []; (* 1091: subs x2, x10, x1 *)
  [`Q1`]; (* 1092: mov x9, v1.d[1] *)
  [`X2`]; (* 1093: cneg x17, x2, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 1094: cinv x2, x5, cc *)
  [`X4`]; (* 1095: adds x5, x4, x12, lsl #33 *)
  [`X8`]; (* 1096: extr x4, x8, x11, #63 *)
  [`X12`]; (* 1097: lsr x8, x12, #31 *)
  [`Q0`]; (* 1098: uzp1 v20.4s, v0.4s, v0.4s *)
  []; (* 1099: shl v19.2d, v19.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X8`]; (* 1100: adc x16, x16, x8 *)
  [`X14`]; (* 1101: adds x8, x14, x9, lsl #33 *)
  [`X9`]; (* 1102: lsr x14, x9, #31 *)
  []; (* 1103: lsl x9, x5, #32 *)
  [`Q17`; `Q20`]; (* 1104: umlal v19.2d, v20.2s, v17.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 1105: adc x14, x3, x14 *)
  [`X11`]; (* 1106: adds x16, x16, x11, lsl #1 *)
  []; (* 1107: lsr x3, x5, #32 *)
  []; (* 1108: umulh x12, x6, x17 *)
  [`X8`]; (* 1109: adcs x4, x8, x4 *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`; `X7`]; (* 1110: adc x11, x14, x7 *)
  []; (* 1111: subs x8, x5, x9 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1112: sbc x5, x5, x3 *)
  [`X9`]; (* 1113: adds x16, x16, x9 *)
  []; (* 1114: mov x14, v19.d[0] *)
  [`X6`]; (* 1115: mul x17, x6, x17 *)
  [`X4`]; (* 1116: adcs x3, x4, x3 *)
  []; (* 1117: lsl x7, x16, #32 *)
  []; (* 1118: umulh x13, x13, x10 *)
  [`X8`]; (* 1119: adcs x11, x11, x8 *)
  []; (* 1120: lsr x8, x16, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1121: adc x5, x5, xzr *)
  []; (* 1122: subs x9, x16, x7 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1123: sbc x16, x16, x8 *)
  [`X3`]; (* 1124: adds x7, x3, x7 *)
  [`Q19`]; (* 1125: mov x3, v19.d[1] *)
  [`X11`; `X8`]; (* 1126: adcs x6, x11, x8 *)
  []; (* 1127: umulh x11, x1, x10 *)
  [`X9`]; (* 1128: adcs x5, x5, x9 *)
  [`X12`]; (* 1129: eor x8, x12, x2 *)
  [`CF`; `NF`; `ZF`; `VF`; `X16`]; (* 1130: adc x9, x16, xzr *)
  []; (* 1131: adds x16, x14, x15 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1132: adc x15, x15, xzr *)
  [`X16`]; (* 1133: adds x12, x16, x3 *)
  [`X17`]; (* 1134: eor x16, x17, x2 *)
  []; (* 1135: mul x4, x1, x10 *)
  []; (* 1136: adcs x15, x15, x13 *)
  [`CF`; `NF`; `ZF`; `VF`; `X13`]; (* 1137: adc x17, x13, xzr *)
  [`X3`]; (* 1138: adds x15, x15, x3 *)
  [`CF`; `NF`; `ZF`; `VF`; `X17`]; (* 1139: adc x3, x17, xzr *)
  []; (* 1140: cmn x2, #0x1 *)
  []; (* 1141: mul x17, x10, x10 *)
  [`X16`]; (* 1142: adcs x12, x12, x16 *)
  [`X15`; `X8`]; (* 1143: adcs x16, x15, x8 *)
  []; (* 1144: umulh x10, x10, x10 *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 1145: adc x2, x3, x2 *)
  []; (* 1146: adds x14, x14, x14 *)
  []; (* 1147: adcs x12, x12, x12 *)
  []; (* 1148: adcs x16, x16, x16 *)
  []; (* 1149: adcs x2, x2, x2 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1150: adc x15, xzr, xzr *)
  [`X7`]; (* 1151: adds x14, x14, x7 *)
  []; (* 1152: mul x3, x1, x1 *)
  [`X6`]; (* 1153: adcs x12, x12, x6 *)
  []; (* 1154: lsr x7, x14, #32 *)
  [`X5`]; (* 1155: adcs x16, x16, x5 *)
  []; (* 1156: lsl x5, x14, #32 *)
  [`X1`]; (* 1157: umulh x13, x1, x1 *)
  [`X9`]; (* 1158: adcs x2, x2, x9 *)
  []; (* 1159: mov x6, #0xffffffff *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1160: adc x15, x15, xzr *)
  [`X4`]; (* 1161: adds x8, x4, x4 *)
  [`X11`]; (* 1162: adcs x1, x11, x11 *)
  []; (* 1163: mov x11, #0xffffffff00000001 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1164: adc x4, xzr, xzr *)
  []; (* 1165: subs x9, x14, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1166: sbc x14, x14, x7 *)
  [`X5`]; (* 1167: adds x12, x12, x5 *)
  [`X7`]; (* 1168: adcs x16, x16, x7 *)
  []; (* 1169: lsl x5, x12, #32 *)
  []; (* 1170: lsr x7, x12, #32 *)
  [`X9`]; (* 1171: adcs x2, x2, x9 *)
  [`X15`]; (* 1172: adcs x14, x15, x14 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1173: adc x15, xzr, xzr *)
  []; (* 1174: subs x9, x12, x5 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1175: sbc x12, x12, x7 *)
  [`X5`]; (* 1176: adds x16, x16, x5 *)
  [`X7`]; (* 1177: adcs x2, x2, x7 *)
  [`X9`]; (* 1178: adcs x14, x14, x9 *)
  [`X15`]; (* 1179: adcs x12, x15, x12 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1180: adc x15, xzr, xzr *)
  [`X3`]; (* 1181: adds x16, x16, x3 *)
  [`X13`]; (* 1182: adcs x2, x2, x13 *)
  [`X17`]; (* 1183: adcs x14, x14, x17 *)
  [`X10`]; (* 1184: adcs x12, x12, x10 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1185: adc x15, x15, xzr *)
  [`X8`]; (* 1186: adds x2, x2, x8 *)
  [`X1`]; (* 1187: adcs x14, x14, x1 *)
  [`X4`]; (* 1188: adcs x12, x12, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1189: adcs x15, x15, xzr *)
  []; (* 1190: adds x3, x16, #0x1 *)
  [`X6`]; (* 1191: sbcs x5, x2, x6 *)
  []; (* 1192: sbcs x8, x14, xzr *)
  []; (* 1193: sbcs x11, x12, x11 *)
  [`X15`]; (* 1194: sbcs xzr, x15, xzr *)
  [`X16`; `X3`]; (* 1195: csel x24, x3, x16, cs *)
  [`X14`; `X8`]; (* 1196: csel x25, x8, x14, cs *)
  [`X11`; `X12`]; (* 1197: csel x26, x11, x12, cs *)
  [`CF`; `NF`; `ZF`; `VF`; `X2`; `X5`]; (* 1198: csel x27, x5, x2, cs *)
  []; (* 1199: stp x25, x26, [x0, #16] *)
  [`X0`]; (* 1200: stp x24, x27, [x0] *)
  []; (* 1201: ldr q20, [sp, #96] *)
  []; (* 1202: ldr q0, [sp, #160] *)
  []; (* 1203: ldp x6, x10, [sp, #96] *)
  []; (* 1204: rev64 v16.4s, v20.4s *)
  []; (* 1205: subs x4, x20, x21 *)
  []; (* 1206: csetm x3, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X4`]; (* 1207: cneg x13, x4, cc *)
  []; (* 1208: mul v16.4s, v16.4s, v0.4s *)
  []; (* 1209: umulh x12, x21, x10 *)
  [`Q20`]; (* 1210: uzp1 v28.4s, v20.4s, v0.4s *)
  []; (* 1211: subs x14, x22, x20 *)
  []; (* 1212: ldr q20, [sp, #112] *)
  [`X21`]; (* 1213: sbcs x5, x23, x21 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1214: ngc x17, xzr *)
  [`X22`; `X23`]; (* 1215: subs x8, x22, x23 *)
  [`Q16`]; (* 1216: uaddlp v27.2d, v16.4s *)
  [`X20`]; (* 1217: umulh x4, x20, x6 *)
  [`Q0`]; (* 1218: uzp1 v21.4s, v0.4s, v0.4s *)
  [`X8`]; (* 1219: cneg x11, x8, cc *)
  [`Q27`]; (* 1220: shl v17.2d, v27.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1221: csetm x15, cc *)
  []; (* 1222: subs x9, x10, x6 *)
  [`X14`]; (* 1223: eor x7, x14, x17 *)
  [`Q21`; `Q28`]; (* 1224: umlal v17.2d, v21.2s, v28.2s *)
  [`X9`]; (* 1225: cneg x8, x9, cc *)
  [`CF`; `NF`; `ZF`; `VF`; `X3`]; (* 1226: cinv x9, x3, cc *)
  []; (* 1227: cmn x17, #0x1 *)
  []; (* 1228: ldr q28, [sp, #176] *)
  [`X7`]; (* 1229: adcs x14, x7, xzr *)
  []; (* 1230: mul x7, x13, x8 *)
  [`X5`]; (* 1231: eor x1, x5, x17 *)
  [`CF`; `NF`; `ZF`; `VF`; `X1`]; (* 1232: adcs x5, x1, xzr *)
  []; (* 1233: xtn v1.2s, v20.2d *)
  []; (* 1234: mov x1, v17.d[0] *)
  [`Q17`]; (* 1235: mov x3, v17.d[1] *)
  []; (* 1236: uzp2 v16.4s, v20.4s, v20.4s *)
  [`X13`; `X8`]; (* 1237: umulh x16, x13, x8 *)
  [`X7`]; (* 1238: eor x13, x7, x9 *)
  []; (* 1239: adds x8, x1, x3 *)
  []; (* 1240: adcs x7, x4, x12 *)
  []; (* 1241: xtn v0.2s, v28.2d *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1242: adcs x12, x12, xzr *)
  [`X4`]; (* 1243: adds x8, x4, x8 *)
  [`X7`]; (* 1244: adcs x3, x3, x7 *)
  []; (* 1245: ldp x7, x2, [sp, #112] *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1246: adcs x12, x12, xzr *)
  []; (* 1247: cmn x9, #0x1 *)
  [`X13`]; (* 1248: adcs x8, x8, x13 *)
  [`X16`]; (* 1249: eor x13, x16, x9 *)
  [`X13`; `X3`]; (* 1250: adcs x16, x3, x13 *)
  []; (* 1251: lsl x3, x1, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`; `X9`]; (* 1252: adc x13, x12, x9 *)
  [`X6`]; (* 1253: subs x12, x6, x7 *)
  [`X10`]; (* 1254: sbcs x9, x10, x2 *)
  []; (* 1255: lsr x10, x1, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1256: ngc x4, xzr *)
  [`X2`; `X7`]; (* 1257: subs x6, x2, x7 *)
  [`X15`]; (* 1258: cinv x2, x15, cc *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1259: cneg x6, x6, cc *)
  []; (* 1260: subs x7, x1, x3 *)
  []; (* 1261: eor x9, x9, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1262: sbc x1, x1, x10 *)
  [`X3`; `X8`]; (* 1263: adds x15, x8, x3 *)
  [`X10`; `X16`]; (* 1264: adcs x3, x16, x10 *)
  []; (* 1265: mul x16, x11, x6 *)
  [`X13`; `X7`]; (* 1266: adcs x8, x13, x7 *)
  [`X12`]; (* 1267: eor x13, x12, x4 *)
  [`CF`; `NF`; `ZF`; `VF`; `X1`]; (* 1268: adc x10, x1, xzr *)
  []; (* 1269: cmn x4, #0x1 *)
  [`X11`]; (* 1270: umulh x6, x11, x6 *)
  [`X13`]; (* 1271: adcs x11, x13, xzr *)
  [`CF`; `NF`; `ZF`; `VF`; `X9`]; (* 1272: adcs x1, x9, xzr *)
  []; (* 1273: lsl x13, x15, #32 *)
  []; (* 1274: subs x12, x15, x13 *)
  []; (* 1275: lsr x7, x15, #32 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1276: sbc x15, x15, x7 *)
  [`X13`; `X3`]; (* 1277: adds x20, x3, x13 *)
  [`X7`; `X8`]; (* 1278: adcs x21, x8, x7 *)
  []; (* 1279: umulh x8, x14, x11 *)
  []; (* 1280: umull v21.2d, v0.2s, v1.2s *)
  [`X10`; `X12`]; (* 1281: adcs x22, x10, x12 *)
  []; (* 1282: umull v3.2d, v0.2s, v16.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X15`]; (* 1283: adc x23, x15, xzr *)
  [`Q20`]; (* 1284: rev64 v24.4s, v20.4s *)
  []; (* 1285: movi v2.2d, #0xffffffff *)
  []; (* 1286: mul x10, x14, x11 *)
  [`Q24`]; (* 1287: mul v4.4s, v24.4s, v28.4s *)
  [`X14`]; (* 1288: subs x13, x14, x5 *)
  [`Q28`]; (* 1289: uzp2 v19.4s, v28.4s, v28.4s *)
  []; (* 1290: csetm x15, cc *)
  [`Q21`]; (* 1291: usra v3.2d, v21.2d, #32 *)
  []; (* 1292: mul x7, x5, x1 *)
  [`Q16`]; (* 1293: umull v21.2d, v19.2s, v16.2s *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1294: cneg x13, x13, cc *)
  [`Q4`]; (* 1295: uaddlp v5.2d, v4.4s *)
  []; (* 1296: subs x11, x1, x11 *)
  [`Q2`]; (* 1297: and v16.16b, v3.16b, v2.16b *)
  [`X1`]; (* 1298: umulh x5, x5, x1 *)
  [`Q5`]; (* 1299: shl v24.2d, v5.2d, #32 *)
  []; (* 1300: cneg x11, x11, cc *)
  [`Q19`]; (* 1301: umlal v16.2d, v19.2s, v1.2s *)
  [`CF`; `NF`; `ZF`; `VF`; `X15`]; (* 1302: cinv x12, x15, cc *)
  [`Q0`; `Q1`]; (* 1303: umlal v24.2d, v0.2s, v1.2s *)
  []; (* 1304: adds x15, x10, x7 *)
  []; (* 1305: mul x14, x13, x11 *)
  [`X6`]; (* 1306: eor x1, x6, x2 *)
  []; (* 1307: adcs x6, x8, x5 *)
  [`Q3`]; (* 1308: usra v21.2d, v3.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 1309: adcs x9, x5, xzr *)
  [`X13`]; (* 1310: umulh x11, x13, x11 *)
  [`X8`]; (* 1311: adds x15, x8, x15 *)
  [`X6`]; (* 1312: adcs x7, x7, x6 *)
  [`X14`]; (* 1313: eor x8, x14, x12 *)
  [`Q16`]; (* 1314: usra v21.2d, v16.2d, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X9`]; (* 1315: adcs x13, x9, xzr *)
  []; (* 1316: cmn x12, #0x1 *)
  []; (* 1317: mov x9, v24.d[1] *)
  [`X15`; `X8`]; (* 1318: adcs x14, x15, x8 *)
  [`X11`]; (* 1319: eor x6, x11, x12 *)
  [`X7`]; (* 1320: adcs x6, x7, x6 *)
  [`Q24`]; (* 1321: mov x5, v24.d[0] *)
  []; (* 1322: mov x11, v21.d[1] *)
  [`Q21`]; (* 1323: mov x7, v21.d[0] *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`; `X13`]; (* 1324: adc x3, x13, x12 *)
  []; (* 1325: adds x12, x5, x9 *)
  []; (* 1326: adcs x13, x7, x11 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1327: adcs x11, x11, xzr *)
  [`X7`]; (* 1328: adds x12, x7, x12 *)
  []; (* 1329: eor x16, x16, x2 *)
  [`X13`; `X9`]; (* 1330: adcs x7, x9, x13 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1331: adcs x11, x11, xzr *)
  []; (* 1332: cmn x2, #0x1 *)
  [`X12`]; (* 1333: adcs x16, x12, x16 *)
  [`X7`]; (* 1334: adcs x1, x7, x1 *)
  [`CF`; `NF`; `ZF`; `VF`; `X11`]; (* 1335: adc x2, x11, x2 *)
  [`X20`; `X5`]; (* 1336: adds x7, x5, x20 *)
  [`X16`; `X21`]; (* 1337: adcs x15, x16, x21 *)
  [`X17`; `X4`]; (* 1338: eor x5, x17, x4 *)
  [`X1`; `X22`]; (* 1339: adcs x9, x1, x22 *)
  [`X10`]; (* 1340: eor x1, x10, x5 *)
  [`X2`; `X23`]; (* 1341: adcs x16, x2, x23 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1342: adc x2, xzr, xzr *)
  []; (* 1343: cmn x5, #0x1 *)
  [`X14`]; (* 1344: eor x13, x14, x5 *)
  [`X1`]; (* 1345: adcs x14, x1, x7 *)
  [`X6`]; (* 1346: eor x1, x6, x5 *)
  [`X13`]; (* 1347: adcs x6, x13, x15 *)
  [`X1`]; (* 1348: adcs x10, x1, x9 *)
  [`X3`]; (* 1349: eor x4, x3, x5 *)
  []; (* 1350: mov x1, #0xffffffff *)
  [`X4`]; (* 1351: adcs x8, x4, x16 *)
  []; (* 1352: lsr x13, x14, #32 *)
  []; (* 1353: adcs x17, x2, x5 *)
  []; (* 1354: adcs x11, x5, xzr *)
  [`CF`; `NF`; `ZF`; `VF`; `X5`]; (* 1355: adc x4, x5, xzr *)
  [`X10`; `X7`]; (* 1356: adds x12, x10, x7 *)
  [`X15`; `X8`]; (* 1357: adcs x7, x8, x15 *)
  [`X17`; `X9`]; (* 1358: adcs x5, x17, x9 *)
  [`X11`; `X16`]; (* 1359: adcs x9, x11, x16 *)
  []; (* 1360: lsl x11, x14, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X2`; `X4`]; (* 1361: adc x10, x4, x2 *)
  []; (* 1362: subs x17, x14, x11 *)
  [`CF`; `NF`; `ZF`; `VF`; `X14`]; (* 1363: sbc x4, x14, x13 *)
  [`X6`]; (* 1364: adds x11, x6, x11 *)
  [`X13`]; (* 1365: adcs x12, x12, x13 *)
  []; (* 1366: lsl x15, x11, #32 *)
  [`X7`]; (* 1367: adcs x17, x7, x17 *)
  []; (* 1368: lsr x7, x11, #32 *)
  [`CF`; `NF`; `ZF`; `VF`; `X4`]; (* 1369: adc x13, x4, xzr *)
  []; (* 1370: subs x4, x11, x15 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1371: sbc x11, x11, x7 *)
  [`X12`; `X15`]; (* 1372: adds x8, x12, x15 *)
  [`X17`; `X7`]; (* 1373: adcs x15, x17, x7 *)
  [`X13`]; (* 1374: adcs x4, x13, x4 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1375: adc x11, x11, xzr *)
  [`X4`; `X5`]; (* 1376: adds x7, x5, x4 *)
  [`X11`; `X9`]; (* 1377: adcs x17, x9, x11 *)
  [`CF`; `NF`; `ZF`; `VF`; `X10`]; (* 1378: adc x13, x10, xzr *)
  []; (* 1379: add x12, x13, #0x1 *)
  []; (* 1380: neg x11, x12 *)
  []; (* 1381: lsl x4, x12, #32 *)
  []; (* 1382: adds x17, x17, x4 *)
  []; (* 1383: sub x4, x4, #0x1 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1384: adc x13, x13, xzr *)
  [`X8`]; (* 1385: subs x11, x8, x11 *)
  [`X15`]; (* 1386: sbcs x4, x15, x4 *)
  []; (* 1387: sbcs x7, x7, xzr *)
  []; (* 1388: sbcs x17, x17, x12 *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`]; (* 1389: sbcs x13, x13, x12 *)
  []; (* 1390: mov x12, #0xffffffff00000001 *)
  [`X11`]; (* 1391: adds x14, x11, x13 *)
  []; (* 1392: and x1, x1, x13 *)
  [`X1`; `X4`]; (* 1393: adcs x15, x4, x1 *)
  [`X12`; `X13`]; (* 1394: and x1, x12, x13 *)
  []; (* 1395: stp x14, x15, [sp, #96] *)
  [`X7`]; (* 1396: adcs x13, x7, xzr *)
  [`CF`; `NF`; `ZF`; `VF`; `X1`; `X17`]; (* 1397: adc x20, x17, x1 *)
  []; (* 1398: stp x13, x20, [sp, #112] *)
  []; (* 1399: ldp x5, x6, [sp, #64] *)
  []; (* 1400: ldp x4, x3, [sp, #32] *)
  [`X4`]; (* 1401: subs x5, x5, x4 *)
  [`X3`]; (* 1402: sbcs x6, x6, x3 *)
  []; (* 1403: ldp x7, x8, [sp, #80] *)
  []; (* 1404: ldp x4, x3, [sp, #48] *)
  [`X4`]; (* 1405: sbcs x7, x7, x4 *)
  [`X3`]; (* 1406: sbcs x8, x8, x3 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1407: csetm x3, cc *)
  []; (* 1408: adds x5, x5, x3 *)
  []; (* 1409: and x4, x3, #0xffffffff *)
  [`X4`]; (* 1410: adcs x6, x6, x4 *)
  []; (* 1411: adcs x7, x7, xzr *)
  [`X3`]; (* 1412: and x4, x3, #0xffffffff00000001 *)
  [`CF`; `NF`; `ZF`; `VF`; `X4`]; (* 1413: adc x8, x8, x4 *)
  [`X5`; `X6`]; (* 1414: stp x5, x6, [x19, #64] *)
  [`X7`; `X8`]; (* 1415: stp x7, x8, [x19, #80] *)
  []; (* 1416: ldp x1, x2, [sp, #128] *)
  []; (* 1417: lsl x0, x1, #2 *)
  []; (* 1418: ldp x6, x7, [sp, #160] *)
  [`X6`]; (* 1419: subs x0, x0, x6 *)
  []; (* 1420: extr x1, x2, x1, #62 *)
  [`X7`]; (* 1421: sbcs x1, x1, x7 *)
  []; (* 1422: ldp x3, x4, [sp, #144] *)
  []; (* 1423: extr x2, x3, x2, #62 *)
  []; (* 1424: ldp x6, x7, [sp, #176] *)
  [`X6`]; (* 1425: sbcs x2, x2, x6 *)
  []; (* 1426: extr x3, x4, x3, #62 *)
  [`X7`]; (* 1427: sbcs x3, x3, x7 *)
  []; (* 1428: lsr x4, x4, #62 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1429: sbc x4, x4, xzr *)
  [`X4`]; (* 1430: add x5, x4, #0x1 *)
  []; (* 1431: lsl x8, x5, #32 *)
  []; (* 1432: negs x6, x8 *)
  []; (* 1433: ngcs x7, xzr *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1434: sbc x8, x8, x5 *)
  [`X5`]; (* 1435: adds x0, x0, x5 *)
  [`X6`]; (* 1436: adcs x1, x1, x6 *)
  [`X7`]; (* 1437: adcs x2, x2, x7 *)
  [`X8`]; (* 1438: adcs x3, x3, x8 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1439: csetm x5, cc *)
  []; (* 1440: adds x0, x0, x5 *)
  [`X5`]; (* 1441: and x6, x5, #0xffffffff *)
  []; (* 1442: adcs x1, x1, x6 *)
  []; (* 1443: adcs x2, x2, xzr *)
  [`X6`]; (* 1444: neg x7, x6 *)
  [`CF`; `NF`; `ZF`; `VF`; `X7`]; (* 1445: adc x3, x3, x7 *)
  [`X0`; `X1`]; (* 1446: stp x0, x1, [x19] *)
  [`X2`; `X3`]; (* 1447: stp x2, x3, [x19, #16] *)
  []; (* 1448: mov x2, #0xffffffffffffffff *)
  [`X2`; `X24`]; (* 1449: subs x9, x2, x24 *)
  []; (* 1450: mov x2, #0xffffffff *)
  [`X2`; `X27`]; (* 1451: sbcs x10, x2, x27 *)
  [`X25`]; (* 1452: ngcs x11, x25 *)
  []; (* 1453: mov x2, #0xffffffff00000001 *)
  [`CF`; `NF`; `ZF`; `VF`; `X2`; `X26`]; (* 1454: sbc x12, x2, x26 *)
  []; (* 1455: lsl x3, x9, #3 *)
  [`X9`]; (* 1456: extr x4, x10, x9, #61 *)
  [`X10`]; (* 1457: extr x5, x11, x10, #61 *)
  [`X11`]; (* 1458: extr x6, x12, x11, #61 *)
  [`X12`]; (* 1459: lsr x7, x12, #61 *)
  []; (* 1460: mov x1, #0x3 *)
  []; (* 1461: mul x8, x14, x1 *)
  [`X14`]; (* 1462: umulh x9, x14, x1 *)
  [`X8`]; (* 1463: adds x3, x3, x8 *)
  []; (* 1464: mul x8, x15, x1 *)
  [`X15`]; (* 1465: umulh x10, x15, x1 *)
  [`X8`]; (* 1466: adcs x4, x4, x8 *)
  []; (* 1467: mul x8, x13, x1 *)
  [`X13`]; (* 1468: umulh x11, x13, x1 *)
  [`X8`]; (* 1469: adcs x5, x5, x8 *)
  []; (* 1470: mul x8, x20, x1 *)
  [`X1`; `X20`]; (* 1471: umulh x12, x20, x1 *)
  [`X8`]; (* 1472: adcs x6, x6, x8 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1473: adc x7, x7, xzr *)
  [`X9`]; (* 1474: adds x4, x4, x9 *)
  [`X10`]; (* 1475: adcs x5, x5, x10 *)
  [`X11`]; (* 1476: adcs x6, x6, x11 *)
  [`CF`; `NF`; `ZF`; `VF`; `X12`]; (* 1477: adc x7, x7, x12 *)
  []; (* 1478: add x8, x7, #0x1 *)
  []; (* 1479: lsl x10, x8, #32 *)
  []; (* 1480: adds x6, x6, x10 *)
  [`CF`; `NF`; `ZF`; `VF`]; (* 1481: adc x7, x7, xzr *)
  []; (* 1482: neg x9, x8 *)
  []; (* 1483: sub x10, x10, #0x1 *)
  [`X9`]; (* 1484: subs x3, x3, x9 *)
  [`X10`]; (* 1485: sbcs x4, x4, x10 *)
  []; (* 1486: sbcs x5, x5, xzr *)
  []; (* 1487: sbcs x6, x6, x8 *)
  [`CF`; `NF`; `ZF`; `VF`; `X7`]; (* 1488: sbc x8, x7, x8 *)
  []; (* 1489: adds x3, x3, x8 *)
  [`X8`]; (* 1490: and x9, x8, #0xffffffff *)
  []; (* 1491: adcs x4, x4, x9 *)
  []; (* 1492: adcs x5, x5, xzr *)
  [`X9`]; (* 1493: neg x10, x9 *)
  [`CF`; `NF`; `ZF`; `VF`; `X10`]; (* 1494: adc x6, x6, x10 *)
  [`X3`; `X4`]; (* 1495: stp x3, x4, [x19, #32] *)
  [`X19`; `X5`; `X6`]; (* 1496: stp x5, x6, [x19, #48] *)
|];;
