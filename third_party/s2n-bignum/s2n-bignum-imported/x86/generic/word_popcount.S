// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0 OR ISC OR MIT-0

// ----------------------------------------------------------------------------
// Count number of set bits in a single 64-bit word (population count)
// Input a; output function return
//
//    extern uint64_t word_popcount (uint64_t a);
//
// Standard x86-64 ABI: RDI = a, returns RAX
// Microsoft x64 ABI:   RCX = a, returns RAX
// ----------------------------------------------------------------------------

#include "_internal_s2n_bignum.h"

        .intel_syntax noprefix
        S2N_BN_SYM_VISIBILITY_DIRECTIVE(word_popcount)
        S2N_BN_SYM_PRIVACY_DIRECTIVE(word_popcount)
        .text

S2N_BN_SYMBOL(word_popcount):
        _CET_ENDBR

#if WINDOWS_ABI
        push    rdi
        push    rsi
        mov     rdi, rcx
#endif

// The code is generated by gcc -O3 (version 11.4.0) from
//
// uint64_t word_popcount(uint64_t x)
// { uint64_t x2  = x - ((x & UINT64_C(0xAAAAAAAAAAAAAAAA))>>1);
//   uint64_t x4  = (x2 & UINT64_C(0x3333333333333333)) +
//                  ((x2 & UINT64_C(0xCCCCCCCCCCCCCCCC))>>2);
//   uint64_t x8  = (x4 + (x4>>4)) & UINT64_C(0x0F0F0F0F0F0F0F0F);
//   uint64_t x64 = x8 * UINT64_C(0x101010101010101);
//   uint64_t y = x64>>56;
//  return y;
// }

        movabs  rdx, 0x5555555555555555
        mov     rax, rdi
        shr     rax, 1
        and     rax, rdx
        sub     rdi, rax
        movabs  rax, 0x3333333333333333
        mov     rdx, rdi
        and     rdi, rax
        shr     rdx, 0x2
        and     rdx, rax
        add     rdx, rdi
        mov     rax, rdx
        shr     rax, 0x4
        add     rax, rdx
        movabs  rdx, 0xf0f0f0f0f0f0f0f
        and     rax, rdx
        movabs  rdx, 0x101010101010101
        imul    rax, rdx
        shr     rax, 0x38

#if WINDOWS_ABI
        pop    rsi
        pop    rdi
#endif
        ret

#if defined(__linux__) && defined(__ELF__)
.section .note.GNU-stack, "", %progbits
#endif
