// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0 OR ISC OR MIT-0

// ----------------------------------------------------------------------------
// Convert 6-digit (384-bit) bignum to/from big-endian form
// Input x[6]; output z[6]
//
//    extern void bignum_bigendian_6
//     (uint64_t z[static 6], uint64_t x[static 6]);
//
// The same function is given two other prototypes whose names reflect the
// treatment of one or other argument as a byte array rather than word array:
//
//    extern void bignum_frombebytes_6
//     (uint64_t z[static 6], uint8_t x[static 48]);
//
//    extern void bignum_tobebytes_6
//     (uint8_t z[static 48], uint64_t x[static 6]);
//
// Since x86 is little-endian, and bignums are stored with little-endian
// word order, this is simply byte reversal and is implemented as such.
//
// Standard x86-64 ABI: RDI = z, RSI = x
// Microsoft x64 ABI:   RCX = z, RDX = x
// ----------------------------------------------------------------------------

#include "_internal_s2n_bignum.h"

        .intel_syntax noprefix
        S2N_BN_SYM_VISIBILITY_DIRECTIVE(bignum_bigendian_6)
        S2N_BN_SYM_PRIVACY_DIRECTIVE(bignum_bigendian_6)
        S2N_BN_SYM_VISIBILITY_DIRECTIVE(bignum_frombebytes_6)
        S2N_BN_SYM_PRIVACY_DIRECTIVE(bignum_frombebytes_6)
        S2N_BN_SYM_VISIBILITY_DIRECTIVE(bignum_tobebytes_6)
        S2N_BN_SYM_PRIVACY_DIRECTIVE(bignum_tobebytes_6)

        .text

#define z rdi
#define x rsi
#define a rax
#define b rdx

// All loads and stores are word-sized, then we use BSWAP to
// reverse the byte order, as well as switching round the word order
// when writing back. The reads and writes are organized in mirror-image
// pairs (0-5, 1-4, 2-3) to allow x and z to point to the same buffer
// without using more intermediate registers.

S2N_BN_SYMBOL(bignum_bigendian_6):
S2N_BN_SYMBOL(bignum_frombebytes_6):
S2N_BN_SYMBOL(bignum_tobebytes_6):
        _CET_ENDBR

#if WINDOWS_ABI
        push    rdi
        push    rsi
        mov     rdi, rcx
        mov     rsi, rdx
#endif

// 0 and 5 words

        mov     a, [x]
        mov     b, [x+40]
        bswap   a
        bswap   b
        mov     [z+40], a
        mov     [z], b

// 1 and 4 words

        mov     a, [x+8]
        mov     b, [x+32]
        bswap   a
        bswap   b
        mov     [z+32], a
        mov     [z+8], b

// 2 and 3 words

        mov     a, [x+16]
        mov     b, [x+24]
        bswap   a
        bswap   b
        mov     [z+24], a
        mov     [z+16], b

#if WINDOWS_ABI
        pop    rsi
        pop    rdi
#endif
        ret

#if defined(__linux__) && defined(__ELF__)
.section .note.GNU-stack,"",%progbits
#endif
