(*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0 OR ISC OR MIT-0
 *)

(* ========================================================================= *)
(* Scalar multiplication for CC SM2.                                         *)
(* ========================================================================= *)

needs "arm/proofs/base.ml";;
needs "common/ecencoding.ml";;
needs "EC/jacobian.ml";;
needs "EC/ccsm2.ml";;

prioritize_int();;
prioritize_real();;
prioritize_num();;

needs "arm/proofs/sm2_montjadd_alt.ml";;
needs "arm/proofs/sm2_montjdouble_alt.ml";;

(* ------------------------------------------------------------------------- *)
(* Code.                                                                     *)
(* ------------------------------------------------------------------------- *)

(**** print_literal_from_elf "arm/sm2/sm2_montjscalarmul_alt.o";;
 ****)

let sm2_montjscalarmul_alt_mc = define_assert_from_elf
  "sm2_montjscalarmul_alt_mc" "arm/sm2/sm2_montjscalarmul_alt.o"
[
  0xa9bf53f3;       (* arm_STP X19 X20 SP (Preimmediate_Offset (iword (-- &16))) *)
  0xa9bf7bf5;       (* arm_STP X21 X30 SP (Preimmediate_Offset (iword (-- &16))) *)
  0xd10f83ff;       (* arm_SUB SP SP (rvalue (word 992)) *)
  0xaa0003f3;       (* arm_MOV X19 X0 *)
  0xaa0203f5;       (* arm_MOV X21 X2 *)
  0xd288246c;       (* arm_MOV X12 (rvalue (word 16675)) *)
  0xf2a73aac;       (* arm_MOVK X12 (word 14805) 16 *)
  0xf2de812c;       (* arm_MOVK X12 (word 62473) 32 *)
  0xf2ea776c;       (* arm_MOVK X12 (word 21435) 48 *)
  0xd280a56d;       (* arm_MOV X13 (rvalue (word 1323)) *)
  0xf2a438cd;       (* arm_MOVK X13 (word 8646) 16 *)
  0xf2dbed6d;       (* arm_MOVK X13 (word 57195) 32 *)
  0xf2ee406d;       (* arm_MOVK X13 (word 29187) 48 *)
  0x9280000e;       (* arm_MOVN X14 (word 0) 0 *)
  0x92c0002f;       (* arm_MOVN X15 (word 1) 32 *)
  0xa9400c22;       (* arm_LDP X2 X3 X1 (Immediate_Offset (iword (&0))) *)
  0xa9411424;       (* arm_LDP X4 X5 X1 (Immediate_Offset (iword (&16))) *)
  0xeb0c0046;       (* arm_SUBS X6 X2 X12 *)
  0xfa0d0067;       (* arm_SBCS X7 X3 X13 *)
  0xfa0e0088;       (* arm_SBCS X8 X4 X14 *)
  0xfa0f00a9;       (* arm_SBCS X9 X5 X15 *)
  0x9a863042;       (* arm_CSEL X2 X2 X6 Condition_CC *)
  0x9a873063;       (* arm_CSEL X3 X3 X7 Condition_CC *)
  0x9a883084;       (* arm_CSEL X4 X4 X8 Condition_CC *)
  0x9a8930a5;       (* arm_CSEL X5 X5 X9 Condition_CC *)
  0xeb020186;       (* arm_SUBS X6 X12 X2 *)
  0xfa0301a7;       (* arm_SBCS X7 X13 X3 *)
  0xfa0401c8;       (* arm_SBCS X8 X14 X4 *)
  0xda0501e9;       (* arm_SBC X9 X15 X5 *)
  0xf24100bf;       (* arm_TST X5 (rvalue (word 9223372036854775808)) *)
  0x9a860042;       (* arm_CSEL X2 X2 X6 Condition_EQ *)
  0x9a870063;       (* arm_CSEL X3 X3 X7 Condition_EQ *)
  0x9a880084;       (* arm_CSEL X4 X4 X8 Condition_EQ *)
  0x9a8900a5;       (* arm_CSEL X5 X5 X9 Condition_EQ *)
  0x9a9f07f4;       (* arm_CSET X20 Condition_NE *)
  0xb201e3e6;       (* arm_MOV X6 (rvalue (word 9838263505978427528)) *)
  0xab060042;       (* arm_ADDS X2 X2 X6 *)
  0xba060063;       (* arm_ADCS X3 X3 X6 *)
  0x9240ecc7;       (* arm_AND X7 X6 (rvalue (word 1152921504606846975)) *)
  0xba060084;       (* arm_ADCS X4 X4 X6 *)
  0x9a0700a5;       (* arm_ADC X5 X5 X7 *)
  0xa9000fe2;       (* arm_STP X2 X3 SP (Immediate_Offset (iword (&0))) *)
  0xa90117e4;       (* arm_STP X4 X5 SP (Immediate_Offset (iword (&16))) *)
  0xa94006a0;       (* arm_LDP X0 X1 X21 (Immediate_Offset (iword (&0))) *)
  0xa90e07e0;       (* arm_STP X0 X1 SP (Immediate_Offset (iword (&224))) *)
  0xa9410ea2;       (* arm_LDP X2 X3 X21 (Immediate_Offset (iword (&16))) *)
  0xa90f0fe2;       (* arm_STP X2 X3 SP (Immediate_Offset (iword (&240))) *)
  0xa94216a4;       (* arm_LDP X4 X5 X21 (Immediate_Offset (iword (&32))) *)
  0xa9431ea6;       (* arm_LDP X6 X7 X21 (Immediate_Offset (iword (&48))) *)
  0x92800000;       (* arm_MOVN X0 (word 0) 0 *)
  0xeb040000;       (* arm_SUBS X0 X0 X4 *)
  0xb2607fe1;       (* arm_MOV X1 (rvalue (word 18446744069414584320)) *)
  0xfa050021;       (* arm_SBCS X1 X1 X5 *)
  0x92800002;       (* arm_MOVN X2 (word 0) 0 *)
  0xfa060042;       (* arm_SBCS X2 X2 X6 *)
  0x92c00023;       (* arm_MOVN X3 (word 1) 32 *)
  0xda070063;       (* arm_SBC X3 X3 X7 *)
  0xaa050088;       (* arm_ORR X8 X4 X5 *)
  0xaa0700c9;       (* arm_ORR X9 X6 X7 *)
  0xaa090108;       (* arm_ORR X8 X8 X9 *)
  0xeb1f011f;       (* arm_CMP X8 XZR *)
  0xfa5f1284;       (* arm_CCMP X20 XZR (word 4) Condition_NE *)
  0x9a841004;       (* arm_CSEL X4 X0 X4 Condition_NE *)
  0x9a851025;       (* arm_CSEL X5 X1 X5 Condition_NE *)
  0x9a861046;       (* arm_CSEL X6 X2 X6 Condition_NE *)
  0x9a871067;       (* arm_CSEL X7 X3 X7 Condition_NE *)
  0xa91017e4;       (* arm_STP X4 X5 SP (Immediate_Offset (iword (&256))) *)
  0xa9111fe6;       (* arm_STP X6 X7 SP (Immediate_Offset (iword (&272))) *)
  0xa94406a0;       (* arm_LDP X0 X1 X21 (Immediate_Offset (iword (&64))) *)
  0xa91207e0;       (* arm_STP X0 X1 SP (Immediate_Offset (iword (&288))) *)
  0xa9450ea2;       (* arm_LDP X2 X3 X21 (Immediate_Offset (iword (&80))) *)
  0xa9130fe2;       (* arm_STP X2 X3 SP (Immediate_Offset (iword (&304))) *)
  0x910503e0;       (* arm_ADD X0 SP (rvalue (word 320)) *)
  0x910383e1;       (* arm_ADD X1 SP (rvalue (word 224)) *)
  0x9400095a;       (* arm_BL (word 9576) *)
  0x910683e0;       (* arm_ADD X0 SP (rvalue (word 416)) *)
  0x910503e1;       (* arm_ADD X1 SP (rvalue (word 320)) *)
  0x910383e2;       (* arm_ADD X2 SP (rvalue (word 224)) *)
  0x940001b5;       (* arm_BL (word 1748) *)
  0x910803e0;       (* arm_ADD X0 SP (rvalue (word 512)) *)
  0x910503e1;       (* arm_ADD X1 SP (rvalue (word 320)) *)
  0x94000953;       (* arm_BL (word 9548) *)
  0x910983e0;       (* arm_ADD X0 SP (rvalue (word 608)) *)
  0x910803e1;       (* arm_ADD X1 SP (rvalue (word 512)) *)
  0x910383e2;       (* arm_ADD X2 SP (rvalue (word 224)) *)
  0x940001ae;       (* arm_BL (word 1720) *)
  0x910b03e0;       (* arm_ADD X0 SP (rvalue (word 704)) *)
  0x910683e1;       (* arm_ADD X1 SP (rvalue (word 416)) *)
  0x9400094c;       (* arm_BL (word 9520) *)
  0x910c83e0;       (* arm_ADD X0 SP (rvalue (word 800)) *)
  0x910b03e1;       (* arm_ADD X1 SP (rvalue (word 704)) *)
  0x910383e2;       (* arm_ADD X2 SP (rvalue (word 224)) *)
  0x940001a7;       (* arm_BL (word 1692) *)
  0x910e03e0;       (* arm_ADD X0 SP (rvalue (word 896)) *)
  0x910803e1;       (* arm_ADD X1 SP (rvalue (word 512)) *)
  0x94000945;       (* arm_BL (word 9492) *)
  0xf9400fee;       (* arm_LDR X14 SP (Immediate_Offset (word 24)) *)
  0xd37cfdce;       (* arm_LSR X14 X14 60 *)
  0xaa1f03e0;       (* arm_MOV X0 XZR *)
  0xaa1f03e1;       (* arm_MOV X1 XZR *)
  0xaa1f03e2;       (* arm_MOV X2 XZR *)
  0xaa1f03e3;       (* arm_MOV X3 XZR *)
  0xaa1f03e4;       (* arm_MOV X4 XZR *)
  0xaa1f03e5;       (* arm_MOV X5 XZR *)
  0xaa1f03e6;       (* arm_MOV X6 XZR *)
  0xaa1f03e7;       (* arm_MOV X7 XZR *)
  0xaa1f03e8;       (* arm_MOV X8 XZR *)
  0xaa1f03e9;       (* arm_MOV X9 XZR *)
  0xaa1f03ea;       (* arm_MOV X10 XZR *)
  0xaa1f03eb;       (* arm_MOV X11 XZR *)
  0x910383ef;       (* arm_ADD X15 SP (rvalue (word 224)) *)
  0xf10005df;       (* arm_CMP X14 (rvalue (word 1)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf10009df;       (* arm_CMP X14 (rvalue (word 2)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf1000ddf;       (* arm_CMP X14 (rvalue (word 3)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf10011df;       (* arm_CMP X14 (rvalue (word 4)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf10015df;       (* arm_CMP X14 (rvalue (word 5)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf10019df;       (* arm_CMP X14 (rvalue (word 6)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf1001ddf;       (* arm_CMP X14 (rvalue (word 7)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf10021df;       (* arm_CMP X14 (rvalue (word 8)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xa90207e0;       (* arm_STP X0 X1 SP (Immediate_Offset (iword (&32))) *)
  0xa9030fe2;       (* arm_STP X2 X3 SP (Immediate_Offset (iword (&48))) *)
  0xa90417e4;       (* arm_STP X4 X5 SP (Immediate_Offset (iword (&64))) *)
  0xa9051fe6;       (* arm_STP X6 X7 SP (Immediate_Offset (iword (&80))) *)
  0xa90627e8;       (* arm_STP X8 X9 SP (Immediate_Offset (iword (&96))) *)
  0xa9072fea;       (* arm_STP X10 X11 SP (Immediate_Offset (iword (&112))) *)
  0xd2801f94;       (* arm_MOV X20 (rvalue (word 252)) *)
  0xd1001294;       (* arm_SUB X20 X20 (rvalue (word 4)) *)
  0x910083e0;       (* arm_ADD X0 SP (rvalue (word 32)) *)
  0x910083e1;       (* arm_ADD X1 SP (rvalue (word 32)) *)
  0x9400088b;       (* arm_BL (word 8748) *)
  0x910083e0;       (* arm_ADD X0 SP (rvalue (word 32)) *)
  0x910083e1;       (* arm_ADD X1 SP (rvalue (word 32)) *)
  0x94000888;       (* arm_BL (word 8736) *)
  0x910083e0;       (* arm_ADD X0 SP (rvalue (word 32)) *)
  0x910083e1;       (* arm_ADD X1 SP (rvalue (word 32)) *)
  0x94000885;       (* arm_BL (word 8724) *)
  0x910083e0;       (* arm_ADD X0 SP (rvalue (word 32)) *)
  0x910083e1;       (* arm_ADD X1 SP (rvalue (word 32)) *)
  0x94000882;       (* arm_BL (word 8712) *)
  0xd346fe82;       (* arm_LSR X2 X20 6 *)
  0xf8627bee;       (* arm_LDR X14 SP (Shiftreg_Offset X2 3) *)
  0x9ad425ce;       (* arm_LSRV X14 X14 X20 *)
  0x92400dce;       (* arm_AND X14 X14 (rvalue (word 15)) *)
  0xf10021ce;       (* arm_SUBS X14 X14 (rvalue (word 8)) *)
  0x9a9f27f0;       (* arm_CSET X16 Condition_CC *)
  0xda8e25ce;       (* arm_CNEG X14 X14 Condition_CC *)
  0xaa1f03e0;       (* arm_MOV X0 XZR *)
  0xaa1f03e1;       (* arm_MOV X1 XZR *)
  0xaa1f03e2;       (* arm_MOV X2 XZR *)
  0xaa1f03e3;       (* arm_MOV X3 XZR *)
  0xaa1f03e4;       (* arm_MOV X4 XZR *)
  0xaa1f03e5;       (* arm_MOV X5 XZR *)
  0xaa1f03e6;       (* arm_MOV X6 XZR *)
  0xaa1f03e7;       (* arm_MOV X7 XZR *)
  0xaa1f03e8;       (* arm_MOV X8 XZR *)
  0xaa1f03e9;       (* arm_MOV X9 XZR *)
  0xaa1f03ea;       (* arm_MOV X10 XZR *)
  0xaa1f03eb;       (* arm_MOV X11 XZR *)
  0x910383ef;       (* arm_ADD X15 SP (rvalue (word 224)) *)
  0xf10005df;       (* arm_CMP X14 (rvalue (word 1)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf10009df;       (* arm_CMP X14 (rvalue (word 2)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf1000ddf;       (* arm_CMP X14 (rvalue (word 3)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf10011df;       (* arm_CMP X14 (rvalue (word 4)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf10015df;       (* arm_CMP X14 (rvalue (word 5)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf10019df;       (* arm_CMP X14 (rvalue (word 6)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf1001ddf;       (* arm_CMP X14 (rvalue (word 7)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xf10021df;       (* arm_CMP X14 (rvalue (word 8)) *)
  0xa94035ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&0))) *)
  0x9a800180;       (* arm_CSEL X0 X12 X0 Condition_EQ *)
  0x9a8101a1;       (* arm_CSEL X1 X13 X1 Condition_EQ *)
  0xa94135ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&16))) *)
  0x9a820182;       (* arm_CSEL X2 X12 X2 Condition_EQ *)
  0x9a8301a3;       (* arm_CSEL X3 X13 X3 Condition_EQ *)
  0xa94235ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&32))) *)
  0x9a840184;       (* arm_CSEL X4 X12 X4 Condition_EQ *)
  0x9a8501a5;       (* arm_CSEL X5 X13 X5 Condition_EQ *)
  0xa94335ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&48))) *)
  0x9a860186;       (* arm_CSEL X6 X12 X6 Condition_EQ *)
  0x9a8701a7;       (* arm_CSEL X7 X13 X7 Condition_EQ *)
  0xa94435ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&64))) *)
  0x9a880188;       (* arm_CSEL X8 X12 X8 Condition_EQ *)
  0x9a8901a9;       (* arm_CSEL X9 X13 X9 Condition_EQ *)
  0xa94535ec;       (* arm_LDP X12 X13 X15 (Immediate_Offset (iword (&80))) *)
  0x9a8a018a;       (* arm_CSEL X10 X12 X10 Condition_EQ *)
  0x9a8b01ab;       (* arm_CSEL X11 X13 X11 Condition_EQ *)
  0x910181ef;       (* arm_ADD X15 X15 (rvalue (word 96)) *)
  0xa90807e0;       (* arm_STP X0 X1 SP (Immediate_Offset (iword (&128))) *)
  0xa9090fe2;       (* arm_STP X2 X3 SP (Immediate_Offset (iword (&144))) *)
  0x92800000;       (* arm_MOVN X0 (word 0) 0 *)
  0xeb040000;       (* arm_SUBS X0 X0 X4 *)
  0xb2607fe1;       (* arm_MOV X1 (rvalue (word 18446744069414584320)) *)
  0xfa050021;       (* arm_SBCS X1 X1 X5 *)
  0x92800002;       (* arm_MOVN X2 (word 0) 0 *)
  0xfa060042;       (* arm_SBCS X2 X2 X6 *)
  0x92c00023;       (* arm_MOVN X3 (word 1) 32 *)
  0xda070063;       (* arm_SBC X3 X3 X7 *)
  0xaa05008c;       (* arm_ORR X12 X4 X5 *)
  0xaa0700cd;       (* arm_ORR X13 X6 X7 *)
  0xaa0d018c;       (* arm_ORR X12 X12 X13 *)
  0xeb1f019f;       (* arm_CMP X12 XZR *)
  0xfa5f1204;       (* arm_CCMP X16 XZR (word 4) Condition_NE *)
  0x9a841004;       (* arm_CSEL X4 X0 X4 Condition_NE *)
  0x9a851025;       (* arm_CSEL X5 X1 X5 Condition_NE *)
  0x9a861046;       (* arm_CSEL X6 X2 X6 Condition_NE *)
  0x9a871067;       (* arm_CSEL X7 X3 X7 Condition_NE *)
  0xa90a17e4;       (* arm_STP X4 X5 SP (Immediate_Offset (iword (&160))) *)
  0xa90b1fe6;       (* arm_STP X6 X7 SP (Immediate_Offset (iword (&176))) *)
  0xa90c27e8;       (* arm_STP X8 X9 SP (Immediate_Offset (iword (&192))) *)
  0xa90d2fea;       (* arm_STP X10 X11 SP (Immediate_Offset (iword (&208))) *)
  0x910083e0;       (* arm_ADD X0 SP (rvalue (word 32)) *)
  0x910083e1;       (* arm_ADD X1 SP (rvalue (word 32)) *)
  0x910203e2;       (* arm_ADD X2 SP (rvalue (word 128)) *)
  0x94000012;       (* arm_BL (word 72) *)
  0xb5ffe494;       (* arm_CBNZ X20 (word 2096272) *)
  0xa94207e0;       (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&32))) *)
  0xa9000660;       (* arm_STP X0 X1 X19 (Immediate_Offset (iword (&0))) *)
  0xa94307e0;       (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&48))) *)
  0xa9010660;       (* arm_STP X0 X1 X19 (Immediate_Offset (iword (&16))) *)
  0xa94407e0;       (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&64))) *)
  0xa9020660;       (* arm_STP X0 X1 X19 (Immediate_Offset (iword (&32))) *)
  0xa94507e0;       (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&80))) *)
  0xa9030660;       (* arm_STP X0 X1 X19 (Immediate_Offset (iword (&48))) *)
  0xa94607e0;       (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&96))) *)
  0xa9040660;       (* arm_STP X0 X1 X19 (Immediate_Offset (iword (&64))) *)
  0xa94707e0;       (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&112))) *)
  0xa9050660;       (* arm_STP X0 X1 X19 (Immediate_Offset (iword (&80))) *)
  0x910f83ff;       (* arm_ADD SP SP (rvalue (word 992)) *)
  0xa8c17bf5;       (* arm_LDP X21 X30 SP (Postimmediate_Offset (iword (&16))) *)
  0xa8c153f3;       (* arm_LDP X19 X20 SP (Postimmediate_Offset (iword (&16))) *)
  0xd65f03c0;       (* arm_RET X30 *)
  0xd10383ff;       (* arm_SUB SP SP (rvalue (word 224)) *)
  0xaa0003ef;       (* arm_MOV X15 X0 *)
  0xaa0103f0;       (* arm_MOV X16 X1 *)
  0xaa0203f1;       (* arm_MOV X17 X2 *)
  0xa9440e02;       (* arm_LDP X2 X3 X16 (Immediate_Offset (iword (&64))) *)
  0x9b037c49;       (* arm_MUL X9 X2 X3 *)
  0x9bc37c4a;       (* arm_UMULH X10 X2 X3 *)
  0xa9451604;       (* arm_LDP X4 X5 X16 (Immediate_Offset (iword (&80))) *)
  0x9b057c4b;       (* arm_MUL X11 X2 X5 *)
  0x9bc57c4c;       (* arm_UMULH X12 X2 X5 *)
  0x9b047c46;       (* arm_MUL X6 X2 X4 *)
  0x9bc47c47;       (* arm_UMULH X7 X2 X4 *)
  0xab06014a;       (* arm_ADDS X10 X10 X6 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9b047c66;       (* arm_MUL X6 X3 X4 *)
  0x9bc47c67;       (* arm_UMULH X7 X3 X4 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06016b;       (* arm_ADDS X11 X11 X6 *)
  0x9b057c8d;       (* arm_MUL X13 X4 X5 *)
  0x9bc57c8e;       (* arm_UMULH X14 X4 X5 *)
  0xba07018c;       (* arm_ADCS X12 X12 X7 *)
  0x9b057c66;       (* arm_MUL X6 X3 X5 *)
  0x9bc57c67;       (* arm_UMULH X7 X3 X5 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06018c;       (* arm_ADDS X12 X12 X6 *)
  0xba0701ad;       (* arm_ADCS X13 X13 X7 *)
  0x9a1f01ce;       (* arm_ADC X14 X14 XZR *)
  0xab090129;       (* arm_ADDS X9 X9 X9 *)
  0xba0a014a;       (* arm_ADCS X10 X10 X10 *)
  0xba0b016b;       (* arm_ADCS X11 X11 X11 *)
  0xba0c018c;       (* arm_ADCS X12 X12 X12 *)
  0xba0d01ad;       (* arm_ADCS X13 X13 X13 *)
  0xba0e01ce;       (* arm_ADCS X14 X14 X14 *)
  0x9a9f37e7;       (* arm_CSET X7 Condition_CS *)
  0x9bc27c46;       (* arm_UMULH X6 X2 X2 *)
  0x9b027c48;       (* arm_MUL X8 X2 X2 *)
  0xab060129;       (* arm_ADDS X9 X9 X6 *)
  0x9b037c66;       (* arm_MUL X6 X3 X3 *)
  0xba06014a;       (* arm_ADCS X10 X10 X6 *)
  0x9bc37c66;       (* arm_UMULH X6 X3 X3 *)
  0xba06016b;       (* arm_ADCS X11 X11 X6 *)
  0x9b047c86;       (* arm_MUL X6 X4 X4 *)
  0xba06018c;       (* arm_ADCS X12 X12 X6 *)
  0x9bc47c86;       (* arm_UMULH X6 X4 X4 *)
  0xba0601ad;       (* arm_ADCS X13 X13 X6 *)
  0x9b057ca6;       (* arm_MUL X6 X5 X5 *)
  0xba0601ce;       (* arm_ADCS X14 X14 X6 *)
  0x9bc57ca6;       (* arm_UMULH X6 X5 X5 *)
  0x9a0600e7;       (* arm_ADC X7 X7 X6 *)
  0xd3607d04;       (* arm_LSL X4 X8 32 *)
  0xd360fd05;       (* arm_LSR X5 X8 32 *)
  0xeb080082;       (* arm_SUBS X2 X4 X8 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020129;       (* arm_SUBS X9 X9 X2 *)
  0xfa03014a;       (* arm_SBCS X10 X10 X3 *)
  0xfa04016b;       (* arm_SBCS X11 X11 X4 *)
  0xda050108;       (* arm_SBC X8 X8 X5 *)
  0xd3607d24;       (* arm_LSL X4 X9 32 *)
  0xd360fd25;       (* arm_LSR X5 X9 32 *)
  0xeb090082;       (* arm_SUBS X2 X4 X9 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02014a;       (* arm_SUBS X10 X10 X2 *)
  0xfa03016b;       (* arm_SBCS X11 X11 X3 *)
  0xfa040108;       (* arm_SBCS X8 X8 X4 *)
  0xda050129;       (* arm_SBC X9 X9 X5 *)
  0xd3607d44;       (* arm_LSL X4 X10 32 *)
  0xd360fd45;       (* arm_LSR X5 X10 32 *)
  0xeb0a0082;       (* arm_SUBS X2 X4 X10 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02016b;       (* arm_SUBS X11 X11 X2 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xfa040129;       (* arm_SBCS X9 X9 X4 *)
  0xda05014a;       (* arm_SBC X10 X10 X5 *)
  0xd3607d64;       (* arm_LSL X4 X11 32 *)
  0xd360fd65;       (* arm_LSR X5 X11 32 *)
  0xeb0b0082;       (* arm_SUBS X2 X4 X11 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020108;       (* arm_SUBS X8 X8 X2 *)
  0xfa030129;       (* arm_SBCS X9 X9 X3 *)
  0xfa04014a;       (* arm_SBCS X10 X10 X4 *)
  0xda05016b;       (* arm_SBC X11 X11 X5 *)
  0xab0c0108;       (* arm_ADDS X8 X8 X12 *)
  0xba0d0129;       (* arm_ADCS X9 X9 X13 *)
  0xba0e014a;       (* arm_ADCS X10 X10 X14 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0xda9f33e2;       (* arm_CSETM X2 Condition_CS *)
  0xeb020108;       (* arm_SUBS X8 X8 X2 *)
  0x92607c43;       (* arm_AND X3 X2 (rvalue (word 18446744069414584320)) *)
  0xfa030129;       (* arm_SBCS X9 X9 X3 *)
  0x925ff845;       (* arm_AND X5 X2 (rvalue (word 18446744069414584319)) *)
  0xfa02014a;       (* arm_SBCS X10 X10 X2 *)
  0xda05016b;       (* arm_SBC X11 X11 X5 *)
  0xa90027e8;       (* arm_STP X8 X9 SP (Immediate_Offset (iword (&0))) *)
  0xa9012fea;       (* arm_STP X10 X11 SP (Immediate_Offset (iword (&16))) *)
  0xa9440e22;       (* arm_LDP X2 X3 X17 (Immediate_Offset (iword (&64))) *)
  0x9b037c49;       (* arm_MUL X9 X2 X3 *)
  0x9bc37c4a;       (* arm_UMULH X10 X2 X3 *)
  0xa9451624;       (* arm_LDP X4 X5 X17 (Immediate_Offset (iword (&80))) *)
  0x9b057c4b;       (* arm_MUL X11 X2 X5 *)
  0x9bc57c4c;       (* arm_UMULH X12 X2 X5 *)
  0x9b047c46;       (* arm_MUL X6 X2 X4 *)
  0x9bc47c47;       (* arm_UMULH X7 X2 X4 *)
  0xab06014a;       (* arm_ADDS X10 X10 X6 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9b047c66;       (* arm_MUL X6 X3 X4 *)
  0x9bc47c67;       (* arm_UMULH X7 X3 X4 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06016b;       (* arm_ADDS X11 X11 X6 *)
  0x9b057c8d;       (* arm_MUL X13 X4 X5 *)
  0x9bc57c8e;       (* arm_UMULH X14 X4 X5 *)
  0xba07018c;       (* arm_ADCS X12 X12 X7 *)
  0x9b057c66;       (* arm_MUL X6 X3 X5 *)
  0x9bc57c67;       (* arm_UMULH X7 X3 X5 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06018c;       (* arm_ADDS X12 X12 X6 *)
  0xba0701ad;       (* arm_ADCS X13 X13 X7 *)
  0x9a1f01ce;       (* arm_ADC X14 X14 XZR *)
  0xab090129;       (* arm_ADDS X9 X9 X9 *)
  0xba0a014a;       (* arm_ADCS X10 X10 X10 *)
  0xba0b016b;       (* arm_ADCS X11 X11 X11 *)
  0xba0c018c;       (* arm_ADCS X12 X12 X12 *)
  0xba0d01ad;       (* arm_ADCS X13 X13 X13 *)
  0xba0e01ce;       (* arm_ADCS X14 X14 X14 *)
  0x9a9f37e7;       (* arm_CSET X7 Condition_CS *)
  0x9bc27c46;       (* arm_UMULH X6 X2 X2 *)
  0x9b027c48;       (* arm_MUL X8 X2 X2 *)
  0xab060129;       (* arm_ADDS X9 X9 X6 *)
  0x9b037c66;       (* arm_MUL X6 X3 X3 *)
  0xba06014a;       (* arm_ADCS X10 X10 X6 *)
  0x9bc37c66;       (* arm_UMULH X6 X3 X3 *)
  0xba06016b;       (* arm_ADCS X11 X11 X6 *)
  0x9b047c86;       (* arm_MUL X6 X4 X4 *)
  0xba06018c;       (* arm_ADCS X12 X12 X6 *)
  0x9bc47c86;       (* arm_UMULH X6 X4 X4 *)
  0xba0601ad;       (* arm_ADCS X13 X13 X6 *)
  0x9b057ca6;       (* arm_MUL X6 X5 X5 *)
  0xba0601ce;       (* arm_ADCS X14 X14 X6 *)
  0x9bc57ca6;       (* arm_UMULH X6 X5 X5 *)
  0x9a0600e7;       (* arm_ADC X7 X7 X6 *)
  0xd3607d04;       (* arm_LSL X4 X8 32 *)
  0xd360fd05;       (* arm_LSR X5 X8 32 *)
  0xeb080082;       (* arm_SUBS X2 X4 X8 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020129;       (* arm_SUBS X9 X9 X2 *)
  0xfa03014a;       (* arm_SBCS X10 X10 X3 *)
  0xfa04016b;       (* arm_SBCS X11 X11 X4 *)
  0xda050108;       (* arm_SBC X8 X8 X5 *)
  0xd3607d24;       (* arm_LSL X4 X9 32 *)
  0xd360fd25;       (* arm_LSR X5 X9 32 *)
  0xeb090082;       (* arm_SUBS X2 X4 X9 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02014a;       (* arm_SUBS X10 X10 X2 *)
  0xfa03016b;       (* arm_SBCS X11 X11 X3 *)
  0xfa040108;       (* arm_SBCS X8 X8 X4 *)
  0xda050129;       (* arm_SBC X9 X9 X5 *)
  0xd3607d44;       (* arm_LSL X4 X10 32 *)
  0xd360fd45;       (* arm_LSR X5 X10 32 *)
  0xeb0a0082;       (* arm_SUBS X2 X4 X10 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02016b;       (* arm_SUBS X11 X11 X2 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xfa040129;       (* arm_SBCS X9 X9 X4 *)
  0xda05014a;       (* arm_SBC X10 X10 X5 *)
  0xd3607d64;       (* arm_LSL X4 X11 32 *)
  0xd360fd65;       (* arm_LSR X5 X11 32 *)
  0xeb0b0082;       (* arm_SUBS X2 X4 X11 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020108;       (* arm_SUBS X8 X8 X2 *)
  0xfa030129;       (* arm_SBCS X9 X9 X3 *)
  0xfa04014a;       (* arm_SBCS X10 X10 X4 *)
  0xda05016b;       (* arm_SBC X11 X11 X5 *)
  0xab0c0108;       (* arm_ADDS X8 X8 X12 *)
  0xba0d0129;       (* arm_ADCS X9 X9 X13 *)
  0xba0e014a;       (* arm_ADCS X10 X10 X14 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0xda9f33e2;       (* arm_CSETM X2 Condition_CS *)
  0xeb020108;       (* arm_SUBS X8 X8 X2 *)
  0x92607c43;       (* arm_AND X3 X2 (rvalue (word 18446744069414584320)) *)
  0xfa030129;       (* arm_SBCS X9 X9 X3 *)
  0x925ff845;       (* arm_AND X5 X2 (rvalue (word 18446744069414584319)) *)
  0xfa02014a;       (* arm_SBCS X10 X10 X2 *)
  0xda05016b;       (* arm_SBC X11 X11 X5 *)
  0xa90a27e8;       (* arm_STP X8 X9 SP (Immediate_Offset (iword (&160))) *)
  0xa90b2fea;       (* arm_STP X10 X11 SP (Immediate_Offset (iword (&176))) *)
  0xa9441223;       (* arm_LDP X3 X4 X17 (Immediate_Offset (iword (&64))) *)
  0xa9422207;       (* arm_LDP X7 X8 X16 (Immediate_Offset (iword (&32))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9432a09;       (* arm_LDP X9 X10 X16 (Immediate_Offset (iword (&48))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa9451a25;       (* arm_LDP X5 X6 X17 (Immediate_Offset (iword (&80))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90c37ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&192))) *)
  0xa90d03ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&208))) *)
  0xa9441203;       (* arm_LDP X3 X4 X16 (Immediate_Offset (iword (&64))) *)
  0xa9422227;       (* arm_LDP X7 X8 X17 (Immediate_Offset (iword (&32))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9432a29;       (* arm_LDP X9 X10 X17 (Immediate_Offset (iword (&48))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa9451a05;       (* arm_LDP X5 X6 X16 (Immediate_Offset (iword (&80))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90237ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&32))) *)
  0xa90303ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&48))) *)
  0xa94013e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&0))) *)
  0xa9402227;       (* arm_LDP X7 X8 X17 (Immediate_Offset (iword (&0))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9412a29;       (* arm_LDP X9 X10 X17 (Immediate_Offset (iword (&16))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa9411be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&16))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90437ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&64))) *)
  0xa90503ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&80))) *)
  0xa94a13e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&160))) *)
  0xa9402207;       (* arm_LDP X7 X8 X16 (Immediate_Offset (iword (&0))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9412a09;       (* arm_LDP X9 X10 X16 (Immediate_Offset (iword (&16))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa94b1be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&176))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90837ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&128))) *)
  0xa90903ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&144))) *)
  0xa94013e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&0))) *)
  0xa94223e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&32))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9432be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&48))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa9411be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&16))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90237ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&32))) *)
  0xa90303ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&48))) *)
  0xa94a13e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&160))) *)
  0xa94c23e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&192))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa94d2be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&208))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa94b1be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&176))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90c37ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&192))) *)
  0xa90d03ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&208))) *)
  0xa9441be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&64))) *)
  0xa9480fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&128))) *)
  0xeb0400a5;       (* arm_SUBS X5 X5 X4 *)
  0xfa0300c6;       (* arm_SBCS X6 X6 X3 *)
  0xa94523e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  0xa9490fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&144))) *)
  0xfa0400e7;       (* arm_SBCS X7 X7 X4 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xda9f23e3;       (* arm_CSETM X3 Condition_CC *)
  0xab0300a5;       (* arm_ADDS X5 X5 X3 *)
  0x92607c64;       (* arm_AND X4 X3 (rvalue (word 18446744069414584320)) *)
  0xba0400c6;       (* arm_ADCS X6 X6 X4 *)
  0xba0300e7;       (* arm_ADCS X7 X7 X3 *)
  0x925ff864;       (* arm_AND X4 X3 (rvalue (word 18446744069414584319)) *)
  0x9a040108;       (* arm_ADC X8 X8 X4 *)
  0xa90a1be5;       (* arm_STP X5 X6 SP (Immediate_Offset (iword (&160))) *)
  0xa90b23e7;       (* arm_STP X7 X8 SP (Immediate_Offset (iword (&176))) *)
  0xa9421be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&32))) *)
  0xa94c0fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&192))) *)
  0xeb0400a5;       (* arm_SUBS X5 X5 X4 *)
  0xfa0300c6;       (* arm_SBCS X6 X6 X3 *)
  0xa94323e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&48))) *)
  0xa94d0fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&208))) *)
  0xfa0400e7;       (* arm_SBCS X7 X7 X4 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xda9f23e3;       (* arm_CSETM X3 Condition_CC *)
  0xab0300a5;       (* arm_ADDS X5 X5 X3 *)
  0x92607c64;       (* arm_AND X4 X3 (rvalue (word 18446744069414584320)) *)
  0xba0400c6;       (* arm_ADCS X6 X6 X4 *)
  0xba0300e7;       (* arm_ADCS X7 X7 X3 *)
  0x925ff864;       (* arm_AND X4 X3 (rvalue (word 18446744069414584319)) *)
  0x9a040108;       (* arm_ADC X8 X8 X4 *)
  0xa9021be5;       (* arm_STP X5 X6 SP (Immediate_Offset (iword (&32))) *)
  0xa90323e7;       (* arm_STP X7 X8 SP (Immediate_Offset (iword (&48))) *)
  0xa94a0fe2;       (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&160))) *)
  0x9b037c49;       (* arm_MUL X9 X2 X3 *)
  0x9bc37c4a;       (* arm_UMULH X10 X2 X3 *)
  0xa94b17e4;       (* arm_LDP X4 X5 SP (Immediate_Offset (iword (&176))) *)
  0x9b057c4b;       (* arm_MUL X11 X2 X5 *)
  0x9bc57c4c;       (* arm_UMULH X12 X2 X5 *)
  0x9b047c46;       (* arm_MUL X6 X2 X4 *)
  0x9bc47c47;       (* arm_UMULH X7 X2 X4 *)
  0xab06014a;       (* arm_ADDS X10 X10 X6 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9b047c66;       (* arm_MUL X6 X3 X4 *)
  0x9bc47c67;       (* arm_UMULH X7 X3 X4 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06016b;       (* arm_ADDS X11 X11 X6 *)
  0x9b057c8d;       (* arm_MUL X13 X4 X5 *)
  0x9bc57c8e;       (* arm_UMULH X14 X4 X5 *)
  0xba07018c;       (* arm_ADCS X12 X12 X7 *)
  0x9b057c66;       (* arm_MUL X6 X3 X5 *)
  0x9bc57c67;       (* arm_UMULH X7 X3 X5 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06018c;       (* arm_ADDS X12 X12 X6 *)
  0xba0701ad;       (* arm_ADCS X13 X13 X7 *)
  0x9a1f01ce;       (* arm_ADC X14 X14 XZR *)
  0xab090129;       (* arm_ADDS X9 X9 X9 *)
  0xba0a014a;       (* arm_ADCS X10 X10 X10 *)
  0xba0b016b;       (* arm_ADCS X11 X11 X11 *)
  0xba0c018c;       (* arm_ADCS X12 X12 X12 *)
  0xba0d01ad;       (* arm_ADCS X13 X13 X13 *)
  0xba0e01ce;       (* arm_ADCS X14 X14 X14 *)
  0x9a9f37e7;       (* arm_CSET X7 Condition_CS *)
  0x9bc27c46;       (* arm_UMULH X6 X2 X2 *)
  0x9b027c48;       (* arm_MUL X8 X2 X2 *)
  0xab060129;       (* arm_ADDS X9 X9 X6 *)
  0x9b037c66;       (* arm_MUL X6 X3 X3 *)
  0xba06014a;       (* arm_ADCS X10 X10 X6 *)
  0x9bc37c66;       (* arm_UMULH X6 X3 X3 *)
  0xba06016b;       (* arm_ADCS X11 X11 X6 *)
  0x9b047c86;       (* arm_MUL X6 X4 X4 *)
  0xba06018c;       (* arm_ADCS X12 X12 X6 *)
  0x9bc47c86;       (* arm_UMULH X6 X4 X4 *)
  0xba0601ad;       (* arm_ADCS X13 X13 X6 *)
  0x9b057ca6;       (* arm_MUL X6 X5 X5 *)
  0xba0601ce;       (* arm_ADCS X14 X14 X6 *)
  0x9bc57ca6;       (* arm_UMULH X6 X5 X5 *)
  0x9a0600e7;       (* arm_ADC X7 X7 X6 *)
  0xd3607d04;       (* arm_LSL X4 X8 32 *)
  0xd360fd05;       (* arm_LSR X5 X8 32 *)
  0xeb080082;       (* arm_SUBS X2 X4 X8 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020129;       (* arm_SUBS X9 X9 X2 *)
  0xfa03014a;       (* arm_SBCS X10 X10 X3 *)
  0xfa04016b;       (* arm_SBCS X11 X11 X4 *)
  0xda050108;       (* arm_SBC X8 X8 X5 *)
  0xd3607d24;       (* arm_LSL X4 X9 32 *)
  0xd360fd25;       (* arm_LSR X5 X9 32 *)
  0xeb090082;       (* arm_SUBS X2 X4 X9 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02014a;       (* arm_SUBS X10 X10 X2 *)
  0xfa03016b;       (* arm_SBCS X11 X11 X3 *)
  0xfa040108;       (* arm_SBCS X8 X8 X4 *)
  0xda050129;       (* arm_SBC X9 X9 X5 *)
  0xd3607d44;       (* arm_LSL X4 X10 32 *)
  0xd360fd45;       (* arm_LSR X5 X10 32 *)
  0xeb0a0082;       (* arm_SUBS X2 X4 X10 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02016b;       (* arm_SUBS X11 X11 X2 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xfa040129;       (* arm_SBCS X9 X9 X4 *)
  0xda05014a;       (* arm_SBC X10 X10 X5 *)
  0xd3607d64;       (* arm_LSL X4 X11 32 *)
  0xd360fd65;       (* arm_LSR X5 X11 32 *)
  0xeb0b0082;       (* arm_SUBS X2 X4 X11 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020108;       (* arm_SUBS X8 X8 X2 *)
  0xfa030129;       (* arm_SBCS X9 X9 X3 *)
  0xfa04014a;       (* arm_SBCS X10 X10 X4 *)
  0xda05016b;       (* arm_SBC X11 X11 X5 *)
  0xab0c0108;       (* arm_ADDS X8 X8 X12 *)
  0xba0d0129;       (* arm_ADCS X9 X9 X13 *)
  0xba0e014a;       (* arm_ADCS X10 X10 X14 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0xda9f33e2;       (* arm_CSETM X2 Condition_CS *)
  0xeb020108;       (* arm_SUBS X8 X8 X2 *)
  0x92607c43;       (* arm_AND X3 X2 (rvalue (word 18446744069414584320)) *)
  0xfa030129;       (* arm_SBCS X9 X9 X3 *)
  0x925ff845;       (* arm_AND X5 X2 (rvalue (word 18446744069414584319)) *)
  0xfa02014a;       (* arm_SBCS X10 X10 X2 *)
  0xda05016b;       (* arm_SBC X11 X11 X5 *)
  0xa90627e8;       (* arm_STP X8 X9 SP (Immediate_Offset (iword (&96))) *)
  0xa9072fea;       (* arm_STP X10 X11 SP (Immediate_Offset (iword (&112))) *)
  0xa9420fe2;       (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&32))) *)
  0x9b037c49;       (* arm_MUL X9 X2 X3 *)
  0x9bc37c4a;       (* arm_UMULH X10 X2 X3 *)
  0xa94317e4;       (* arm_LDP X4 X5 SP (Immediate_Offset (iword (&48))) *)
  0x9b057c4b;       (* arm_MUL X11 X2 X5 *)
  0x9bc57c4c;       (* arm_UMULH X12 X2 X5 *)
  0x9b047c46;       (* arm_MUL X6 X2 X4 *)
  0x9bc47c47;       (* arm_UMULH X7 X2 X4 *)
  0xab06014a;       (* arm_ADDS X10 X10 X6 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9b047c66;       (* arm_MUL X6 X3 X4 *)
  0x9bc47c67;       (* arm_UMULH X7 X3 X4 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06016b;       (* arm_ADDS X11 X11 X6 *)
  0x9b057c8d;       (* arm_MUL X13 X4 X5 *)
  0x9bc57c8e;       (* arm_UMULH X14 X4 X5 *)
  0xba07018c;       (* arm_ADCS X12 X12 X7 *)
  0x9b057c66;       (* arm_MUL X6 X3 X5 *)
  0x9bc57c67;       (* arm_UMULH X7 X3 X5 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06018c;       (* arm_ADDS X12 X12 X6 *)
  0xba0701ad;       (* arm_ADCS X13 X13 X7 *)
  0x9a1f01ce;       (* arm_ADC X14 X14 XZR *)
  0xab090129;       (* arm_ADDS X9 X9 X9 *)
  0xba0a014a;       (* arm_ADCS X10 X10 X10 *)
  0xba0b016b;       (* arm_ADCS X11 X11 X11 *)
  0xba0c018c;       (* arm_ADCS X12 X12 X12 *)
  0xba0d01ad;       (* arm_ADCS X13 X13 X13 *)
  0xba0e01ce;       (* arm_ADCS X14 X14 X14 *)
  0x9a9f37e7;       (* arm_CSET X7 Condition_CS *)
  0x9bc27c46;       (* arm_UMULH X6 X2 X2 *)
  0x9b027c48;       (* arm_MUL X8 X2 X2 *)
  0xab060129;       (* arm_ADDS X9 X9 X6 *)
  0x9b037c66;       (* arm_MUL X6 X3 X3 *)
  0xba06014a;       (* arm_ADCS X10 X10 X6 *)
  0x9bc37c66;       (* arm_UMULH X6 X3 X3 *)
  0xba06016b;       (* arm_ADCS X11 X11 X6 *)
  0x9b047c86;       (* arm_MUL X6 X4 X4 *)
  0xba06018c;       (* arm_ADCS X12 X12 X6 *)
  0x9bc47c86;       (* arm_UMULH X6 X4 X4 *)
  0xba0601ad;       (* arm_ADCS X13 X13 X6 *)
  0x9b057ca6;       (* arm_MUL X6 X5 X5 *)
  0xba0601ce;       (* arm_ADCS X14 X14 X6 *)
  0x9bc57ca6;       (* arm_UMULH X6 X5 X5 *)
  0x9a0600e7;       (* arm_ADC X7 X7 X6 *)
  0xd3607d04;       (* arm_LSL X4 X8 32 *)
  0xd360fd05;       (* arm_LSR X5 X8 32 *)
  0xeb080082;       (* arm_SUBS X2 X4 X8 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020129;       (* arm_SUBS X9 X9 X2 *)
  0xfa03014a;       (* arm_SBCS X10 X10 X3 *)
  0xfa04016b;       (* arm_SBCS X11 X11 X4 *)
  0xda050108;       (* arm_SBC X8 X8 X5 *)
  0xd3607d24;       (* arm_LSL X4 X9 32 *)
  0xd360fd25;       (* arm_LSR X5 X9 32 *)
  0xeb090082;       (* arm_SUBS X2 X4 X9 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02014a;       (* arm_SUBS X10 X10 X2 *)
  0xfa03016b;       (* arm_SBCS X11 X11 X3 *)
  0xfa040108;       (* arm_SBCS X8 X8 X4 *)
  0xda050129;       (* arm_SBC X9 X9 X5 *)
  0xd3607d44;       (* arm_LSL X4 X10 32 *)
  0xd360fd45;       (* arm_LSR X5 X10 32 *)
  0xeb0a0082;       (* arm_SUBS X2 X4 X10 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02016b;       (* arm_SUBS X11 X11 X2 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xfa040129;       (* arm_SBCS X9 X9 X4 *)
  0xda05014a;       (* arm_SBC X10 X10 X5 *)
  0xd3607d64;       (* arm_LSL X4 X11 32 *)
  0xd360fd65;       (* arm_LSR X5 X11 32 *)
  0xeb0b0082;       (* arm_SUBS X2 X4 X11 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020108;       (* arm_SUBS X8 X8 X2 *)
  0xfa030129;       (* arm_SBCS X9 X9 X3 *)
  0xfa04014a;       (* arm_SBCS X10 X10 X4 *)
  0xda05016b;       (* arm_SBC X11 X11 X5 *)
  0xab0c0108;       (* arm_ADDS X8 X8 X12 *)
  0xba0d0129;       (* arm_ADCS X9 X9 X13 *)
  0xba0e014a;       (* arm_ADCS X10 X10 X14 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9a9f37e2;       (* arm_CSET X2 Condition_CS *)
  0xb2607fe3;       (* arm_MOV X3 (rvalue (word 18446744069414584320)) *)
  0x92c00025;       (* arm_MOVN X5 (word 1) 32 *)
  0xb100050c;       (* arm_ADDS X12 X8 (rvalue (word 1)) *)
  0xfa03012d;       (* arm_SBCS X13 X9 X3 *)
  0xba1f014e;       (* arm_ADCS X14 X10 XZR *)
  0xfa050167;       (* arm_SBCS X7 X11 X5 *)
  0xfa1f005f;       (* arm_SBCS XZR X2 XZR *)
  0x9a8c3108;       (* arm_CSEL X8 X8 X12 Condition_CC *)
  0x9a8d3129;       (* arm_CSEL X9 X9 X13 Condition_CC *)
  0x9a8e314a;       (* arm_CSEL X10 X10 X14 Condition_CC *)
  0x9a87316b;       (* arm_CSEL X11 X11 X7 Condition_CC *)
  0xa90027e8;       (* arm_STP X8 X9 SP (Immediate_Offset (iword (&0))) *)
  0xa9012fea;       (* arm_STP X10 X11 SP (Immediate_Offset (iword (&16))) *)
  0xa94613e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&96))) *)
  0xa94823e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&128))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9492be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&144))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa9471be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&112))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90837ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&128))) *)
  0xa90903ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&144))) *)
  0xa94613e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&96))) *)
  0xa94423e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&64))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9452be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&80))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa9471be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&112))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90437ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&64))) *)
  0xa90503ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&80))) *)
  0xa9401be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&0))) *)
  0xa9480fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&128))) *)
  0xeb0400a5;       (* arm_SUBS X5 X5 X4 *)
  0xfa0300c6;       (* arm_SBCS X6 X6 X3 *)
  0xa94123e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&16))) *)
  0xa9490fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&144))) *)
  0xfa0400e7;       (* arm_SBCS X7 X7 X4 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xda9f23e3;       (* arm_CSETM X3 Condition_CC *)
  0xab0300a5;       (* arm_ADDS X5 X5 X3 *)
  0x92607c64;       (* arm_AND X4 X3 (rvalue (word 18446744069414584320)) *)
  0xba0400c6;       (* arm_ADCS X6 X6 X4 *)
  0xba0300e7;       (* arm_ADCS X7 X7 X3 *)
  0x925ff864;       (* arm_AND X4 X3 (rvalue (word 18446744069414584319)) *)
  0x9a040108;       (* arm_ADC X8 X8 X4 *)
  0xa9001be5;       (* arm_STP X5 X6 SP (Immediate_Offset (iword (&0))) *)
  0xa90123e7;       (* arm_STP X7 X8 SP (Immediate_Offset (iword (&16))) *)
  0xa9441be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&64))) *)
  0xa9480fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&128))) *)
  0xeb0400a5;       (* arm_SUBS X5 X5 X4 *)
  0xfa0300c6;       (* arm_SBCS X6 X6 X3 *)
  0xa94523e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  0xa9490fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&144))) *)
  0xfa0400e7;       (* arm_SBCS X7 X7 X4 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xda9f23e3;       (* arm_CSETM X3 Condition_CC *)
  0xab0300a5;       (* arm_ADDS X5 X5 X3 *)
  0x92607c64;       (* arm_AND X4 X3 (rvalue (word 18446744069414584320)) *)
  0xba0400c6;       (* arm_ADCS X6 X6 X4 *)
  0xba0300e7;       (* arm_ADCS X7 X7 X3 *)
  0x925ff864;       (* arm_AND X4 X3 (rvalue (word 18446744069414584319)) *)
  0x9a040108;       (* arm_ADC X8 X8 X4 *)
  0xa9061be5;       (* arm_STP X5 X6 SP (Immediate_Offset (iword (&96))) *)
  0xa90723e7;       (* arm_STP X7 X8 SP (Immediate_Offset (iword (&112))) *)
  0xa94a13e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&160))) *)
  0xa9442207;       (* arm_LDP X7 X8 X16 (Immediate_Offset (iword (&64))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9452a09;       (* arm_LDP X9 X10 X16 (Immediate_Offset (iword (&80))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa94b1be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&176))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90a37ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&160))) *)
  0xa90b03ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&176))) *)
  0xa9401be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&0))) *)
  0xa9440fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&64))) *)
  0xeb0400a5;       (* arm_SUBS X5 X5 X4 *)
  0xfa0300c6;       (* arm_SBCS X6 X6 X3 *)
  0xa94123e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&16))) *)
  0xa9450fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&80))) *)
  0xfa0400e7;       (* arm_SBCS X7 X7 X4 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xda9f23e3;       (* arm_CSETM X3 Condition_CC *)
  0xab0300a5;       (* arm_ADDS X5 X5 X3 *)
  0x92607c64;       (* arm_AND X4 X3 (rvalue (word 18446744069414584320)) *)
  0xba0400c6;       (* arm_ADCS X6 X6 X4 *)
  0xba0300e7;       (* arm_ADCS X7 X7 X3 *)
  0x925ff864;       (* arm_AND X4 X3 (rvalue (word 18446744069414584319)) *)
  0x9a040108;       (* arm_ADC X8 X8 X4 *)
  0xa9001be5;       (* arm_STP X5 X6 SP (Immediate_Offset (iword (&0))) *)
  0xa90123e7;       (* arm_STP X7 X8 SP (Immediate_Offset (iword (&16))) *)
  0xa9481be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&128))) *)
  0xa9400fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&0))) *)
  0xeb0400a5;       (* arm_SUBS X5 X5 X4 *)
  0xfa0300c6;       (* arm_SBCS X6 X6 X3 *)
  0xa94923e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&144))) *)
  0xa9410fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&16))) *)
  0xfa0400e7;       (* arm_SBCS X7 X7 X4 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xda9f23e3;       (* arm_CSETM X3 Condition_CC *)
  0xab0300a5;       (* arm_ADDS X5 X5 X3 *)
  0x92607c64;       (* arm_AND X4 X3 (rvalue (word 18446744069414584320)) *)
  0xba0400c6;       (* arm_ADCS X6 X6 X4 *)
  0xba0300e7;       (* arm_ADCS X7 X7 X3 *)
  0x925ff864;       (* arm_AND X4 X3 (rvalue (word 18446744069414584319)) *)
  0x9a040108;       (* arm_ADC X8 X8 X4 *)
  0xa9081be5;       (* arm_STP X5 X6 SP (Immediate_Offset (iword (&128))) *)
  0xa90923e7;       (* arm_STP X7 X8 SP (Immediate_Offset (iword (&144))) *)
  0xa94613e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&96))) *)
  0xa94c23e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&192))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa94d2be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&208))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa9471be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&112))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90637ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&96))) *)
  0xa90703ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&112))) *)
  0xa94a13e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&160))) *)
  0xa9442227;       (* arm_LDP X7 X8 X17 (Immediate_Offset (iword (&64))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9452a29;       (* arm_LDP X9 X10 X17 (Immediate_Offset (iword (&80))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa94b1be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&176))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90a37ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&160))) *)
  0xa90b03ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&176))) *)
  0xa94213e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&32))) *)
  0xa94823e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&128))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9492be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&144))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa9431be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&48))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90837ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&128))) *)
  0xa90903ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&144))) *)
  0xa9481be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&128))) *)
  0xa9460fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&96))) *)
  0xeb0400a5;       (* arm_SUBS X5 X5 X4 *)
  0xfa0300c6;       (* arm_SBCS X6 X6 X3 *)
  0xa94923e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&144))) *)
  0xa9470fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&112))) *)
  0xfa0400e7;       (* arm_SBCS X7 X7 X4 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xda9f23e3;       (* arm_CSETM X3 Condition_CC *)
  0xab0300a5;       (* arm_ADDS X5 X5 X3 *)
  0x92607c64;       (* arm_AND X4 X3 (rvalue (word 18446744069414584320)) *)
  0xba0400c6;       (* arm_ADCS X6 X6 X4 *)
  0xba0300e7;       (* arm_ADCS X7 X7 X3 *)
  0x925ff864;       (* arm_AND X4 X3 (rvalue (word 18446744069414584319)) *)
  0x9a040108;       (* arm_ADC X8 X8 X4 *)
  0xa9081be5;       (* arm_STP X5 X6 SP (Immediate_Offset (iword (&128))) *)
  0xa90923e7;       (* arm_STP X7 X8 SP (Immediate_Offset (iword (&144))) *)
  0xa9440600;       (* arm_LDP X0 X1 X16 (Immediate_Offset (iword (&64))) *)
  0xa9450e02;       (* arm_LDP X2 X3 X16 (Immediate_Offset (iword (&80))) *)
  0xaa01000c;       (* arm_ORR X12 X0 X1 *)
  0xaa03004d;       (* arm_ORR X13 X2 X3 *)
  0xaa0d018c;       (* arm_ORR X12 X12 X13 *)
  0xeb1f019f;       (* arm_CMP X12 XZR *)
  0x9a9f07ec;       (* arm_CSET X12 Condition_NE *)
  0xa9441624;       (* arm_LDP X4 X5 X17 (Immediate_Offset (iword (&64))) *)
  0xa9451e26;       (* arm_LDP X6 X7 X17 (Immediate_Offset (iword (&80))) *)
  0xaa05008d;       (* arm_ORR X13 X4 X5 *)
  0xaa0700ce;       (* arm_ORR X14 X6 X7 *)
  0xaa0e01ad;       (* arm_ORR X13 X13 X14 *)
  0xeb1f01bf;       (* arm_CMP X13 XZR *)
  0x9a9f07ed;       (* arm_CSET X13 Condition_NE *)
  0xeb0c01bf;       (* arm_CMP X13 X12 *)
  0xa94a27e8;       (* arm_LDP X8 X9 SP (Immediate_Offset (iword (&160))) *)
  0x9a883008;       (* arm_CSEL X8 X0 X8 Condition_CC *)
  0x9a893029;       (* arm_CSEL X9 X1 X9 Condition_CC *)
  0x9a888088;       (* arm_CSEL X8 X4 X8 Condition_HI *)
  0x9a8980a9;       (* arm_CSEL X9 X5 X9 Condition_HI *)
  0xa94b2fea;       (* arm_LDP X10 X11 SP (Immediate_Offset (iword (&176))) *)
  0x9a8a304a;       (* arm_CSEL X10 X2 X10 Condition_CC *)
  0x9a8b306b;       (* arm_CSEL X11 X3 X11 Condition_CC *)
  0x9a8a80ca;       (* arm_CSEL X10 X6 X10 Condition_HI *)
  0x9a8b80eb;       (* arm_CSEL X11 X7 X11 Condition_HI *)
  0xa940360c;       (* arm_LDP X12 X13 X16 (Immediate_Offset (iword (&0))) *)
  0xa94007e0;       (* arm_LDP X0 X1 SP (Immediate_Offset (iword (&0))) *)
  0x9a803180;       (* arm_CSEL X0 X12 X0 Condition_CC *)
  0x9a8131a1;       (* arm_CSEL X1 X13 X1 Condition_CC *)
  0xa940362c;       (* arm_LDP X12 X13 X17 (Immediate_Offset (iword (&0))) *)
  0x9a808180;       (* arm_CSEL X0 X12 X0 Condition_HI *)
  0x9a8181a1;       (* arm_CSEL X1 X13 X1 Condition_HI *)
  0xa941360c;       (* arm_LDP X12 X13 X16 (Immediate_Offset (iword (&16))) *)
  0xa9410fe2;       (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&16))) *)
  0x9a823182;       (* arm_CSEL X2 X12 X2 Condition_CC *)
  0x9a8331a3;       (* arm_CSEL X3 X13 X3 Condition_CC *)
  0xa941362c;       (* arm_LDP X12 X13 X17 (Immediate_Offset (iword (&16))) *)
  0x9a828182;       (* arm_CSEL X2 X12 X2 Condition_HI *)
  0x9a8381a3;       (* arm_CSEL X3 X13 X3 Condition_HI *)
  0xa942360c;       (* arm_LDP X12 X13 X16 (Immediate_Offset (iword (&32))) *)
  0xa94817e4;       (* arm_LDP X4 X5 SP (Immediate_Offset (iword (&128))) *)
  0x9a843184;       (* arm_CSEL X4 X12 X4 Condition_CC *)
  0x9a8531a5;       (* arm_CSEL X5 X13 X5 Condition_CC *)
  0xa942362c;       (* arm_LDP X12 X13 X17 (Immediate_Offset (iword (&32))) *)
  0x9a848184;       (* arm_CSEL X4 X12 X4 Condition_HI *)
  0x9a8581a5;       (* arm_CSEL X5 X13 X5 Condition_HI *)
  0xa943360c;       (* arm_LDP X12 X13 X16 (Immediate_Offset (iword (&48))) *)
  0xa9491fe6;       (* arm_LDP X6 X7 SP (Immediate_Offset (iword (&144))) *)
  0x9a863186;       (* arm_CSEL X6 X12 X6 Condition_CC *)
  0x9a8731a7;       (* arm_CSEL X7 X13 X7 Condition_CC *)
  0xa943362c;       (* arm_LDP X12 X13 X17 (Immediate_Offset (iword (&48))) *)
  0x9a868186;       (* arm_CSEL X6 X12 X6 Condition_HI *)
  0x9a8781a7;       (* arm_CSEL X7 X13 X7 Condition_HI *)
  0xa90005e0;       (* arm_STP X0 X1 X15 (Immediate_Offset (iword (&0))) *)
  0xa9010de2;       (* arm_STP X2 X3 X15 (Immediate_Offset (iword (&16))) *)
  0xa90215e4;       (* arm_STP X4 X5 X15 (Immediate_Offset (iword (&32))) *)
  0xa9031de6;       (* arm_STP X6 X7 X15 (Immediate_Offset (iword (&48))) *)
  0xa90425e8;       (* arm_STP X8 X9 X15 (Immediate_Offset (iword (&64))) *)
  0xa9052dea;       (* arm_STP X10 X11 X15 (Immediate_Offset (iword (&80))) *)
  0x910383ff;       (* arm_ADD SP SP (rvalue (word 224)) *)
  0xd65f03c0;       (* arm_RET X30 *)
  0xd10303ff;       (* arm_SUB SP SP (rvalue (word 192)) *)
  0xaa0003ef;       (* arm_MOV X15 X0 *)
  0xaa0103f0;       (* arm_MOV X16 X1 *)
  0xa9440e02;       (* arm_LDP X2 X3 X16 (Immediate_Offset (iword (&64))) *)
  0x9b037c49;       (* arm_MUL X9 X2 X3 *)
  0x9bc37c4a;       (* arm_UMULH X10 X2 X3 *)
  0xa9451604;       (* arm_LDP X4 X5 X16 (Immediate_Offset (iword (&80))) *)
  0x9b057c4b;       (* arm_MUL X11 X2 X5 *)
  0x9bc57c4c;       (* arm_UMULH X12 X2 X5 *)
  0x9b047c46;       (* arm_MUL X6 X2 X4 *)
  0x9bc47c47;       (* arm_UMULH X7 X2 X4 *)
  0xab06014a;       (* arm_ADDS X10 X10 X6 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9b047c66;       (* arm_MUL X6 X3 X4 *)
  0x9bc47c67;       (* arm_UMULH X7 X3 X4 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06016b;       (* arm_ADDS X11 X11 X6 *)
  0x9b057c8d;       (* arm_MUL X13 X4 X5 *)
  0x9bc57c8e;       (* arm_UMULH X14 X4 X5 *)
  0xba07018c;       (* arm_ADCS X12 X12 X7 *)
  0x9b057c66;       (* arm_MUL X6 X3 X5 *)
  0x9bc57c67;       (* arm_UMULH X7 X3 X5 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06018c;       (* arm_ADDS X12 X12 X6 *)
  0xba0701ad;       (* arm_ADCS X13 X13 X7 *)
  0x9a1f01ce;       (* arm_ADC X14 X14 XZR *)
  0xab090129;       (* arm_ADDS X9 X9 X9 *)
  0xba0a014a;       (* arm_ADCS X10 X10 X10 *)
  0xba0b016b;       (* arm_ADCS X11 X11 X11 *)
  0xba0c018c;       (* arm_ADCS X12 X12 X12 *)
  0xba0d01ad;       (* arm_ADCS X13 X13 X13 *)
  0xba0e01ce;       (* arm_ADCS X14 X14 X14 *)
  0x9a9f37e7;       (* arm_CSET X7 Condition_CS *)
  0x9bc27c46;       (* arm_UMULH X6 X2 X2 *)
  0x9b027c48;       (* arm_MUL X8 X2 X2 *)
  0xab060129;       (* arm_ADDS X9 X9 X6 *)
  0x9b037c66;       (* arm_MUL X6 X3 X3 *)
  0xba06014a;       (* arm_ADCS X10 X10 X6 *)
  0x9bc37c66;       (* arm_UMULH X6 X3 X3 *)
  0xba06016b;       (* arm_ADCS X11 X11 X6 *)
  0x9b047c86;       (* arm_MUL X6 X4 X4 *)
  0xba06018c;       (* arm_ADCS X12 X12 X6 *)
  0x9bc47c86;       (* arm_UMULH X6 X4 X4 *)
  0xba0601ad;       (* arm_ADCS X13 X13 X6 *)
  0x9b057ca6;       (* arm_MUL X6 X5 X5 *)
  0xba0601ce;       (* arm_ADCS X14 X14 X6 *)
  0x9bc57ca6;       (* arm_UMULH X6 X5 X5 *)
  0x9a0600e7;       (* arm_ADC X7 X7 X6 *)
  0xd3607d04;       (* arm_LSL X4 X8 32 *)
  0xd360fd05;       (* arm_LSR X5 X8 32 *)
  0xeb080082;       (* arm_SUBS X2 X4 X8 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020129;       (* arm_SUBS X9 X9 X2 *)
  0xfa03014a;       (* arm_SBCS X10 X10 X3 *)
  0xfa04016b;       (* arm_SBCS X11 X11 X4 *)
  0xda050108;       (* arm_SBC X8 X8 X5 *)
  0xd3607d24;       (* arm_LSL X4 X9 32 *)
  0xd360fd25;       (* arm_LSR X5 X9 32 *)
  0xeb090082;       (* arm_SUBS X2 X4 X9 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02014a;       (* arm_SUBS X10 X10 X2 *)
  0xfa03016b;       (* arm_SBCS X11 X11 X3 *)
  0xfa040108;       (* arm_SBCS X8 X8 X4 *)
  0xda050129;       (* arm_SBC X9 X9 X5 *)
  0xd3607d44;       (* arm_LSL X4 X10 32 *)
  0xd360fd45;       (* arm_LSR X5 X10 32 *)
  0xeb0a0082;       (* arm_SUBS X2 X4 X10 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02016b;       (* arm_SUBS X11 X11 X2 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xfa040129;       (* arm_SBCS X9 X9 X4 *)
  0xda05014a;       (* arm_SBC X10 X10 X5 *)
  0xd3607d64;       (* arm_LSL X4 X11 32 *)
  0xd360fd65;       (* arm_LSR X5 X11 32 *)
  0xeb0b0082;       (* arm_SUBS X2 X4 X11 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020108;       (* arm_SUBS X8 X8 X2 *)
  0xfa030129;       (* arm_SBCS X9 X9 X3 *)
  0xfa04014a;       (* arm_SBCS X10 X10 X4 *)
  0xda05016b;       (* arm_SBC X11 X11 X5 *)
  0xab0c0108;       (* arm_ADDS X8 X8 X12 *)
  0xba0d0129;       (* arm_ADCS X9 X9 X13 *)
  0xba0e014a;       (* arm_ADCS X10 X10 X14 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9a9f37e2;       (* arm_CSET X2 Condition_CS *)
  0xb2607fe3;       (* arm_MOV X3 (rvalue (word 18446744069414584320)) *)
  0x92c00025;       (* arm_MOVN X5 (word 1) 32 *)
  0xb100050c;       (* arm_ADDS X12 X8 (rvalue (word 1)) *)
  0xfa03012d;       (* arm_SBCS X13 X9 X3 *)
  0xba1f014e;       (* arm_ADCS X14 X10 XZR *)
  0xfa050167;       (* arm_SBCS X7 X11 X5 *)
  0xfa1f005f;       (* arm_SBCS XZR X2 XZR *)
  0x9a8c3108;       (* arm_CSEL X8 X8 X12 Condition_CC *)
  0x9a8d3129;       (* arm_CSEL X9 X9 X13 Condition_CC *)
  0x9a8e314a;       (* arm_CSEL X10 X10 X14 Condition_CC *)
  0x9a87316b;       (* arm_CSEL X11 X11 X7 Condition_CC *)
  0xa90027e8;       (* arm_STP X8 X9 SP (Immediate_Offset (iword (&0))) *)
  0xa9012fea;       (* arm_STP X10 X11 SP (Immediate_Offset (iword (&16))) *)
  0xa9420e02;       (* arm_LDP X2 X3 X16 (Immediate_Offset (iword (&32))) *)
  0x9b037c49;       (* arm_MUL X9 X2 X3 *)
  0x9bc37c4a;       (* arm_UMULH X10 X2 X3 *)
  0xa9431604;       (* arm_LDP X4 X5 X16 (Immediate_Offset (iword (&48))) *)
  0x9b057c4b;       (* arm_MUL X11 X2 X5 *)
  0x9bc57c4c;       (* arm_UMULH X12 X2 X5 *)
  0x9b047c46;       (* arm_MUL X6 X2 X4 *)
  0x9bc47c47;       (* arm_UMULH X7 X2 X4 *)
  0xab06014a;       (* arm_ADDS X10 X10 X6 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9b047c66;       (* arm_MUL X6 X3 X4 *)
  0x9bc47c67;       (* arm_UMULH X7 X3 X4 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06016b;       (* arm_ADDS X11 X11 X6 *)
  0x9b057c8d;       (* arm_MUL X13 X4 X5 *)
  0x9bc57c8e;       (* arm_UMULH X14 X4 X5 *)
  0xba07018c;       (* arm_ADCS X12 X12 X7 *)
  0x9b057c66;       (* arm_MUL X6 X3 X5 *)
  0x9bc57c67;       (* arm_UMULH X7 X3 X5 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06018c;       (* arm_ADDS X12 X12 X6 *)
  0xba0701ad;       (* arm_ADCS X13 X13 X7 *)
  0x9a1f01ce;       (* arm_ADC X14 X14 XZR *)
  0xab090129;       (* arm_ADDS X9 X9 X9 *)
  0xba0a014a;       (* arm_ADCS X10 X10 X10 *)
  0xba0b016b;       (* arm_ADCS X11 X11 X11 *)
  0xba0c018c;       (* arm_ADCS X12 X12 X12 *)
  0xba0d01ad;       (* arm_ADCS X13 X13 X13 *)
  0xba0e01ce;       (* arm_ADCS X14 X14 X14 *)
  0x9a9f37e7;       (* arm_CSET X7 Condition_CS *)
  0x9bc27c46;       (* arm_UMULH X6 X2 X2 *)
  0x9b027c48;       (* arm_MUL X8 X2 X2 *)
  0xab060129;       (* arm_ADDS X9 X9 X6 *)
  0x9b037c66;       (* arm_MUL X6 X3 X3 *)
  0xba06014a;       (* arm_ADCS X10 X10 X6 *)
  0x9bc37c66;       (* arm_UMULH X6 X3 X3 *)
  0xba06016b;       (* arm_ADCS X11 X11 X6 *)
  0x9b047c86;       (* arm_MUL X6 X4 X4 *)
  0xba06018c;       (* arm_ADCS X12 X12 X6 *)
  0x9bc47c86;       (* arm_UMULH X6 X4 X4 *)
  0xba0601ad;       (* arm_ADCS X13 X13 X6 *)
  0x9b057ca6;       (* arm_MUL X6 X5 X5 *)
  0xba0601ce;       (* arm_ADCS X14 X14 X6 *)
  0x9bc57ca6;       (* arm_UMULH X6 X5 X5 *)
  0x9a0600e7;       (* arm_ADC X7 X7 X6 *)
  0xd3607d04;       (* arm_LSL X4 X8 32 *)
  0xd360fd05;       (* arm_LSR X5 X8 32 *)
  0xeb080082;       (* arm_SUBS X2 X4 X8 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020129;       (* arm_SUBS X9 X9 X2 *)
  0xfa03014a;       (* arm_SBCS X10 X10 X3 *)
  0xfa04016b;       (* arm_SBCS X11 X11 X4 *)
  0xda050108;       (* arm_SBC X8 X8 X5 *)
  0xd3607d24;       (* arm_LSL X4 X9 32 *)
  0xd360fd25;       (* arm_LSR X5 X9 32 *)
  0xeb090082;       (* arm_SUBS X2 X4 X9 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02014a;       (* arm_SUBS X10 X10 X2 *)
  0xfa03016b;       (* arm_SBCS X11 X11 X3 *)
  0xfa040108;       (* arm_SBCS X8 X8 X4 *)
  0xda050129;       (* arm_SBC X9 X9 X5 *)
  0xd3607d44;       (* arm_LSL X4 X10 32 *)
  0xd360fd45;       (* arm_LSR X5 X10 32 *)
  0xeb0a0082;       (* arm_SUBS X2 X4 X10 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02016b;       (* arm_SUBS X11 X11 X2 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xfa040129;       (* arm_SBCS X9 X9 X4 *)
  0xda05014a;       (* arm_SBC X10 X10 X5 *)
  0xd3607d64;       (* arm_LSL X4 X11 32 *)
  0xd360fd65;       (* arm_LSR X5 X11 32 *)
  0xeb0b0082;       (* arm_SUBS X2 X4 X11 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020108;       (* arm_SUBS X8 X8 X2 *)
  0xfa030129;       (* arm_SBCS X9 X9 X3 *)
  0xfa04014a;       (* arm_SBCS X10 X10 X4 *)
  0xda05016b;       (* arm_SBC X11 X11 X5 *)
  0xab0c0108;       (* arm_ADDS X8 X8 X12 *)
  0xba0d0129;       (* arm_ADCS X9 X9 X13 *)
  0xba0e014a;       (* arm_ADCS X10 X10 X14 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9a9f37e2;       (* arm_CSET X2 Condition_CS *)
  0xb2607fe3;       (* arm_MOV X3 (rvalue (word 18446744069414584320)) *)
  0x92c00025;       (* arm_MOVN X5 (word 1) 32 *)
  0xb100050c;       (* arm_ADDS X12 X8 (rvalue (word 1)) *)
  0xfa03012d;       (* arm_SBCS X13 X9 X3 *)
  0xba1f014e;       (* arm_ADCS X14 X10 XZR *)
  0xfa050167;       (* arm_SBCS X7 X11 X5 *)
  0xfa1f005f;       (* arm_SBCS XZR X2 XZR *)
  0x9a8c3108;       (* arm_CSEL X8 X8 X12 Condition_CC *)
  0x9a8d3129;       (* arm_CSEL X9 X9 X13 Condition_CC *)
  0x9a8e314a;       (* arm_CSEL X10 X10 X14 Condition_CC *)
  0x9a87316b;       (* arm_CSEL X11 X11 X7 Condition_CC *)
  0xa90227e8;       (* arm_STP X8 X9 SP (Immediate_Offset (iword (&32))) *)
  0xa9032fea;       (* arm_STP X10 X11 SP (Immediate_Offset (iword (&48))) *)
  0xa9401a05;       (* arm_LDP X5 X6 X16 (Immediate_Offset (iword (&0))) *)
  0xa9400fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&0))) *)
  0xeb0400a5;       (* arm_SUBS X5 X5 X4 *)
  0xfa0300c6;       (* arm_SBCS X6 X6 X3 *)
  0xa9412207;       (* arm_LDP X7 X8 X16 (Immediate_Offset (iword (&16))) *)
  0xa9410fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&16))) *)
  0xfa0400e7;       (* arm_SBCS X7 X7 X4 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xda9f23e3;       (* arm_CSETM X3 Condition_CC *)
  0xab0300a5;       (* arm_ADDS X5 X5 X3 *)
  0x92607c64;       (* arm_AND X4 X3 (rvalue (word 18446744069414584320)) *)
  0xba0400c6;       (* arm_ADCS X6 X6 X4 *)
  0xba0300e7;       (* arm_ADCS X7 X7 X3 *)
  0x925ff864;       (* arm_AND X4 X3 (rvalue (word 18446744069414584319)) *)
  0x9a040108;       (* arm_ADC X8 X8 X4 *)
  0xa9061be5;       (* arm_STP X5 X6 SP (Immediate_Offset (iword (&96))) *)
  0xa90723e7;       (* arm_STP X7 X8 SP (Immediate_Offset (iword (&112))) *)
  0xa9401604;       (* arm_LDP X4 X5 X16 (Immediate_Offset (iword (&0))) *)
  0xa94027e8;       (* arm_LDP X8 X9 SP (Immediate_Offset (iword (&0))) *)
  0xab080084;       (* arm_ADDS X4 X4 X8 *)
  0xba0900a5;       (* arm_ADCS X5 X5 X9 *)
  0xa9411e06;       (* arm_LDP X6 X7 X16 (Immediate_Offset (iword (&16))) *)
  0xa9412fea;       (* arm_LDP X10 X11 SP (Immediate_Offset (iword (&16))) *)
  0xba0a00c6;       (* arm_ADCS X6 X6 X10 *)
  0xba0b00e7;       (* arm_ADCS X7 X7 X11 *)
  0xda9f33e2;       (* arm_CSETM X2 Condition_CS *)
  0xeb020084;       (* arm_SUBS X4 X4 X2 *)
  0x92607c43;       (* arm_AND X3 X2 (rvalue (word 18446744069414584320)) *)
  0xfa0300a5;       (* arm_SBCS X5 X5 X3 *)
  0x925ff841;       (* arm_AND X1 X2 (rvalue (word 18446744069414584319)) *)
  0xfa0200c6;       (* arm_SBCS X6 X6 X2 *)
  0xda0100e7;       (* arm_SBC X7 X7 X1 *)
  0xa90417e4;       (* arm_STP X4 X5 SP (Immediate_Offset (iword (&64))) *)
  0xa9051fe6;       (* arm_STP X6 X7 SP (Immediate_Offset (iword (&80))) *)
  0xa94413e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&64))) *)
  0xa94623e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&96))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9472be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&112))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa9451be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&80))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90637ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&96))) *)
  0xa90703ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&112))) *)
  0xa9421604;       (* arm_LDP X4 X5 X16 (Immediate_Offset (iword (&32))) *)
  0xa9442608;       (* arm_LDP X8 X9 X16 (Immediate_Offset (iword (&64))) *)
  0xab080084;       (* arm_ADDS X4 X4 X8 *)
  0xba0900a5;       (* arm_ADCS X5 X5 X9 *)
  0xa9431e06;       (* arm_LDP X6 X7 X16 (Immediate_Offset (iword (&48))) *)
  0xa9452e0a;       (* arm_LDP X10 X11 X16 (Immediate_Offset (iword (&80))) *)
  0xba0a00c6;       (* arm_ADCS X6 X6 X10 *)
  0xba0b00e7;       (* arm_ADCS X7 X7 X11 *)
  0x9a1f03e3;       (* arm_ADC X3 XZR XZR *)
  0xb1000488;       (* arm_ADDS X8 X4 (rvalue (word 1)) *)
  0xb2607fe9;       (* arm_MOV X9 (rvalue (word 18446744069414584320)) *)
  0xfa0900a9;       (* arm_SBCS X9 X5 X9 *)
  0xba1f00ca;       (* arm_ADCS X10 X6 XZR *)
  0x92c0002b;       (* arm_MOVN X11 (word 1) 32 *)
  0xfa0b00eb;       (* arm_SBCS X11 X7 X11 *)
  0xfa1f0063;       (* arm_SBCS X3 X3 XZR *)
  0x9a883084;       (* arm_CSEL X4 X4 X8 Condition_CC *)
  0x9a8930a5;       (* arm_CSEL X5 X5 X9 Condition_CC *)
  0x9a8a30c6;       (* arm_CSEL X6 X6 X10 Condition_CC *)
  0x9a8b30e7;       (* arm_CSEL X7 X7 X11 Condition_CC *)
  0xa90417e4;       (* arm_STP X4 X5 SP (Immediate_Offset (iword (&64))) *)
  0xa9051fe6;       (* arm_STP X6 X7 SP (Immediate_Offset (iword (&80))) *)
  0xa9401203;       (* arm_LDP X3 X4 X16 (Immediate_Offset (iword (&0))) *)
  0xa94223e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&32))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9432be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&48))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa9411a05;       (* arm_LDP X5 X6 X16 (Immediate_Offset (iword (&16))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90837ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&128))) *)
  0xa90903ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&144))) *)
  0xa9460fe2;       (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&96))) *)
  0x9b037c49;       (* arm_MUL X9 X2 X3 *)
  0x9bc37c4a;       (* arm_UMULH X10 X2 X3 *)
  0xa94717e4;       (* arm_LDP X4 X5 SP (Immediate_Offset (iword (&112))) *)
  0x9b057c4b;       (* arm_MUL X11 X2 X5 *)
  0x9bc57c4c;       (* arm_UMULH X12 X2 X5 *)
  0x9b047c46;       (* arm_MUL X6 X2 X4 *)
  0x9bc47c47;       (* arm_UMULH X7 X2 X4 *)
  0xab06014a;       (* arm_ADDS X10 X10 X6 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9b047c66;       (* arm_MUL X6 X3 X4 *)
  0x9bc47c67;       (* arm_UMULH X7 X3 X4 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06016b;       (* arm_ADDS X11 X11 X6 *)
  0x9b057c8d;       (* arm_MUL X13 X4 X5 *)
  0x9bc57c8e;       (* arm_UMULH X14 X4 X5 *)
  0xba07018c;       (* arm_ADCS X12 X12 X7 *)
  0x9b057c66;       (* arm_MUL X6 X3 X5 *)
  0x9bc57c67;       (* arm_UMULH X7 X3 X5 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06018c;       (* arm_ADDS X12 X12 X6 *)
  0xba0701ad;       (* arm_ADCS X13 X13 X7 *)
  0x9a1f01ce;       (* arm_ADC X14 X14 XZR *)
  0xab090129;       (* arm_ADDS X9 X9 X9 *)
  0xba0a014a;       (* arm_ADCS X10 X10 X10 *)
  0xba0b016b;       (* arm_ADCS X11 X11 X11 *)
  0xba0c018c;       (* arm_ADCS X12 X12 X12 *)
  0xba0d01ad;       (* arm_ADCS X13 X13 X13 *)
  0xba0e01ce;       (* arm_ADCS X14 X14 X14 *)
  0x9a9f37e7;       (* arm_CSET X7 Condition_CS *)
  0x9bc27c46;       (* arm_UMULH X6 X2 X2 *)
  0x9b027c48;       (* arm_MUL X8 X2 X2 *)
  0xab060129;       (* arm_ADDS X9 X9 X6 *)
  0x9b037c66;       (* arm_MUL X6 X3 X3 *)
  0xba06014a;       (* arm_ADCS X10 X10 X6 *)
  0x9bc37c66;       (* arm_UMULH X6 X3 X3 *)
  0xba06016b;       (* arm_ADCS X11 X11 X6 *)
  0x9b047c86;       (* arm_MUL X6 X4 X4 *)
  0xba06018c;       (* arm_ADCS X12 X12 X6 *)
  0x9bc47c86;       (* arm_UMULH X6 X4 X4 *)
  0xba0601ad;       (* arm_ADCS X13 X13 X6 *)
  0x9b057ca6;       (* arm_MUL X6 X5 X5 *)
  0xba0601ce;       (* arm_ADCS X14 X14 X6 *)
  0x9bc57ca6;       (* arm_UMULH X6 X5 X5 *)
  0x9a0600e7;       (* arm_ADC X7 X7 X6 *)
  0xd3607d04;       (* arm_LSL X4 X8 32 *)
  0xd360fd05;       (* arm_LSR X5 X8 32 *)
  0xeb080082;       (* arm_SUBS X2 X4 X8 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020129;       (* arm_SUBS X9 X9 X2 *)
  0xfa03014a;       (* arm_SBCS X10 X10 X3 *)
  0xfa04016b;       (* arm_SBCS X11 X11 X4 *)
  0xda050108;       (* arm_SBC X8 X8 X5 *)
  0xd3607d24;       (* arm_LSL X4 X9 32 *)
  0xd360fd25;       (* arm_LSR X5 X9 32 *)
  0xeb090082;       (* arm_SUBS X2 X4 X9 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02014a;       (* arm_SUBS X10 X10 X2 *)
  0xfa03016b;       (* arm_SBCS X11 X11 X3 *)
  0xfa040108;       (* arm_SBCS X8 X8 X4 *)
  0xda050129;       (* arm_SBC X9 X9 X5 *)
  0xd3607d44;       (* arm_LSL X4 X10 32 *)
  0xd360fd45;       (* arm_LSR X5 X10 32 *)
  0xeb0a0082;       (* arm_SUBS X2 X4 X10 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02016b;       (* arm_SUBS X11 X11 X2 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xfa040129;       (* arm_SBCS X9 X9 X4 *)
  0xda05014a;       (* arm_SBC X10 X10 X5 *)
  0xd3607d64;       (* arm_LSL X4 X11 32 *)
  0xd360fd65;       (* arm_LSR X5 X11 32 *)
  0xeb0b0082;       (* arm_SUBS X2 X4 X11 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020108;       (* arm_SUBS X8 X8 X2 *)
  0xfa030129;       (* arm_SBCS X9 X9 X3 *)
  0xfa04014a;       (* arm_SBCS X10 X10 X4 *)
  0xda05016b;       (* arm_SBC X11 X11 X5 *)
  0xab0c0108;       (* arm_ADDS X8 X8 X12 *)
  0xba0d0129;       (* arm_ADCS X9 X9 X13 *)
  0xba0e014a;       (* arm_ADCS X10 X10 X14 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9a9f37e2;       (* arm_CSET X2 Condition_CS *)
  0xb2607fe3;       (* arm_MOV X3 (rvalue (word 18446744069414584320)) *)
  0x92c00025;       (* arm_MOVN X5 (word 1) 32 *)
  0xb100050c;       (* arm_ADDS X12 X8 (rvalue (word 1)) *)
  0xfa03012d;       (* arm_SBCS X13 X9 X3 *)
  0xba1f014e;       (* arm_ADCS X14 X10 XZR *)
  0xfa050167;       (* arm_SBCS X7 X11 X5 *)
  0xfa1f005f;       (* arm_SBCS XZR X2 XZR *)
  0x9a8c3108;       (* arm_CSEL X8 X8 X12 Condition_CC *)
  0x9a8d3129;       (* arm_CSEL X9 X9 X13 Condition_CC *)
  0x9a8e314a;       (* arm_CSEL X10 X10 X14 Condition_CC *)
  0x9a87316b;       (* arm_CSEL X11 X11 X7 Condition_CC *)
  0xa90a27e8;       (* arm_STP X8 X9 SP (Immediate_Offset (iword (&160))) *)
  0xa90b2fea;       (* arm_STP X10 X11 SP (Immediate_Offset (iword (&176))) *)
  0xa9440fe2;       (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&64))) *)
  0x9b037c49;       (* arm_MUL X9 X2 X3 *)
  0x9bc37c4a;       (* arm_UMULH X10 X2 X3 *)
  0xa94517e4;       (* arm_LDP X4 X5 SP (Immediate_Offset (iword (&80))) *)
  0x9b057c4b;       (* arm_MUL X11 X2 X5 *)
  0x9bc57c4c;       (* arm_UMULH X12 X2 X5 *)
  0x9b047c46;       (* arm_MUL X6 X2 X4 *)
  0x9bc47c47;       (* arm_UMULH X7 X2 X4 *)
  0xab06014a;       (* arm_ADDS X10 X10 X6 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9b047c66;       (* arm_MUL X6 X3 X4 *)
  0x9bc47c67;       (* arm_UMULH X7 X3 X4 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06016b;       (* arm_ADDS X11 X11 X6 *)
  0x9b057c8d;       (* arm_MUL X13 X4 X5 *)
  0x9bc57c8e;       (* arm_UMULH X14 X4 X5 *)
  0xba07018c;       (* arm_ADCS X12 X12 X7 *)
  0x9b057c66;       (* arm_MUL X6 X3 X5 *)
  0x9bc57c67;       (* arm_UMULH X7 X3 X5 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06018c;       (* arm_ADDS X12 X12 X6 *)
  0xba0701ad;       (* arm_ADCS X13 X13 X7 *)
  0x9a1f01ce;       (* arm_ADC X14 X14 XZR *)
  0xab090129;       (* arm_ADDS X9 X9 X9 *)
  0xba0a014a;       (* arm_ADCS X10 X10 X10 *)
  0xba0b016b;       (* arm_ADCS X11 X11 X11 *)
  0xba0c018c;       (* arm_ADCS X12 X12 X12 *)
  0xba0d01ad;       (* arm_ADCS X13 X13 X13 *)
  0xba0e01ce;       (* arm_ADCS X14 X14 X14 *)
  0x9a9f37e7;       (* arm_CSET X7 Condition_CS *)
  0x9bc27c46;       (* arm_UMULH X6 X2 X2 *)
  0x9b027c48;       (* arm_MUL X8 X2 X2 *)
  0xab060129;       (* arm_ADDS X9 X9 X6 *)
  0x9b037c66;       (* arm_MUL X6 X3 X3 *)
  0xba06014a;       (* arm_ADCS X10 X10 X6 *)
  0x9bc37c66;       (* arm_UMULH X6 X3 X3 *)
  0xba06016b;       (* arm_ADCS X11 X11 X6 *)
  0x9b047c86;       (* arm_MUL X6 X4 X4 *)
  0xba06018c;       (* arm_ADCS X12 X12 X6 *)
  0x9bc47c86;       (* arm_UMULH X6 X4 X4 *)
  0xba0601ad;       (* arm_ADCS X13 X13 X6 *)
  0x9b057ca6;       (* arm_MUL X6 X5 X5 *)
  0xba0601ce;       (* arm_ADCS X14 X14 X6 *)
  0x9bc57ca6;       (* arm_UMULH X6 X5 X5 *)
  0x9a0600e7;       (* arm_ADC X7 X7 X6 *)
  0xd3607d04;       (* arm_LSL X4 X8 32 *)
  0xd360fd05;       (* arm_LSR X5 X8 32 *)
  0xeb080082;       (* arm_SUBS X2 X4 X8 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020129;       (* arm_SUBS X9 X9 X2 *)
  0xfa03014a;       (* arm_SBCS X10 X10 X3 *)
  0xfa04016b;       (* arm_SBCS X11 X11 X4 *)
  0xda050108;       (* arm_SBC X8 X8 X5 *)
  0xd3607d24;       (* arm_LSL X4 X9 32 *)
  0xd360fd25;       (* arm_LSR X5 X9 32 *)
  0xeb090082;       (* arm_SUBS X2 X4 X9 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02014a;       (* arm_SUBS X10 X10 X2 *)
  0xfa03016b;       (* arm_SBCS X11 X11 X3 *)
  0xfa040108;       (* arm_SBCS X8 X8 X4 *)
  0xda050129;       (* arm_SBC X9 X9 X5 *)
  0xd3607d44;       (* arm_LSL X4 X10 32 *)
  0xd360fd45;       (* arm_LSR X5 X10 32 *)
  0xeb0a0082;       (* arm_SUBS X2 X4 X10 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02016b;       (* arm_SUBS X11 X11 X2 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xfa040129;       (* arm_SBCS X9 X9 X4 *)
  0xda05014a;       (* arm_SBC X10 X10 X5 *)
  0xd3607d64;       (* arm_LSL X4 X11 32 *)
  0xd360fd65;       (* arm_LSR X5 X11 32 *)
  0xeb0b0082;       (* arm_SUBS X2 X4 X11 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020108;       (* arm_SUBS X8 X8 X2 *)
  0xfa030129;       (* arm_SBCS X9 X9 X3 *)
  0xfa04014a;       (* arm_SBCS X10 X10 X4 *)
  0xda05016b;       (* arm_SBC X11 X11 X5 *)
  0xab0c0108;       (* arm_ADDS X8 X8 X12 *)
  0xba0d0129;       (* arm_ADCS X9 X9 X13 *)
  0xba0e014a;       (* arm_ADCS X10 X10 X14 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9a9f37e2;       (* arm_CSET X2 Condition_CS *)
  0xb2607fe3;       (* arm_MOV X3 (rvalue (word 18446744069414584320)) *)
  0x92c00025;       (* arm_MOVN X5 (word 1) 32 *)
  0xb100050c;       (* arm_ADDS X12 X8 (rvalue (word 1)) *)
  0xfa03012d;       (* arm_SBCS X13 X9 X3 *)
  0xba1f014e;       (* arm_ADCS X14 X10 XZR *)
  0xfa050167;       (* arm_SBCS X7 X11 X5 *)
  0xfa1f005f;       (* arm_SBCS XZR X2 XZR *)
  0x9a8c3108;       (* arm_CSEL X8 X8 X12 Condition_CC *)
  0x9a8d3129;       (* arm_CSEL X9 X9 X13 Condition_CC *)
  0x9a8e314a;       (* arm_CSEL X10 X10 X14 Condition_CC *)
  0x9a87316b;       (* arm_CSEL X11 X11 X7 Condition_CC *)
  0xa90427e8;       (* arm_STP X8 X9 SP (Immediate_Offset (iword (&64))) *)
  0xa9052fea;       (* arm_STP X10 X11 SP (Immediate_Offset (iword (&80))) *)
  0xd2800121;       (* arm_MOV X1 (rvalue (word 9)) *)
  0x92800002;       (* arm_MOVN X2 (word 0) 0 *)
  0xa94a2be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&160))) *)
  0xeb090049;       (* arm_SUBS X9 X2 X9 *)
  0xb2607fe3;       (* arm_MOV X3 (rvalue (word 18446744069414584320)) *)
  0xfa0a006a;       (* arm_SBCS X10 X3 X10 *)
  0xa94b33eb;       (* arm_LDP X11 X12 SP (Immediate_Offset (iword (&176))) *)
  0xfa0b004b;       (* arm_SBCS X11 X2 X11 *)
  0x92c00024;       (* arm_MOVN X4 (word 1) 32 *)
  0xda0c008c;       (* arm_SBC X12 X4 X12 *)
  0x9b097c23;       (* arm_MUL X3 X1 X9 *)
  0x9b0a7c24;       (* arm_MUL X4 X1 X10 *)
  0x9b0b7c25;       (* arm_MUL X5 X1 X11 *)
  0x9b0c7c26;       (* arm_MUL X6 X1 X12 *)
  0x9bc97c29;       (* arm_UMULH X9 X1 X9 *)
  0x9bca7c2a;       (* arm_UMULH X10 X1 X10 *)
  0x9bcb7c2b;       (* arm_UMULH X11 X1 X11 *)
  0x9bcc7c27;       (* arm_UMULH X7 X1 X12 *)
  0xab090084;       (* arm_ADDS X4 X4 X9 *)
  0xba0a00a5;       (* arm_ADCS X5 X5 X10 *)
  0xba0b00c6;       (* arm_ADCS X6 X6 X11 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xd2800181;       (* arm_MOV X1 (rvalue (word 12)) *)
  0xa9482be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&128))) *)
  0x9b017d28;       (* arm_MUL X8 X9 X1 *)
  0x9bc17d29;       (* arm_UMULH X9 X9 X1 *)
  0xab080063;       (* arm_ADDS X3 X3 X8 *)
  0x9b017d48;       (* arm_MUL X8 X10 X1 *)
  0x9bc17d4a;       (* arm_UMULH X10 X10 X1 *)
  0xba080084;       (* arm_ADCS X4 X4 X8 *)
  0xa94933eb;       (* arm_LDP X11 X12 SP (Immediate_Offset (iword (&144))) *)
  0x9b017d68;       (* arm_MUL X8 X11 X1 *)
  0x9bc17d6b;       (* arm_UMULH X11 X11 X1 *)
  0xba0800a5;       (* arm_ADCS X5 X5 X8 *)
  0x9b017d88;       (* arm_MUL X8 X12 X1 *)
  0x9bc17d8c;       (* arm_UMULH X12 X12 X1 *)
  0xba0800c6;       (* arm_ADCS X6 X6 X8 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab090084;       (* arm_ADDS X4 X4 X9 *)
  0xba0a00a5;       (* arm_ADCS X5 X5 X10 *)
  0xba0b00c6;       (* arm_ADCS X6 X6 X11 *)
  0x9a0c00e7;       (* arm_ADC X7 X7 X12 *)
  0x910004e7;       (* arm_ADD X7 X7 (rvalue (word 1)) *)
  0xd3607ce8;       (* arm_LSL X8 X7 32 *)
  0xcb070109;       (* arm_SUB X9 X8 X7 *)
  0xab070063;       (* arm_ADDS X3 X3 X7 *)
  0xba090084;       (* arm_ADCS X4 X4 X9 *)
  0xba1f00a5;       (* arm_ADCS X5 X5 XZR *)
  0xba0800c6;       (* arm_ADCS X6 X6 X8 *)
  0xda9f23e7;       (* arm_CSETM X7 Condition_CC *)
  0xab070063;       (* arm_ADDS X3 X3 X7 *)
  0x92607ce9;       (* arm_AND X9 X7 (rvalue (word 18446744069414584320)) *)
  0xba090084;       (* arm_ADCS X4 X4 X9 *)
  0xba0700a5;       (* arm_ADCS X5 X5 X7 *)
  0x925ff8e8;       (* arm_AND X8 X7 (rvalue (word 18446744069414584319)) *)
  0x9a0800c6;       (* arm_ADC X6 X6 X8 *)
  0xa90a13e3;       (* arm_STP X3 X4 SP (Immediate_Offset (iword (&160))) *)
  0xa90b1be5;       (* arm_STP X5 X6 SP (Immediate_Offset (iword (&176))) *)
  0xa9441be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&64))) *)
  0xa9400fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&0))) *)
  0xeb0400a5;       (* arm_SUBS X5 X5 X4 *)
  0xfa0300c6;       (* arm_SBCS X6 X6 X3 *)
  0xa94523e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  0xa9410fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&16))) *)
  0xfa0400e7;       (* arm_SBCS X7 X7 X4 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xda9f23e3;       (* arm_CSETM X3 Condition_CC *)
  0xab0300a5;       (* arm_ADDS X5 X5 X3 *)
  0x92607c64;       (* arm_AND X4 X3 (rvalue (word 18446744069414584320)) *)
  0xba0400c6;       (* arm_ADCS X6 X6 X4 *)
  0xba0300e7;       (* arm_ADCS X7 X7 X3 *)
  0x925ff864;       (* arm_AND X4 X3 (rvalue (word 18446744069414584319)) *)
  0x9a040108;       (* arm_ADC X8 X8 X4 *)
  0xa9041be5;       (* arm_STP X5 X6 SP (Immediate_Offset (iword (&64))) *)
  0xa90523e7;       (* arm_STP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  0xa9420fe2;       (* arm_LDP X2 X3 SP (Immediate_Offset (iword (&32))) *)
  0x9b037c49;       (* arm_MUL X9 X2 X3 *)
  0x9bc37c4a;       (* arm_UMULH X10 X2 X3 *)
  0xa94317e4;       (* arm_LDP X4 X5 SP (Immediate_Offset (iword (&48))) *)
  0x9b057c4b;       (* arm_MUL X11 X2 X5 *)
  0x9bc57c4c;       (* arm_UMULH X12 X2 X5 *)
  0x9b047c46;       (* arm_MUL X6 X2 X4 *)
  0x9bc47c47;       (* arm_UMULH X7 X2 X4 *)
  0xab06014a;       (* arm_ADDS X10 X10 X6 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9b047c66;       (* arm_MUL X6 X3 X4 *)
  0x9bc47c67;       (* arm_UMULH X7 X3 X4 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06016b;       (* arm_ADDS X11 X11 X6 *)
  0x9b057c8d;       (* arm_MUL X13 X4 X5 *)
  0x9bc57c8e;       (* arm_UMULH X14 X4 X5 *)
  0xba07018c;       (* arm_ADCS X12 X12 X7 *)
  0x9b057c66;       (* arm_MUL X6 X3 X5 *)
  0x9bc57c67;       (* arm_UMULH X7 X3 X5 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab06018c;       (* arm_ADDS X12 X12 X6 *)
  0xba0701ad;       (* arm_ADCS X13 X13 X7 *)
  0x9a1f01ce;       (* arm_ADC X14 X14 XZR *)
  0xab090129;       (* arm_ADDS X9 X9 X9 *)
  0xba0a014a;       (* arm_ADCS X10 X10 X10 *)
  0xba0b016b;       (* arm_ADCS X11 X11 X11 *)
  0xba0c018c;       (* arm_ADCS X12 X12 X12 *)
  0xba0d01ad;       (* arm_ADCS X13 X13 X13 *)
  0xba0e01ce;       (* arm_ADCS X14 X14 X14 *)
  0x9a9f37e7;       (* arm_CSET X7 Condition_CS *)
  0x9bc27c46;       (* arm_UMULH X6 X2 X2 *)
  0x9b027c48;       (* arm_MUL X8 X2 X2 *)
  0xab060129;       (* arm_ADDS X9 X9 X6 *)
  0x9b037c66;       (* arm_MUL X6 X3 X3 *)
  0xba06014a;       (* arm_ADCS X10 X10 X6 *)
  0x9bc37c66;       (* arm_UMULH X6 X3 X3 *)
  0xba06016b;       (* arm_ADCS X11 X11 X6 *)
  0x9b047c86;       (* arm_MUL X6 X4 X4 *)
  0xba06018c;       (* arm_ADCS X12 X12 X6 *)
  0x9bc47c86;       (* arm_UMULH X6 X4 X4 *)
  0xba0601ad;       (* arm_ADCS X13 X13 X6 *)
  0x9b057ca6;       (* arm_MUL X6 X5 X5 *)
  0xba0601ce;       (* arm_ADCS X14 X14 X6 *)
  0x9bc57ca6;       (* arm_UMULH X6 X5 X5 *)
  0x9a0600e7;       (* arm_ADC X7 X7 X6 *)
  0xd3607d04;       (* arm_LSL X4 X8 32 *)
  0xd360fd05;       (* arm_LSR X5 X8 32 *)
  0xeb080082;       (* arm_SUBS X2 X4 X8 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020129;       (* arm_SUBS X9 X9 X2 *)
  0xfa03014a;       (* arm_SBCS X10 X10 X3 *)
  0xfa04016b;       (* arm_SBCS X11 X11 X4 *)
  0xda050108;       (* arm_SBC X8 X8 X5 *)
  0xd3607d24;       (* arm_LSL X4 X9 32 *)
  0xd360fd25;       (* arm_LSR X5 X9 32 *)
  0xeb090082;       (* arm_SUBS X2 X4 X9 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02014a;       (* arm_SUBS X10 X10 X2 *)
  0xfa03016b;       (* arm_SBCS X11 X11 X3 *)
  0xfa040108;       (* arm_SBCS X8 X8 X4 *)
  0xda050129;       (* arm_SBC X9 X9 X5 *)
  0xd3607d44;       (* arm_LSL X4 X10 32 *)
  0xd360fd45;       (* arm_LSR X5 X10 32 *)
  0xeb0a0082;       (* arm_SUBS X2 X4 X10 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb02016b;       (* arm_SUBS X11 X11 X2 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xfa040129;       (* arm_SBCS X9 X9 X4 *)
  0xda05014a;       (* arm_SBC X10 X10 X5 *)
  0xd3607d64;       (* arm_LSL X4 X11 32 *)
  0xd360fd65;       (* arm_LSR X5 X11 32 *)
  0xeb0b0082;       (* arm_SUBS X2 X4 X11 *)
  0xda1f00a3;       (* arm_SBC X3 X5 XZR *)
  0xeb020108;       (* arm_SUBS X8 X8 X2 *)
  0xfa030129;       (* arm_SBCS X9 X9 X3 *)
  0xfa04014a;       (* arm_SBCS X10 X10 X4 *)
  0xda05016b;       (* arm_SBC X11 X11 X5 *)
  0xab0c0108;       (* arm_ADDS X8 X8 X12 *)
  0xba0d0129;       (* arm_ADCS X9 X9 X13 *)
  0xba0e014a;       (* arm_ADCS X10 X10 X14 *)
  0xba07016b;       (* arm_ADCS X11 X11 X7 *)
  0x9a9f37e2;       (* arm_CSET X2 Condition_CS *)
  0xb2607fe3;       (* arm_MOV X3 (rvalue (word 18446744069414584320)) *)
  0x92c00025;       (* arm_MOVN X5 (word 1) 32 *)
  0xb100050c;       (* arm_ADDS X12 X8 (rvalue (word 1)) *)
  0xfa03012d;       (* arm_SBCS X13 X9 X3 *)
  0xba1f014e;       (* arm_ADCS X14 X10 XZR *)
  0xfa050167;       (* arm_SBCS X7 X11 X5 *)
  0xfa1f005f;       (* arm_SBCS XZR X2 XZR *)
  0x9a8c3108;       (* arm_CSEL X8 X8 X12 Condition_CC *)
  0x9a8d3129;       (* arm_CSEL X9 X9 X13 Condition_CC *)
  0x9a8e314a;       (* arm_CSEL X10 X10 X14 Condition_CC *)
  0x9a87316b;       (* arm_CSEL X11 X11 X7 Condition_CC *)
  0xa90027e8;       (* arm_STP X8 X9 SP (Immediate_Offset (iword (&0))) *)
  0xa9012fea;       (* arm_STP X10 X11 SP (Immediate_Offset (iword (&16))) *)
  0xa94a13e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&160))) *)
  0xa94623e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&96))) *)
  0x9b077c6c;       (* arm_MUL X12 X3 X7 *)
  0x9bc77c6d;       (* arm_UMULH X13 X3 X7 *)
  0x9b087c6b;       (* arm_MUL X11 X3 X8 *)
  0x9bc87c6e;       (* arm_UMULH X14 X3 X8 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0xa9472be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&112))) *)
  0x9b097c6b;       (* arm_MUL X11 X3 X9 *)
  0x9bc97c60;       (* arm_UMULH X0 X3 X9 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b0a7c6b;       (* arm_MUL X11 X3 X10 *)
  0x9bca7c61;       (* arm_UMULH X1 X3 X10 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9a1f0021;       (* arm_ADC X1 X1 XZR *)
  0xa94b1be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&176))) *)
  0x9b077c8b;       (* arm_MUL X11 X4 X7 *)
  0xab0b01ad;       (* arm_ADDS X13 X13 X11 *)
  0x9b087c8b;       (* arm_MUL X11 X4 X8 *)
  0xba0b01ce;       (* arm_ADCS X14 X14 X11 *)
  0x9b097c8b;       (* arm_MUL X11 X4 X9 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b0a7c8b;       (* arm_MUL X11 X4 X10 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bca7c83;       (* arm_UMULH X3 X4 X10 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9bc77c8b;       (* arm_UMULH X11 X4 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9bc87c8b;       (* arm_UMULH X11 X4 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9bc97c8b;       (* arm_UMULH X11 X4 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9a1f0063;       (* arm_ADC X3 X3 XZR *)
  0x9b077cab;       (* arm_MUL X11 X5 X7 *)
  0xab0b01ce;       (* arm_ADDS X14 X14 X11 *)
  0x9b087cab;       (* arm_MUL X11 X5 X8 *)
  0xba0b0000;       (* arm_ADCS X0 X0 X11 *)
  0x9b097cab;       (* arm_MUL X11 X5 X9 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b0a7cab;       (* arm_MUL X11 X5 X10 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bca7ca4;       (* arm_UMULH X4 X5 X10 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9bc77cab;       (* arm_UMULH X11 X5 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9bc87cab;       (* arm_UMULH X11 X5 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9bc97cab;       (* arm_UMULH X11 X5 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9a1f0084;       (* arm_ADC X4 X4 XZR *)
  0x9b077ccb;       (* arm_MUL X11 X6 X7 *)
  0xab0b0000;       (* arm_ADDS X0 X0 X11 *)
  0x9b087ccb;       (* arm_MUL X11 X6 X8 *)
  0xba0b0021;       (* arm_ADCS X1 X1 X11 *)
  0x9b097ccb;       (* arm_MUL X11 X6 X9 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9b0a7ccb;       (* arm_MUL X11 X6 X10 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9bca7cc5;       (* arm_UMULH X5 X6 X10 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0x9bc77ccb;       (* arm_UMULH X11 X6 X7 *)
  0xab0b0021;       (* arm_ADDS X1 X1 X11 *)
  0x9bc87ccb;       (* arm_UMULH X11 X6 X8 *)
  0xba0b0063;       (* arm_ADCS X3 X3 X11 *)
  0x9bc97ccb;       (* arm_UMULH X11 X6 X9 *)
  0xba0b0084;       (* arm_ADCS X4 X4 X11 *)
  0x9a1f00a5;       (* arm_ADC X5 X5 XZR *)
  0xd3607d8b;       (* arm_LSL X11 X12 32 *)
  0xd360fd86;       (* arm_LSR X6 X12 32 *)
  0xeb0c0168;       (* arm_SUBS X8 X11 X12 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ad;       (* arm_SUBS X13 X13 X8 *)
  0xfa0701ce;       (* arm_SBCS X14 X14 X7 *)
  0xfa0b0000;       (* arm_SBCS X0 X0 X11 *)
  0xda06018c;       (* arm_SBC X12 X12 X6 *)
  0xd3607dab;       (* arm_LSL X11 X13 32 *)
  0xd360fda6;       (* arm_LSR X6 X13 32 *)
  0xeb0d0168;       (* arm_SUBS X8 X11 X13 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb0801ce;       (* arm_SUBS X14 X14 X8 *)
  0xfa070000;       (* arm_SBCS X0 X0 X7 *)
  0xfa0b018c;       (* arm_SBCS X12 X12 X11 *)
  0xda0601ad;       (* arm_SBC X13 X13 X6 *)
  0xd3607dcb;       (* arm_LSL X11 X14 32 *)
  0xd360fdc6;       (* arm_LSR X6 X14 32 *)
  0xeb0e0168;       (* arm_SUBS X8 X11 X14 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb080000;       (* arm_SUBS X0 X0 X8 *)
  0xfa07018c;       (* arm_SBCS X12 X12 X7 *)
  0xfa0b01ad;       (* arm_SBCS X13 X13 X11 *)
  0xda0601ce;       (* arm_SBC X14 X14 X6 *)
  0xd3607c0b;       (* arm_LSL X11 X0 32 *)
  0xd360fc06;       (* arm_LSR X6 X0 32 *)
  0xeb000168;       (* arm_SUBS X8 X11 X0 *)
  0xda1f00c7;       (* arm_SBC X7 X6 XZR *)
  0xeb08018c;       (* arm_SUBS X12 X12 X8 *)
  0xfa0701ad;       (* arm_SBCS X13 X13 X7 *)
  0xfa0b01ce;       (* arm_SBCS X14 X14 X11 *)
  0xda060000;       (* arm_SBC X0 X0 X6 *)
  0xab01018c;       (* arm_ADDS X12 X12 X1 *)
  0xba0301ad;       (* arm_ADCS X13 X13 X3 *)
  0xba0401ce;       (* arm_ADCS X14 X14 X4 *)
  0xba050000;       (* arm_ADCS X0 X0 X5 *)
  0x9a9f37e8;       (* arm_CSET X8 Condition_CS *)
  0xb2607feb;       (* arm_MOV X11 (rvalue (word 18446744069414584320)) *)
  0x92c00026;       (* arm_MOVN X6 (word 1) 32 *)
  0xb1000581;       (* arm_ADDS X1 X12 (rvalue (word 1)) *)
  0xfa0b01a3;       (* arm_SBCS X3 X13 X11 *)
  0xba1f01c4;       (* arm_ADCS X4 X14 XZR *)
  0xfa060005;       (* arm_SBCS X5 X0 X6 *)
  0xfa1f011f;       (* arm_SBCS XZR X8 XZR *)
  0x9a81318c;       (* arm_CSEL X12 X12 X1 Condition_CC *)
  0x9a8331ad;       (* arm_CSEL X13 X13 X3 Condition_CC *)
  0x9a8431ce;       (* arm_CSEL X14 X14 X4 Condition_CC *)
  0x9a853000;       (* arm_CSEL X0 X0 X5 Condition_CC *)
  0xa90637ec;       (* arm_STP X12 X13 SP (Immediate_Offset (iword (&96))) *)
  0xa90703ee;       (* arm_STP X14 X0 SP (Immediate_Offset (iword (&112))) *)
  0xa9441be5;       (* arm_LDP X5 X6 SP (Immediate_Offset (iword (&64))) *)
  0xa9420fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&32))) *)
  0xeb0400a5;       (* arm_SUBS X5 X5 X4 *)
  0xfa0300c6;       (* arm_SBCS X6 X6 X3 *)
  0xa94523e7;       (* arm_LDP X7 X8 SP (Immediate_Offset (iword (&80))) *)
  0xa9430fe4;       (* arm_LDP X4 X3 SP (Immediate_Offset (iword (&48))) *)
  0xfa0400e7;       (* arm_SBCS X7 X7 X4 *)
  0xfa030108;       (* arm_SBCS X8 X8 X3 *)
  0xda9f23e3;       (* arm_CSETM X3 Condition_CC *)
  0xab0300a5;       (* arm_ADDS X5 X5 X3 *)
  0x92607c64;       (* arm_AND X4 X3 (rvalue (word 18446744069414584320)) *)
  0xba0400c6;       (* arm_ADCS X6 X6 X4 *)
  0xba0300e7;       (* arm_ADCS X7 X7 X3 *)
  0x925ff864;       (* arm_AND X4 X3 (rvalue (word 18446744069414584319)) *)
  0x9a040108;       (* arm_ADC X8 X8 X4 *)
  0xa90419e5;       (* arm_STP X5 X6 X15 (Immediate_Offset (iword (&64))) *)
  0xa90521e7;       (* arm_STP X7 X8 X15 (Immediate_Offset (iword (&80))) *)
  0xa9480be1;       (* arm_LDP X1 X2 SP (Immediate_Offset (iword (&128))) *)
  0xd37ef420;       (* arm_LSL X0 X1 2 *)
  0xa94a1fe6;       (* arm_LDP X6 X7 SP (Immediate_Offset (iword (&160))) *)
  0xeb060000;       (* arm_SUBS X0 X0 X6 *)
  0x93c1f841;       (* arm_EXTR X1 X2 X1 62 *)
  0xfa070021;       (* arm_SBCS X1 X1 X7 *)
  0xa94913e3;       (* arm_LDP X3 X4 SP (Immediate_Offset (iword (&144))) *)
  0x93c2f862;       (* arm_EXTR X2 X3 X2 62 *)
  0xa94b1fe6;       (* arm_LDP X6 X7 SP (Immediate_Offset (iword (&176))) *)
  0xfa060042;       (* arm_SBCS X2 X2 X6 *)
  0x93c3f883;       (* arm_EXTR X3 X4 X3 62 *)
  0xfa070063;       (* arm_SBCS X3 X3 X7 *)
  0xd37efc84;       (* arm_LSR X4 X4 62 *)
  0xda1f0084;       (* arm_SBC X4 X4 XZR *)
  0x91000484;       (* arm_ADD X4 X4 (rvalue (word 1)) *)
  0xd3607c85;       (* arm_LSL X5 X4 32 *)
  0xcb0400a6;       (* arm_SUB X6 X5 X4 *)
  0xab040000;       (* arm_ADDS X0 X0 X4 *)
  0xba060021;       (* arm_ADCS X1 X1 X6 *)
  0xba1f0042;       (* arm_ADCS X2 X2 XZR *)
  0xba050063;       (* arm_ADCS X3 X3 X5 *)
  0xda9f23e4;       (* arm_CSETM X4 Condition_CC *)
  0xab040000;       (* arm_ADDS X0 X0 X4 *)
  0x92607c86;       (* arm_AND X6 X4 (rvalue (word 18446744069414584320)) *)
  0xba060021;       (* arm_ADCS X1 X1 X6 *)
  0xba040042;       (* arm_ADCS X2 X2 X4 *)
  0x925ff885;       (* arm_AND X5 X4 (rvalue (word 18446744069414584319)) *)
  0x9a050063;       (* arm_ADC X3 X3 X5 *)
  0xa90005e0;       (* arm_STP X0 X1 X15 (Immediate_Offset (iword (&0))) *)
  0xa9010de2;       (* arm_STP X2 X3 X15 (Immediate_Offset (iword (&16))) *)
  0xd2800101;       (* arm_MOV X1 (rvalue (word 8)) *)
  0x92800002;       (* arm_MOVN X2 (word 0) 0 *)
  0xa9402be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&0))) *)
  0xeb090049;       (* arm_SUBS X9 X2 X9 *)
  0xb2607fe3;       (* arm_MOV X3 (rvalue (word 18446744069414584320)) *)
  0xfa0a006a;       (* arm_SBCS X10 X3 X10 *)
  0xa94133eb;       (* arm_LDP X11 X12 SP (Immediate_Offset (iword (&16))) *)
  0xfa0b004b;       (* arm_SBCS X11 X2 X11 *)
  0x92c00024;       (* arm_MOVN X4 (word 1) 32 *)
  0xda0c008c;       (* arm_SBC X12 X4 X12 *)
  0xd37df123;       (* arm_LSL X3 X9 3 *)
  0x93c9f544;       (* arm_EXTR X4 X10 X9 61 *)
  0x93caf565;       (* arm_EXTR X5 X11 X10 61 *)
  0x93cbf586;       (* arm_EXTR X6 X12 X11 61 *)
  0xd37dfd87;       (* arm_LSR X7 X12 61 *)
  0xd2800061;       (* arm_MOV X1 (rvalue (word 3)) *)
  0xa9462be9;       (* arm_LDP X9 X10 SP (Immediate_Offset (iword (&96))) *)
  0x9b017d28;       (* arm_MUL X8 X9 X1 *)
  0x9bc17d29;       (* arm_UMULH X9 X9 X1 *)
  0xab080063;       (* arm_ADDS X3 X3 X8 *)
  0x9b017d48;       (* arm_MUL X8 X10 X1 *)
  0x9bc17d4a;       (* arm_UMULH X10 X10 X1 *)
  0xba080084;       (* arm_ADCS X4 X4 X8 *)
  0xa94733eb;       (* arm_LDP X11 X12 SP (Immediate_Offset (iword (&112))) *)
  0x9b017d68;       (* arm_MUL X8 X11 X1 *)
  0x9bc17d6b;       (* arm_UMULH X11 X11 X1 *)
  0xba0800a5;       (* arm_ADCS X5 X5 X8 *)
  0x9b017d88;       (* arm_MUL X8 X12 X1 *)
  0x9bc17d8c;       (* arm_UMULH X12 X12 X1 *)
  0xba0800c6;       (* arm_ADCS X6 X6 X8 *)
  0x9a1f00e7;       (* arm_ADC X7 X7 XZR *)
  0xab090084;       (* arm_ADDS X4 X4 X9 *)
  0xba0a00a5;       (* arm_ADCS X5 X5 X10 *)
  0xba0b00c6;       (* arm_ADCS X6 X6 X11 *)
  0x9a0c00e7;       (* arm_ADC X7 X7 X12 *)
  0x910004e7;       (* arm_ADD X7 X7 (rvalue (word 1)) *)
  0xd3607ce8;       (* arm_LSL X8 X7 32 *)
  0xcb070109;       (* arm_SUB X9 X8 X7 *)
  0xab070063;       (* arm_ADDS X3 X3 X7 *)
  0xba090084;       (* arm_ADCS X4 X4 X9 *)
  0xba1f00a5;       (* arm_ADCS X5 X5 XZR *)
  0xba0800c6;       (* arm_ADCS X6 X6 X8 *)
  0xda9f23e7;       (* arm_CSETM X7 Condition_CC *)
  0xab070063;       (* arm_ADDS X3 X3 X7 *)
  0x92607ce9;       (* arm_AND X9 X7 (rvalue (word 18446744069414584320)) *)
  0xba090084;       (* arm_ADCS X4 X4 X9 *)
  0xba0700a5;       (* arm_ADCS X5 X5 X7 *)
  0x925ff8e8;       (* arm_AND X8 X7 (rvalue (word 18446744069414584319)) *)
  0x9a0800c6;       (* arm_ADC X6 X6 X8 *)
  0xa90211e3;       (* arm_STP X3 X4 X15 (Immediate_Offset (iword (&32))) *)
  0xa90319e5;       (* arm_STP X5 X6 X15 (Immediate_Offset (iword (&48))) *)
  0x910303ff;       (* arm_ADD SP SP (rvalue (word 192)) *)
  0xd65f03c0        (* arm_RET X30 *)
];;

let SM2_MONTJSCALARMUL_ALT_EXEC = ARM_MK_EXEC_RULE sm2_montjscalarmul_alt_mc;;

(* ------------------------------------------------------------------------- *)
(* Local versions of the subroutines.                                        *)
(* ------------------------------------------------------------------------- *)

let LOCAL_JADD_TAC =
  let th =
    CONV_RULE(ONCE_DEPTH_CONV NUM_MULT_CONV)
      (REWRITE_RULE[bignum_triple_from_memory; bignum_pair_from_memory]
       SM2_MONTJADD_ALT_SUBROUTINE_CORRECT) in
  ARM_SUBROUTINE_SIM_TAC
   (sm2_montjscalarmul_alt_mc,SM2_MONTJSCALARMUL_ALT_EXEC,
    0x80c,sm2_montjadd_alt_mc,th)
  [`read X0 s`; `read X1 s`;
   `read(memory :> bytes(read X1 s,8 * 4)) s,
    read(memory :> bytes(word_add (read X1 s) (word 32),8 * 4)) s,
    read(memory :> bytes(word_add (read X1 s) (word 64),8 * 4)) s`;
   `read X2 s`;
   `read(memory :> bytes(read X2 s,8 * 4)) s,
    read(memory :> bytes(word_add (read X2 s) (word 32),8 * 4)) s,
    read(memory :> bytes(word_add (read X2 s) (word 64),8 * 4)) s`;
   `pc + 0x80c`; `read SP s`; `read X30 s`];;

let LOCAL_JDOUBLE_TAC =
  let th =
    CONV_RULE(ONCE_DEPTH_CONV NUM_MULT_CONV)
      (REWRITE_RULE[bignum_triple_from_memory; bignum_pair_from_memory]
       SM2_MONTJDOUBLE_ALT_SUBROUTINE_CORRECT) in
  ARM_SUBROUTINE_SIM_TAC
   (sm2_montjscalarmul_alt_mc,SM2_MONTJSCALARMUL_ALT_EXEC,
    0x2690,sm2_montjdouble_alt_mc,th)
  [`read X0 s`; `read X1 s`;
   `read(memory :> bytes(read X1 s,8 * 4)) s,
    read(memory :> bytes(word_add (read X1 s) (word 32),8 * 4)) s,
    read(memory :> bytes(word_add (read X1 s) (word 64),8 * 4)) s`;
   `pc + 0x2690`; `read SP s`; `read X30 s`];;

(* ------------------------------------------------------------------------- *)
(* Overall point operation proof.                                            *)
(* ------------------------------------------------------------------------- *)

let represents_sm2 = new_definition
 `represents_sm2 P (x,y,z) <=>
        x < p_sm2 /\ y < p_sm2 /\ z < p_sm2 /\
        weierstrass_of_jacobian (integer_mod_ring p_sm2)
         (tripled (montgomery_decode (256,p_sm2)) (x,y,z)) = P`;;

let REPRESENTS_SM2_NEGATION_ALT = prove
 (`!P x y z.
        represents_sm2 P (x,y,z)
        ==> P IN group_carrier sm2_group
            ==> represents_sm2 (group_inv sm2_group P)
                   (x,(if y = 0 then 0 else p_sm2 - y),z)`,
  REWRITE_TAC[represents_sm2] THEN REPEAT GEN_TAC THEN
  STRIP_TAC THEN STRIP_TAC THEN ASM_REWRITE_TAC[] THEN
  CONJ_TAC THENL [ASM_ARITH_TAC; ALL_TAC] THEN
  MP_TAC(ISPECL
   [`integer_mod_ring p_sm2`; `ring_neg (integer_mod_ring p_sm2) (&3)`;
    `&b_sm2:int`;
    `tripled (montgomery_decode (256,p_sm2)) (x,y,z)`]
   WEIERSTRASS_OF_JACOBIAN_NEG) THEN
  ASM_REWRITE_TAC[jacobian_point; GSYM ccsm2; SM2_GROUP; tripled] THEN
  ANTS_TAC THENL
   [REWRITE_TAC[FIELD_INTEGER_MOD_RING; PRIME_PSM2] THEN
    REWRITE_TAC[b_sm2; IN_INTEGER_MOD_RING_CARRIER; p_sm2;
                INTEGER_MOD_RING_CLAUSES] THEN
    CONV_TAC INT_REDUCE_CONV THEN REWRITE_TAC[GSYM p_sm2] THEN
    CONJ_TAC THENL [ALL_TAC; CONJ_TAC] THEN
    MATCH_MP_TAC MONTGOMERY_DECODE THEN
    REWRITE_TAC[p_sm2] THEN CONV_TAC NUM_REDUCE_CONV;
    MATCH_MP_TAC EQ_IMP THEN AP_THM_TAC THEN AP_TERM_TAC THEN AP_TERM_TAC THEN
    REWRITE_TAC[jacobian_neg; INTEGER_MOD_RING_CLAUSES; ccsm2] THEN
    REWRITE_TAC[PAIR_EQ] THEN REWRITE_TAC[montgomery_decode] THEN
    CONV_TAC INT_REM_DOWN_CONV THEN
    REWRITE_TAC[INT_REM_EQ; GSYM INT_OF_NUM_CLAUSES] THEN
    MATCH_MP_TAC(INTEGER_RULE
     `(--x:int == y) (mod n) ==> (--(a * x) == a * y) (mod n)`) THEN
    REWRITE_TAC[GSYM INT_REM_EQ; INT_REM_LNEG] THEN
    REWRITE_TAC[INT_ABS_NUM; INT_OF_NUM_REM; INT_OF_NUM_CLAUSES] THEN
    ASM_SIMP_TAC[MOD_LT] THEN COND_CASES_TAC THEN ASM_REWRITE_TAC[MOD_0] THEN
    ASM_SIMP_TAC[INT_OF_NUM_CLAUSES; INT_OF_NUM_SUB; LT_IMP_LE] THEN
    CONV_TAC SYM_CONV THEN MATCH_MP_TAC MOD_LT THEN ASM_ARITH_TAC]);;

let SM2_MONTJSCALARMUL_ALT_CORRECT = time prove
 (`!res scalar point n xyz pc stackpointer.
        aligned 16 stackpointer /\
        ALL (nonoverlapping (stackpointer,1216))
            [(word pc,0x3720); (res,96); (scalar,32); (point,96)] /\
        nonoverlapping (res,96) (word pc,0x3720)
        ==> ensures arm
             (\s. aligned_bytes_loaded s (word pc) sm2_montjscalarmul_alt_mc /\
                  read PC s = word(pc + 0xc) /\
                  read SP s = word_add stackpointer (word 224) /\
                  C_ARGUMENTS [res;scalar;point] s /\
                  bignum_from_memory (scalar,4) s = n /\
                  bignum_triple_from_memory (point,4) s = xyz)
             (\s. read PC s = word (pc + 0x7fc) /\
                  !P. P IN group_carrier sm2_group /\
                      represents_sm2 P xyz
                      ==> represents_sm2
                            (group_pow sm2_group P n)
                            (bignum_triple_from_memory(res,4) s))
          (MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI ,,
           MAYCHANGE [X19; X20; X21; X30] ,,
           MAYCHANGE [memory :> bytes(res,96);
                      memory :> bytes(stackpointer,1216)])`,
  REWRITE_TAC[FORALL_PAIR_THM] THEN
  REWRITE_TAC[GSYM SEQ_ASSOC; MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI] THEN
  MAP_EVERY X_GEN_TAC
   [`res:int64`; `scalar:int64`; `point:int64`;
    `n_input:num`; `x:num`; `y:num`; `z:num`;
    `pc:num`; `stackpointer:int64`] THEN
  REWRITE_TAC[ALLPAIRS; ALL; NONOVERLAPPING_CLAUSES] THEN STRIP_TAC THEN
  REWRITE_TAC[C_ARGUMENTS; SOME_FLAGS; PAIR_EQ; bignum_triple_from_memory] THEN
  CONV_TAC(ONCE_DEPTH_CONV NUM_MULT_CONV) THEN
  CONV_TAC(ONCE_DEPTH_CONV NORMALIZE_RELATIVE_ADDRESS_CONV) THEN

  (*** Modified input arguments, mathematically first ***)

  ABBREV_TAC `n_red = n_input MOD n_sm2` THEN
  SUBGOAL_THEN `n_red < n_sm2` ASSUME_TAC THENL
   [EXPAND_TAC "n_red" THEN REWRITE_TAC[n_sm2] THEN ARITH_TAC; ALL_TAC] THEN

  ABBREV_TAC `sgn <=> 2 EXP 255 <= n_red` THEN
  ABBREV_TAC `n_neg = if sgn then n_sm2 - n_red else n_red` THEN
  SUBGOAL_THEN `n_neg < 2 EXP 255` ASSUME_TAC THENL
   [MAP_EVERY EXPAND_TAC ["n_neg"; "sgn"] THEN
    UNDISCH_TAC `n_red < n_sm2` THEN REWRITE_TAC[n_sm2] THEN ARITH_TAC;
    ALL_TAC] THEN

  ABBREV_TAC
   `recoder =
    0x0888888888888888888888888888888888888888888888888888888888888888` THEN
  ABBREV_TAC `n = n_neg + recoder` THEN
  SUBGOAL_THEN `n < 9 * 2 EXP 252` ASSUME_TAC THENL
   [MAP_EVERY EXPAND_TAC ["n"; "recoder"] THEN
    UNDISCH_TAC `n_neg < 2 EXP 255` THEN ARITH_TAC;
    ALL_TAC] THEN

  ABBREV_TAC `y' = if sgn /\ ~(y = 0) then p_sm2 - y else y` THEN

  (*** Main loop invariant setup. The bound on y is handy to have included ***)

  ENSURES_WHILE_DOWN_TAC `63` `pc + 0x458` `pc + 0x7c8`
   `\i s.
      read SP s = word_add stackpointer (word 224) /\
      read X19 s = res /\
      read X20 s = word (4 * i) /\
      bignum_from_memory(word_add stackpointer (word 224),4) s = n /\
      !P. P IN group_carrier sm2_group /\
          y < p_sm2 /\ represents_sm2 P (x,y',z)
          ==> represents_sm2
                (group_zpow sm2_group P
                    (&(n DIV 2 EXP (4 * i)) - &(recoder DIV 2 EXP (4 * i))))
                (bignum_triple_from_memory
                     (word_add stackpointer (word 256),4) s) /\
              !i. i < 8
                  ==> represents_sm2 (group_pow sm2_group P (i + 1))
                       (bignum_triple_from_memory
                       (word_add stackpointer (word (96 * i + 448)),4) s)` THEN
  REPEAT CONJ_TAC THENL
   [ARITH_TAC;

    (*** Initial holding of invariant ***)
    (*** First, the input reduced modulo the group order ***)

    REWRITE_TAC[BIGNUM_FROM_MEMORY_BYTES] THEN ENSURES_INIT_TAC "s0" THEN
    BIGNUM_LDIGITIZE_TAC "nin_" `read (memory :> bytes(scalar,8 * 4)) s0` THEN
    ARM_ACCSTEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (15--18) (1--22) THEN
    MAP_EVERY REABBREV_TAC
     [`nr_0 = read X2 s22`;
      `nr_1 = read X3 s22`;
      `nr_2 = read X4 s22`;
      `nr_3 = read X5 s22`] THEN
    SUBGOAL_THEN `bignum_of_wordlist[nr_0; nr_1; nr_2; nr_3] = n_red`
    ASSUME_TAC THENL
     [SUBGOAL_THEN `carry_s18 <=> n_input < n_sm2` SUBST_ALL_TAC THENL
       [MATCH_MP_TAC FLAG_FROM_CARRY_LT THEN EXISTS_TAC `256` THEN
        EXPAND_TAC "n_input" THEN
        REWRITE_TAC[n_sm2; GSYM REAL_OF_NUM_CLAUSES] THEN
        ACCUMULATOR_ASSUM_LIST(MP_TAC o end_itlist CONJ o DECARRY_RULE) THEN
        DISCH_THEN(fun th -> REWRITE_TAC[th]) THEN BOUNDER_TAC[];
        ALL_TAC] THEN
      EXPAND_TAC "n_red" THEN
      W(MP_TAC o PART_MATCH (lhand o rand) MOD_CASES o rand o snd) THEN
      ANTS_TAC THENL
       [REWRITE_TAC[n_sm2] THEN EXPAND_TAC "n_input" THEN BOUNDER_TAC[];
        DISCH_THEN SUBST1_TAC] THEN
      MAP_EVERY EXPAND_TAC ["nr_0"; "nr_1"; "nr_2"; "nr_3"] THEN
      COND_CASES_TAC THEN ASM_REWRITE_TAC[] THEN
      RULE_ASSUM_TAC(REWRITE_RULE[NOT_LT]) THEN
      ASM_SIMP_TAC[GSYM REAL_OF_NUM_EQ; GSYM REAL_OF_NUM_SUB] THEN
      EXPAND_TAC "n_input" THEN REWRITE_TAC[GSYM REAL_OF_NUM_ADD] THEN
      REWRITE_TAC[GSYM REAL_OF_NUM_POW; GSYM REAL_OF_NUM_MUL] THEN
      MATCH_MP_TAC EQUAL_FROM_CONGRUENT_REAL THEN
      MAP_EVERY EXISTS_TAC [`256`; `&0:real`] THEN ASM_REWRITE_TAC[] THEN
      CONJ_TAC THENL [BOUNDER_TAC[]; ALL_TAC] THEN CONJ_TAC THENL
       [ASM_REWRITE_TAC[REAL_OF_NUM_ADD; REAL_OF_NUM_POW; REAL_OF_NUM_MUL] THEN
        ASM_REWRITE_TAC[REAL_SUB_LE; REAL_OF_NUM_LE] THEN
        MATCH_MP_TAC(REAL_ARITH `x:real < y ==> x - &n < y`) THEN
        REWRITE_TAC[REAL_OF_NUM_LT] THEN EXPAND_TAC "n_input" THEN
        BOUNDER_TAC[];
        ALL_TAC] THEN
      CONJ_TAC THENL [REAL_INTEGER_TAC; ALL_TAC] THEN
      EXPAND_TAC "n_input" THEN
      REWRITE_TAC[bignum_of_wordlist; n_sm2; GSYM REAL_OF_NUM_CLAUSES] THEN
      ACCUMULATOR_POP_ASSUM_LIST(MP_TAC o end_itlist CONJ o DESUM_RULE) THEN
      REWRITE_TAC[REAL_BITVAL_NOT; n_sm2] THEN
      DISCH_THEN(fun th -> REWRITE_TAC[th]) THEN
      CONV_TAC(RAND_CONV REAL_POLY_CONV) THEN REAL_INTEGER_TAC;
      ACCUMULATOR_POP_ASSUM_LIST(K ALL_TAC)] THEN

    (*** Conditional negation of the scalar ***)

    ARM_ACCSTEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (23--26) (23--32) THEN
    MAP_EVERY REABBREV_TAC
     [`nn_0 = read X2 s32`;
      `nn_1 = read X3 s32`;
      `nn_2 = read X4 s32`;
      `nn_3 = read X5 s32`] THEN

    SUBGOAL_THEN
     `val(word_and nr_3 (word 9223372036854775808):int64) = 0 <=> ~sgn`
    SUBST_ALL_TAC THENL
     [MAP_EVERY EXPAND_TAC ["sgn"; "n_red"] THEN
      REWRITE_TAC[ARITH_RULE `~(2 EXP 255 <= b) <=> b DIV 2 EXP 255 = 0`] THEN
      CONV_TAC(ONCE_DEPTH_CONV BIGNUM_OF_WORDLIST_DIV_CONV) THEN
      CONV_TAC WORD_BLAST;
      RULE_ASSUM_TAC(REWRITE_RULE[COND_SWAP; GSYM WORD_BITVAL])] THEN

    SUBGOAL_THEN `bignum_of_wordlist[nn_0; nn_1; nn_2; nn_3] = n_neg`
    ASSUME_TAC THENL
     [MAP_EVERY EXPAND_TAC ["n_neg"; "nn_0"; "nn_1"; "nn_2"; "nn_3"] THEN
      COND_CASES_TAC THEN ASM_REWRITE_TAC[] THEN
      REWRITE_TAC[GSYM REAL_OF_NUM_CLAUSES] THEN
      MATCH_MP_TAC EQUAL_FROM_CONGRUENT_REAL THEN
      MAP_EVERY EXISTS_TAC [`256`; `&0:real`] THEN ASM_REWRITE_TAC[] THEN
      CONJ_TAC THENL [BOUNDER_TAC[]; ALL_TAC] THEN CONJ_TAC THENL
       [UNDISCH_TAC `n_red < n_sm2` THEN
        REWRITE_TAC[REAL_OF_NUM_CLAUSES; LE_0; n_sm2] THEN ARITH_TAC;
        ALL_TAC] THEN
      CONJ_TAC THENL [REAL_INTEGER_TAC; ALL_TAC] THEN
      ASM_SIMP_TAC[GSYM REAL_OF_NUM_SUB; LT_IMP_LE] THEN
      EXPAND_TAC "n_red" THEN
      REWRITE_TAC[bignum_of_wordlist; n_sm2; GSYM REAL_OF_NUM_CLAUSES] THEN
      ACCUMULATOR_POP_ASSUM_LIST(MP_TAC o end_itlist CONJ o DESUM_RULE) THEN
      REWRITE_TAC[REAL_BITVAL_NOT; n_sm2] THEN
      DISCH_THEN(fun th -> REWRITE_TAC[th]) THEN
      CONV_TAC(RAND_CONV REAL_POLY_CONV) THEN REAL_INTEGER_TAC;
      ACCUMULATOR_POP_ASSUM_LIST(K ALL_TAC)] THEN

    (*** Add the recoding constant ***)

    ARM_ACCSTEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC [34;35;37;38] (33--40) THEN
    SUBGOAL_THEN
     `read (memory :> bytes(word_add stackpointer (word 224),8 * 4)) s40 = n`
    ASSUME_TAC THENL
     [CONV_TAC(LAND_CONV BIGNUM_LEXPAND_CONV) THEN ASM_REWRITE_TAC[] THEN
      REWRITE_TAC[GSYM REAL_OF_NUM_CLAUSES] THEN
      MATCH_MP_TAC EQUAL_FROM_CONGRUENT_REAL THEN
      MAP_EVERY EXISTS_TAC [`256`; `&0:real`] THEN ASM_REWRITE_TAC[] THEN
      CONJ_TAC THENL [BOUNDER_TAC[]; ALL_TAC] THEN CONJ_TAC THENL
       [REWRITE_TAC[REAL_OF_NUM_CLAUSES] THEN
        UNDISCH_TAC `n < 9 * 2 EXP 252` THEN ARITH_TAC;
        ALL_TAC] THEN
      CONJ_TAC THENL [REAL_INTEGER_TAC; ALL_TAC] THEN
      ASM_SIMP_TAC[GSYM REAL_OF_NUM_SUB; LT_IMP_LE] THEN
      MAP_EVERY EXPAND_TAC ["n"; "recoder"; "n_neg"] THEN
      REWRITE_TAC[bignum_of_wordlist; n_sm2; GSYM REAL_OF_NUM_CLAUSES] THEN
      ACCUMULATOR_POP_ASSUM_LIST(MP_TAC o end_itlist CONJ o DESUM_RULE) THEN
      REWRITE_TAC[REAL_BITVAL_NOT; n_sm2] THEN
      DISCH_THEN(fun th -> REWRITE_TAC[th]) THEN
      CONV_TAC(RAND_CONV REAL_POLY_CONV) THEN REAL_INTEGER_TAC;
      ACCUMULATOR_POP_ASSUM_LIST(K ALL_TAC)] THEN

    (*** Copying and optional negation of the point as zeroth table entry ***)

    BIGNUM_LDIGITIZE_TAC "x_"
     `read (memory :> bytes(point,8 * 4)) s40` THEN
    BIGNUM_LDIGITIZE_TAC "y_"
     `read (memory :> bytes(word_add point (word 32),8 * 4)) s40` THEN
    BIGNUM_LDIGITIZE_TAC "z_"
     `read (memory :> bytes(word_add point (word 64),8 * 4)) s40` THEN

    ARM_ACCSTEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC [48;50;52;54] (41--69) THEN
    SUBGOAL_THEN
     `read(memory :> bytes(word_add stackpointer (word 448),8 * 4)) s69 = x /\
      read(memory :> bytes(word_add stackpointer (word 512),8 * 4)) s69 = z`
    STRIP_ASSUME_TAC THENL
     [CONV_TAC(ONCE_DEPTH_CONV BIGNUM_LEXPAND_CONV) THEN ASM_REWRITE_TAC[];
      ALL_TAC] THEN

    (*** Defer conditional negation until we reach ambient y < p_sm2 asm ***)
    (*** At that point we will prove that in fact y'' = y' ***)

    ABBREV_TAC
     `y'' = read (memory :> bytes(word_add stackpointer (word 480),8 * 4))
                 s69` THEN

    (*** Computation of 2 * P ***)

    ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (70--72) THEN
    LOCAL_JDOUBLE_TAC 73 THEN
    MAP_EVERY ABBREV_TAC
     [`x2 = read (memory :> bytes(word_add stackpointer (word 544),8 * 4)) s73`;
      `y2 = read (memory :> bytes(word_add stackpointer (word 576),8 * 4)) s73`;
      `z2 = read (memory :> bytes(word_add stackpointer (word 608),8 * 4)) s73`
     ] THEN

    (*** Computation of 3 * P ***)

    ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (74--77) THEN
    LOCAL_JADD_TAC 78 THEN
    MAP_EVERY ABBREV_TAC
     [`x3 = read (memory :> bytes(word_add stackpointer (word 640),8 * 4)) s78`;
      `y3 = read (memory :> bytes(word_add stackpointer (word 672),8 * 4)) s78`;
      `z3 = read (memory :> bytes(word_add stackpointer (word 704),8 * 4)) s78`
     ] THEN

    (*** Computation of 4 * P ***)

    ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (79--81) THEN
    LOCAL_JDOUBLE_TAC 82 THEN
    MAP_EVERY ABBREV_TAC
     [`x4 = read (memory :> bytes(word_add stackpointer (word 736),8 * 4)) s82`;
      `y4 = read (memory :> bytes(word_add stackpointer (word 768),8 * 4)) s82`;
      `z4 = read (memory :> bytes(word_add stackpointer (word 800),8 * 4)) s82`
     ] THEN

    (*** Computation of 5 * P ***)

    ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (83--86) THEN
    LOCAL_JADD_TAC 87 THEN
    MAP_EVERY ABBREV_TAC
     [`x5 = read (memory :> bytes(word_add stackpointer (word 832),8 * 4)) s87`;
      `y5 = read (memory :> bytes(word_add stackpointer (word 864),8 * 4)) s87`;
      `z5 = read (memory :> bytes(word_add stackpointer (word 896),8 * 4)) s87`
     ] THEN

    (*** Computation of 6 * P ***)

    ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (88--90) THEN
    LOCAL_JDOUBLE_TAC 91 THEN
    MAP_EVERY ABBREV_TAC
     [`x6 = read (memory :> bytes(word_add stackpointer (word 928),8 * 4)) s91`;
      `y6 = read (memory :> bytes(word_add stackpointer (word 960),8 * 4)) s91`;
      `z6 = read (memory :> bytes(word_add stackpointer (word 992),8 * 4)) s91`
     ] THEN

    (*** Computation of 7 * P ***)

    ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (92--95) THEN
    LOCAL_JADD_TAC 96 THEN
    MAP_EVERY ABBREV_TAC
     [`x7 = read (memory :> bytes(word_add stackpointer (word 1024),8 * 4)) s96`;
      `y7 = read (memory :> bytes(word_add stackpointer (word 1056),8 * 4)) s96`;
      `z7 = read (memory :> bytes(word_add stackpointer (word 1088),8 * 4)) s96`
     ] THEN

    (*** Computation of 8 * P ***)

    ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (97--99) THEN
    LOCAL_JDOUBLE_TAC 100 THEN
    MAP_EVERY ABBREV_TAC
     [`x8 = read (memory :> bytes(word_add stackpointer (word 1120),8 * 4)) s100`;
      `y8 = read (memory :> bytes(word_add stackpointer (word 1152),8 * 4)) s100`;
      `z8 = read (memory :> bytes(word_add stackpointer (word 1184),8 * 4)) s100`
     ] THEN

    (*** Selection of the top bitfield ***)

    ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (101--102) THEN
    SUBGOAL_THEN `word_ushr (sum_s38:int64) 60 = word(n DIV 2 EXP 252)`
    SUBST_ALL_TAC THENL
     [EXPAND_TAC "n" THEN CONV_TAC(ONCE_DEPTH_CONV BIGNUM_LEXPAND_CONV) THEN
      ASM_REWRITE_TAC[] THEN
      CONV_TAC(ONCE_DEPTH_CONV BIGNUM_OF_WORDLIST_DIV_CONV) THEN
      CONV_TAC WORD_BLAST;
      ALL_TAC] THEN

    (*** Constant-time table selection ***)

    BIGNUM_LDIGITIZE_TAC "fab_"
     `read(memory :> bytes(word_add stackpointer (word 448),8 * 96)) s102` THEN
    ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (103--282) THEN
    ENSURES_FINAL_STATE_TAC THEN ASM_REWRITE_TAC[] THEN

    REWRITE_TAC[bignum_triple_from_memory] THEN
    CONV_TAC(ONCE_DEPTH_CONV EXPAND_CASES_CONV) THEN
    CONV_TAC(DEPTH_CONV(NUM_ADD_CONV ORELSEC NUM_MULT_CONV)) THEN
    CONV_TAC(ONCE_DEPTH_CONV NORMALIZE_RELATIVE_ADDRESS_CONV) THEN
    ASM_REWRITE_TAC[BIGNUM_FROM_MEMORY_BYTES] THEN

    (*** Finally justify the negation of y before continuing ***)

    X_GEN_TAC `P:(int#int)option` THEN STRIP_TAC THEN
    SUBGOAL_THEN `y'':num = y'` SUBST_ALL_TAC THENL
     [MAP_EVERY EXPAND_TAC ["y''"; "y'"] THEN
      CONV_TAC(ONCE_DEPTH_CONV BIGNUM_LEXPAND_CONV) THEN ASM_REWRITE_TAC[] THEN
      REWRITE_TAC[WORD_SUB_0; VAL_EQ_0; COND_SWAP; WORD_BITVAL_EQ_0] THEN
      REWRITE_TAC[WORD_OR_EQ_0; GSYM CONJ_ASSOC] THEN
      MP_TAC(SPEC `[y_0;y_1;y_2;y_3]:int64 list` BIGNUM_OF_WORDLIST_EQ_0) THEN
      ASM_REWRITE_TAC[ALL] THEN DISCH_THEN(SUBST1_TAC o SYM) THEN
      REWRITE_TAC[MESON[] `(if p then T else ~q) <=> ~(q /\ ~p)`] THEN
      EXPAND_TAC "y'" THEN REWRITE_TAC[COND_SWAP] THEN
      COND_CASES_TAC THEN ASM_REWRITE_TAC[] THEN
      MATCH_MP_TAC CONG_IMP_EQ THEN EXISTS_TAC `2 EXP 256` THEN
      CONJ_TAC THENL [BOUNDER_TAC[]; ALL_TAC] THEN
      CONJ_TAC THENL [REWRITE_TAC[p_sm2] THEN ARITH_TAC; ALL_TAC] THEN
      ASM_SIMP_TAC[num_congruent; GSYM INT_OF_NUM_SUB; LT_IMP_LE] THEN
      REWRITE_TAC[REAL_INT_CONGRUENCE] THEN
      REWRITE_TAC[GSYM REAL_OF_INT_CLAUSES] THEN
      REWRITE_TAC[GSYM REAL_OF_NUM_CLAUSES; REAL_POW_EQ_0] THEN
      REWRITE_TAC[REAL_OF_NUM_EQ; ARITH_EQ] THEN EXPAND_TAC "y" THEN
      REWRITE_TAC[bignum_of_wordlist; p_sm2; GSYM REAL_OF_NUM_CLAUSES] THEN
      ACCUMULATOR_POP_ASSUM_LIST(MP_TAC o end_itlist CONJ o DESUM_RULE) THEN
      DISCH_THEN(fun th -> REWRITE_TAC[th]) THEN REAL_INTEGER_TAC;
      ACCUMULATOR_POP_ASSUM_LIST(K ALL_TAC)] THEN

    (*** Final fiddle of the representations ***)

    CONV_TAC(ONCE_DEPTH_CONV BIGNUM_LEXPAND_CONV) THEN
    ASM_REWRITE_TAC[] THEN REWRITE_TAC[SYM(NUM_EXP_CONV `2 EXP 252`)] THEN
    SUBGOAL_THEN `n DIV 2 EXP 252 < 9` MP_TAC THENL
     [UNDISCH_TAC `n < 9 * 2 EXP 252` THEN ARITH_TAC;
      SPEC_TAC(`n DIV 2 EXP 252`,`b:num`)] THEN
    REWRITE_TAC[MESON[ARITH_RULE `0 < 9`]
      `(!b. b < 9 ==> P b /\ Q) <=> (Q ==> !b. b < 9 ==> P b) /\ Q`] THEN
    CONJ_TAC THENL
     [EXPAND_TAC "recoder" THEN CONV_TAC NUM_REDUCE_CONV THEN
      REWRITE_TAC[INT_SUB_RZERO; GROUP_NPOW] THEN
      CONV_TAC(RAND_CONV EXPAND_CASES_CONV) THEN
      CONV_TAC(DEPTH_CONV WORD_NUM_RED_CONV) THEN
      ASM_REWRITE_TAC[WORD_SUB_0; VAL_WORD_BITVAL; BITVAL_EQ_0] THEN
      MATCH_MP_TAC(TAUT `q /\ (p ==> r) ==> p ==> q /\ r`) THEN
      CONJ_TAC THENL
       [REWRITE_TAC[group_pow; SM2_GROUP; represents_sm2; tripled;
                    weierstrass_of_jacobian; montgomery_decode; p_sm2;
                    bignum_of_wordlist; INTEGER_MOD_RING_CLAUSES] THEN
        CONV_TAC(DEPTH_CONV(WORD_NUM_RED_CONV ORELSEC INVERSE_MOD_CONV));
        REPEAT(MATCH_MP_TAC MONO_AND THEN CONJ_TAC) THEN
        MATCH_MP_TAC EQ_IMP THEN AP_TERM_TAC THEN REWRITE_TAC[PAIR_EQ] THEN
        W(MAP_EVERY EXPAND_TAC o map (name_of o lhs) o conjuncts o snd) THEN
        CONV_TAC(ONCE_DEPTH_CONV BIGNUM_LEXPAND_CONV) THEN
        ASM_REWRITE_TAC[WORD_SUB_0; VAL_WORD_BITVAL; BITVAL_EQ_0]];
      ALL_TAC] THEN

    REPEAT(FIRST_X_ASSUM(MP_TAC o check (is_forall o concl))) THEN
    DISCH_THEN(MP_TAC o SPEC `P:(int#int)option`) THEN ASM_REWRITE_TAC[] THEN
    REWRITE_TAC[IMP_IMP; GSYM CONJ_ASSOC] THEN
    ASM_SIMP_TAC[GROUP_RULE `group_mul G x x = group_pow G x 2`] THEN
    GEN_REWRITE_TAC I [IMP_CONJ] THEN DISCH_TAC THEN
    GEN_REWRITE_TAC I [IMP_CONJ] THEN DISCH_THEN(MP_TAC o SPECL
     [`group_pow sm2_group P 2`; `P:(int#int)option`]) THEN
    ASM_SIMP_TAC[GROUP_RULE `group_pow G x 2 = x <=> x = group_id G`] THEN
    ASM_SIMP_TAC[GROUP_RULE
     `group_mul G (group_pow G x 2) x = group_pow G x 3`] THEN
    ANTS_TAC THENL [REWRITE_TAC[SM2_GROUP]; DISCH_TAC] THEN
    GEN_REWRITE_TAC I [IMP_CONJ] THEN DISCH_THEN(MP_TAC o SPEC
     `group_pow sm2_group P 2`) THEN
    ASM_SIMP_TAC[GSYM GROUP_POW_ADD] THEN CONV_TAC NUM_REDUCE_CONV THEN
    DISCH_TAC THEN GEN_REWRITE_TAC I [IMP_CONJ] THEN DISCH_THEN(MP_TAC o SPECL
     [`group_pow sm2_group P 4`; `P:(int#int)option`]) THEN
    ASM_SIMP_TAC[GROUP_RULE
     `group_mul G (group_pow G x 4) x = group_pow G x 5`] THEN
    ANTS_TAC THENL
     [ASM_SIMP_TAC[GROUP_POW_EQ_ID; SM2_GROUP_ELEMENT_ORDER; GROUP_RULE
        `group_pow G x 4 = x <=> group_pow G x 3 = group_id G`] THEN
      REWRITE_TAC[SM2_GROUP] THEN COND_CASES_TAC THEN REWRITE_TAC[] THEN
      REWRITE_TAC[n_sm2] THEN CONV_TAC(RAND_CONV DIVIDES_CONV) THEN
      REWRITE_TAC[];
      DISCH_TAC] THEN
    GEN_REWRITE_TAC I [IMP_CONJ] THEN DISCH_THEN(MP_TAC o SPEC
     `group_pow sm2_group P 3`) THEN
    ASM_SIMP_TAC[GSYM GROUP_POW_ADD] THEN CONV_TAC NUM_REDUCE_CONV THEN
    DISCH_TAC THEN GEN_REWRITE_TAC I [IMP_CONJ] THEN DISCH_THEN(MP_TAC o SPECL
     [`group_pow sm2_group P 6`; `P:(int#int)option`]) THEN
    ASM_SIMP_TAC[GROUP_RULE
     `group_mul G (group_pow G x 6) x = group_pow G x 7`] THEN
    ANTS_TAC THENL
     [ASM_SIMP_TAC[GROUP_POW_EQ_ID; SM2_GROUP_ELEMENT_ORDER; GROUP_RULE
        `group_pow G x 6 = x <=> group_pow G x 5 = group_id G`] THEN
      REWRITE_TAC[SM2_GROUP] THEN COND_CASES_TAC THEN REWRITE_TAC[] THEN
      REWRITE_TAC[n_sm2] THEN CONV_TAC(RAND_CONV DIVIDES_CONV) THEN
      REWRITE_TAC[];
      DISCH_TAC] THEN
    DISCH_THEN(MP_TAC o SPEC `group_pow sm2_group P 4`) THEN
    ASM_SIMP_TAC[GSYM GROUP_POW_ADD] THEN CONV_TAC NUM_REDUCE_CONV THEN
    DISCH_TAC THEN ASM_SIMP_TAC[GROUP_POW_1];

    (*** Defer the main invariant preservation proof till below ***)

    ALL_TAC;

    (*** Trivial loop-back goal ***)

    REPEAT STRIP_TAC THEN CONV_TAC(ONCE_DEPTH_CONV EXPAND_CASES_CONV) THEN
    CONV_TAC NUM_REDUCE_CONV THEN
    ARM_SIM_TAC SM2_MONTJSCALARMUL_ALT_EXEC [1] THEN
    VAL_INT64_TAC `4 * i` THEN
    ASM_REWRITE_TAC[ARITH_RULE `4 * i = 0 <=> ~(0 < i)`];

    (*** Final copying to the output and specializing invariant ***)

    GEN_REWRITE_TAC (RATOR_CONV o LAND_CONV o ONCE_DEPTH_CONV)
     [bignum_triple_from_memory] THEN
    CONV_TAC NUM_REDUCE_CONV THEN REWRITE_TAC[DIV_1] THEN
    CONV_TAC(ONCE_DEPTH_CONV NORMALIZE_RELATIVE_ADDRESS_CONV) THEN
    REWRITE_TAC[BIGNUM_FROM_MEMORY_BYTES] THEN ENSURES_INIT_TAC "s0" THEN
    BIGNUM_LDIGITIZE_TAC "x_"
     `read (memory :> bytes(word_add stackpointer (word 256),8 * 4)) s0` THEN
    BIGNUM_LDIGITIZE_TAC "y_"
     `read (memory :> bytes(word_add stackpointer (word 288),8 * 4)) s0` THEN
    BIGNUM_LDIGITIZE_TAC "z_"
     `read (memory :> bytes(word_add stackpointer (word 320),8 * 4)) s0` THEN
    FIRST_X_ASSUM(ASSUME_TAC o MATCH_MP (MESON[]
      `(!x. P x ==> Q x /\ R x) ==> (!x. P x ==> Q x)`)) THEN
    ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (1--13) THEN
    ENSURES_FINAL_STATE_TAC THEN ASM_REWRITE_TAC[] THEN
    CONV_TAC(ONCE_DEPTH_CONV BIGNUM_LEXPAND_CONV) THEN ASM_REWRITE_TAC[] THEN
    DISCARD_STATE_TAC "s13" THEN X_GEN_TAC `P:(int#int)option` THEN
    STRIP_TAC THEN
    ABBREV_TAC `Q = if sgn then group_inv sm2_group P else P` THEN
    SUBGOAL_THEN `Q IN group_carrier sm2_group` ASSUME_TAC THENL
     [EXPAND_TAC "Q" THEN COND_CASES_TAC THEN ASM_SIMP_TAC[GROUP_INV];
      ALL_TAC] THEN
    FIRST_X_ASSUM(MP_TAC o SPEC `Q:(int#int)option`) THEN
    ASM_REWRITE_TAC[] THEN
    SUBGOAL_THEN
     `group_zpow sm2_group Q (&n - &recoder) = group_pow sm2_group P n_input`
    SUBST1_TAC THENL
     [MAP_EVERY EXPAND_TAC ["Q"; "n"; "n_neg"; "n_red"] THEN
      REWRITE_TAC[GSYM INT_OF_NUM_CLAUSES] THEN
      REWRITE_TAC[INT_ARITH `(x + y) - y:int = x`] THEN
      COND_CASES_TAC THEN REWRITE_TAC[GSYM INT_OF_NUM_REM; GSYM GROUP_NPOW] THEN
      ASM_SIMP_TAC[GSYM GROUP_INV_ZPOW; GSYM GROUP_ZPOW_NEG; GROUP_ZPOW_EQ] THEN
      ASM_SIMP_TAC[SM2_GROUP_ELEMENT_ORDER; INT_CONG_LREM; INT_CONG_REFL] THEN
      EXPAND_TAC "n_red" THEN COND_CASES_TAC THEN
      REWRITE_TAC[INT_CONG_MOD_1] THEN
      (SUBGOAL_THEN `n_input MOD n_sm2 <= n_sm2`
       (fun th -> SIMP_TAC[GSYM INT_OF_NUM_SUB; th])
       THENL [REWRITE_TAC[n_sm2] THEN ARITH_TAC; ALL_TAC]) THEN
      REWRITE_TAC[INTEGER_RULE
      `(--(n - x):int == y) (mod n) <=> (x == y) (mod n)`] THEN
      REWRITE_TAC[INT_CONG_LREM; INT_CONG_REFL; GSYM INT_OF_NUM_REM];
      DISCH_THEN MATCH_MP_TAC] THEN
    CONJ_TAC THENL
     [RULE_ASSUM_TAC(REWRITE_RULE[represents_sm2]) THEN ASM_REWRITE_TAC[];
      MAP_EVERY EXPAND_TAC ["y'"; "Q"]] THEN
    BOOL_CASES_TAC `sgn:bool` THEN ASM_REWRITE_TAC[] THEN
    FIRST_ASSUM(MP_TAC o MATCH_MP REPRESENTS_SM2_NEGATION_ALT) THEN
    ASM_SIMP_TAC[COND_SWAP]] THEN

  (**** Now the preservation of the loop invariant ***)

  X_GEN_TAC `i:num` THEN STRIP_TAC THEN
  CONV_TAC(RATOR_CONV(LAND_CONV(ONCE_DEPTH_CONV EXPAND_CASES_CONV))) THEN
  CONV_TAC NUM_REDUCE_CONV THEN
  GEN_REWRITE_TAC (RATOR_CONV o LAND_CONV o ONCE_DEPTH_CONV)
   [bignum_triple_from_memory] THEN
  CONV_TAC NUM_REDUCE_CONV THEN
  CONV_TAC(ONCE_DEPTH_CONV NORMALIZE_RELATIVE_ADDRESS_CONV) THEN

  GHOST_INTRO_TAC `Xa:num`
   `bignum_from_memory (word_add stackpointer (word 256),4)` THEN
  GHOST_INTRO_TAC `Ya:num`
   `bignum_from_memory (word_add stackpointer (word 288),4)` THEN
  GHOST_INTRO_TAC `Za:num`
   `bignum_from_memory (word_add stackpointer (word 320),4)` THEN

  (*** Computation of 2 * (Xa,Ya,Za) ***)

  REWRITE_TAC[BIGNUM_FROM_MEMORY_BYTES] THEN ENSURES_INIT_TAC "s0" THEN
  ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (1--4) THEN
  RULE_ASSUM_TAC(REWRITE_RULE[WORD_RULE
   `word_sub (word (4 * (i + 1))) (word 4) = word(4 * i)`]) THEN
  LOCAL_JDOUBLE_TAC 5 THEN
  MAP_EVERY ABBREV_TAC
   [`X2a = read (memory :> bytes(word_add stackpointer (word 256),8 * 4)) s5`;
    `Y2a = read (memory :> bytes(word_add stackpointer (word 288),8 * 4)) s5`;
    `Z2a = read (memory :> bytes(word_add stackpointer (word 320),8 * 4)) s5`
   ] THEN

  (*** Computation of 4 * (Xa,Ya,Za) ***)

  ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (6--8) THEN LOCAL_JDOUBLE_TAC 9 THEN
  MAP_EVERY ABBREV_TAC
   [`X4a = read (memory :> bytes(word_add stackpointer (word 256),8 * 4)) s9`;
    `Y4a = read (memory :> bytes(word_add stackpointer (word 288),8 * 4)) s9`;
    `Z4a = read (memory :> bytes(word_add stackpointer (word 320),8 * 4)) s9`
   ] THEN

  (*** Computation of 8 * (Xa,Ya,Za) ***)

  ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (10--12) THEN
  LOCAL_JDOUBLE_TAC 13 THEN
  MAP_EVERY ABBREV_TAC
   [`X8a = read (memory :> bytes(word_add stackpointer (word 256),8 * 4)) s13`;
    `Y8a = read (memory :> bytes(word_add stackpointer (word 288),8 * 4)) s13`;
    `Z8a = read (memory :> bytes(word_add stackpointer (word 320),8 * 4)) s13`
   ] THEN

  (*** Computation of 16 * (Xa,Ya,Za) ***)

  ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (14--16) THEN
  LOCAL_JDOUBLE_TAC 17 THEN
  MAP_EVERY ABBREV_TAC
   [`Xha = read (memory :> bytes(word_add stackpointer (word 256),8 * 4)) s17`;
    `Yha = read (memory :> bytes(word_add stackpointer (word 288),8 * 4)) s17`;
    `Zha = read (memory :> bytes(word_add stackpointer (word 320),8 * 4)) s17`
   ] THEN

  (*** Selection of btable nybble ***)

  SUBGOAL_THEN
   `read(memory :> bytes64 (word_add stackpointer
         (word(224 + 8 * val(word_ushr (word (4 * i)) 6:int64))))) s17 =
    word(n DIV 2 EXP (64 * (4 * i) DIV 64) MOD 2 EXP (64 * 1))`
  ASSUME_TAC THENL
   [EXPAND_TAC "n" THEN
    REWRITE_TAC[GSYM BIGNUM_FROM_MEMORY_BYTES] THEN
    REWRITE_TAC[BIGNUM_FROM_MEMORY_DIV; BIGNUM_FROM_MEMORY_MOD] THEN
    ASM_SIMP_TAC[ARITH_RULE
     `i < 63 ==> MIN (4 - (4 * i) DIV 64) 1 = 1`] THEN
    REWRITE_TAC[BIGNUM_FROM_MEMORY_SING; WORD_VAL] THEN
    REWRITE_TAC[GSYM WORD_ADD_ASSOC; GSYM WORD_ADD] THEN
    AP_THM_TAC THEN REPLICATE_TAC 7 AP_TERM_TAC THEN
    REWRITE_TAC[VAL_WORD_USHR] THEN CONV_TAC NUM_REDUCE_CONV THEN
    AP_THM_TAC THEN AP_TERM_TAC THEN MATCH_MP_TAC VAL_WORD_EQ THEN
    REWRITE_TAC[DIMINDEX_64] THEN CONV_TAC NUM_REDUCE_CONV THEN
    ASM BOUNDER_TAC[];
    ALL_TAC] THEN

  (*** Recoding offset to get indexing and negation flag ***)

  ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (18--24) THEN
  ABBREV_TAC `bf = (n DIV (2 EXP (4 * i))) MOD 16` THEN
  SUBGOAL_THEN
   `word_and
     (word_jushr
      (word ((n DIV 2 EXP (64 * (4 * i) DIV 64)) MOD 2 EXP 64))
     (word (4 * i)))
    (word 15):int64 = word bf` SUBST_ALL_TAC THENL
   [REWRITE_TAC[GSYM VAL_EQ; VAL_WORD_AND_MASK_WORD;
                ARITH_RULE `15 = 2 EXP 4 - 1`] THEN
    REWRITE_TAC[word_jushr; VAL_WORD_USHR; DIMINDEX_64; MOD_64_CLAUSES] THEN
    EXPAND_TAC "bf" THEN REWRITE_TAC[VAL_WORD; DIMINDEX_64] THEN
    REWRITE_TAC[MOD_MOD_EXP_MIN; ARITH_RULE `16 = 2 EXP 4`] THEN
    CONV_TAC(ONCE_DEPTH_CONV NUM_MIN_CONV) THEN
    REWRITE_TAC[DIV_MOD; MOD_MOD_EXP_MIN; GSYM EXP_ADD; DIV_DIV] THEN
    REWRITE_TAC[ADD_ASSOC; ARITH_RULE `64 * i DIV 64 + i MOD 64 = i`] THEN
    AP_THM_TAC THEN REPLICATE_TAC 3 AP_TERM_TAC THEN
    REWRITE_TAC[ARITH_RULE `MIN a b = b <=> b <= a`] THEN
    REWRITE_TAC[ARITH_RULE
     `x <= 64 * y DIV 64 + z <=> x + y MOD 64 <= y + z`] THEN
    REWRITE_TAC[ARITH_RULE `64 = 4 * 16`; MOD_MULT2] THEN
    UNDISCH_TAC `i < 63` THEN ARITH_TAC;
    ALL_TAC] THEN
  RULE_ASSUM_TAC(REWRITE_RULE[WORD_UNMASK_64; NOT_LE]) THEN
  SUBGOAL_THEN `val(word bf:int64) = bf` SUBST_ALL_TAC THENL
   [MATCH_MP_TAC VAL_WORD_EQ THEN REWRITE_TAC[DIMINDEX_64] THEN
    EXPAND_TAC "bf" THEN ARITH_TAC;
    ALL_TAC] THEN
  ABBREV_TAC `ix = if bf < 8 then 8 - bf else bf - 8` THEN
  FIRST_X_ASSUM(MP_TAC o SPEC `word ix:int64` o MATCH_MP (MESON[]
   `read X14 s = x ==> !x'. x = x' ==> read X14 s = x'`)) THEN
  ANTS_TAC THENL
   [EXPAND_TAC "ix" THEN REWRITE_TAC[GSYM NOT_LT; COND_SWAP] THEN
    REWRITE_TAC[WORD_NEG_SUB] THEN POP_ASSUM_LIST(K ALL_TAC) THEN
    COND_CASES_TAC THEN ASM_REWRITE_TAC[WORD_SUB] THEN ASM_ARITH_TAC;
    DISCH_TAC] THEN

  (*** Constant-time selection from the table ***)

  BIGNUM_LDIGITIZE_TAC "tab_"
   `read(memory :> bytes(word_add stackpointer (word 448),8 * 96)) s24` THEN
  ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (25--197) THEN
  MAP_EVERY REABBREV_TAC
   [`tab0 = read X0 s197`;
    `tab1 = read X1 s197`;
    `tab2 = read X2 s197`;
    `tab3 = read X3 s197`;
    `tab4 = read X4 s197`;
    `tab5 = read X5 s197`;
    `tab6 = read X6 s197`;
    `tab7 = read X7 s197`;
    `tab8 = read X8 s197`;
    `tab9 = read X9 s197`;
    `tab10 = read X10 s197`;
    `tab11 = read X11 s197`] THEN

  SUBGOAL_THEN
   `!P. P IN group_carrier sm2_group /\ y < p_sm2 /\ represents_sm2 P (x,y',z)
        ==> represents_sm2 (group_pow sm2_group P ix)
               (bignum_of_wordlist[tab0; tab1; tab2; tab3],
                bignum_of_wordlist[tab4; tab5; tab6; tab7],
                bignum_of_wordlist[tab8; tab9; tab10; tab11])`
  ASSUME_TAC THENL
   [X_GEN_TAC `P:(int#int)option` THEN STRIP_TAC THEN
    FIRST_X_ASSUM(MP_TAC o SPEC `P:(int#int)option`) THEN
    CONV_TAC(ONCE_DEPTH_CONV BIGNUM_LEXPAND_CONV) THEN
    ASM_REWRITE_TAC[] THEN DISCH_TAC THEN
    MAP_EVERY EXPAND_TAC
     (map (fun n -> "tab"^string_of_int n) (0--11)) THEN
    SUBGOAL_THEN `ix < 9` MP_TAC THENL
     [MAP_EVERY EXPAND_TAC ["ix"; "bf"] THEN ARITH_TAC;
      SPEC_TAC(`ix:num`,`ix:num`)] THEN
    CONV_TAC EXPAND_CASES_CONV THEN
    CONV_TAC(DEPTH_CONV WORD_NUM_RED_CONV) THEN
    ASM_REWRITE_TAC[CONJUNCT1 group_pow] THEN
    REWRITE_TAC[group_pow; SM2_GROUP; represents_sm2; tripled;
                weierstrass_of_jacobian; montgomery_decode; p_sm2;
                bignum_of_wordlist; INTEGER_MOD_RING_CLAUSES] THEN
    CONV_TAC(DEPTH_CONV(WORD_NUM_RED_CONV ORELSEC INVERSE_MOD_CONV));
    ALL_TAC] THEN

  (*** Optional negation of the table entry ***)

  ARM_ACCSTEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC [201;203;205;207] (198--220) THEN
  MAP_EVERY ABBREV_TAC
   [`Xt = read (memory :> bytes(word_add stackpointer (word 352),8 * 4)) s220`;
    `Yt = read (memory :> bytes(word_add stackpointer (word 384),8 * 4)) s220`;
    `Zt = read (memory :> bytes(word_add stackpointer (word 416),8 * 4)) s220`
   ] THEN
  SUBGOAL_THEN
   `!P. P IN group_carrier sm2_group /\ y < p_sm2 /\ represents_sm2 P (x,y',z)
        ==> represents_sm2 (group_zpow sm2_group P (&bf - &8)) (Xt,Yt,Zt)`
  ASSUME_TAC THENL
   [X_GEN_TAC `P:(int#int)option` THEN STRIP_TAC THEN
    FIRST_X_ASSUM(K ALL_TAC o SPEC `P:(int#int)option`) THEN
    FIRST_X_ASSUM(MP_TAC o SPEC `P:(int#int)option`) THEN
    ASM_REWRITE_TAC[] THEN DISCH_TAC THEN
    MAP_EVERY EXPAND_TAC ["Xt"; "Yt"; "Zt"] THEN
    CONV_TAC(ONCE_DEPTH_CONV BIGNUM_LEXPAND_CONV) THEN ASM_REWRITE_TAC[] THEN
    SUBGOAL_THEN `&bf - &8:int = if bf < 8 then --(&ix) else &ix`
    SUBST1_TAC THENL
     [EXPAND_TAC "ix" THEN
      SUBGOAL_THEN `bf < 16` MP_TAC THENL
       [EXPAND_TAC "bf" THEN ARITH_TAC; POP_ASSUM_LIST(K ALL_TAC)] THEN
      COND_CASES_TAC THEN ASM_SIMP_TAC[GSYM INT_OF_NUM_SUB; GSYM NOT_LT] THEN
      ASM_SIMP_TAC[GSYM INT_OF_NUM_SUB; LT_IMP_LE] THEN INT_ARITH_TAC;
      ALL_TAC] THEN
    REWRITE_TAC[WORD_SUB_0; VAL_EQ_0; COND_SWAP; WORD_BITVAL_EQ_0] THEN
    REWRITE_TAC[WORD_OR_EQ_0; GSYM CONJ_ASSOC] THEN
    MP_TAC(SPEC `[tab4;tab5;tab6;tab7]:int64 list` BIGNUM_OF_WORDLIST_EQ_0) THEN
    ASM_REWRITE_TAC[ALL] THEN DISCH_THEN(SUBST1_TAC o SYM) THEN
    REWRITE_TAC[MESON[] `(if p then T else q) <=> ~(~q /\ ~p)`] THEN
    REWRITE_TAC[GSYM NOT_LT; COND_SWAP] THEN
    ASM_CASES_TAC `bf < 8` THEN ASM_REWRITE_TAC[GROUP_NPOW] THEN
    CONV_TAC(DEPTH_CONV WORD_NUM_RED_CONV) THEN REWRITE_TAC[COND_SWAP] THEN
    FIRST_ASSUM(MP_TAC o MATCH_MP REPRESENTS_SM2_NEGATION_ALT) THEN
    ASM_SIMP_TAC[GROUP_POW; GROUP_ZPOW_NEG; GROUP_NPOW] THEN
    MATCH_MP_TAC EQ_IMP THEN AP_TERM_TAC THEN REWRITE_TAC[PAIR_EQ] THEN
    COND_CASES_TAC THEN ASM_REWRITE_TAC[] THEN CONV_TAC SYM_CONV THEN
    MATCH_MP_TAC CONG_IMP_EQ THEN EXISTS_TAC `2 EXP 256` THEN
    CONJ_TAC THENL [BOUNDER_TAC[]; ALL_TAC] THEN
    CONJ_TAC THENL [REWRITE_TAC[p_sm2] THEN ARITH_TAC; ALL_TAC] THEN
    RULE_ASSUM_TAC(REWRITE_RULE[represents_sm2]) THEN
    ASM_SIMP_TAC[num_congruent; GSYM INT_OF_NUM_SUB; LT_IMP_LE] THEN
    REWRITE_TAC[REAL_INT_CONGRUENCE] THEN
    REWRITE_TAC[GSYM REAL_OF_INT_CLAUSES] THEN
    REWRITE_TAC[GSYM REAL_OF_NUM_CLAUSES; REAL_POW_EQ_0] THEN
    REWRITE_TAC[REAL_OF_NUM_EQ; ARITH_EQ] THEN
    REWRITE_TAC[bignum_of_wordlist; p_sm2; GSYM REAL_OF_NUM_CLAUSES] THEN
    ACCUMULATOR_POP_ASSUM_LIST(MP_TAC o end_itlist CONJ o DESUM_RULE) THEN
    DISCH_THEN(fun th -> REWRITE_TAC[th]) THEN REAL_INTEGER_TAC;
    ALL_TAC] THEN

  (*** Final addition of the table entry ***)

  ARM_STEPS_TAC SM2_MONTJSCALARMUL_ALT_EXEC (221--224) THEN
  LOCAL_JADD_TAC 225 THEN
  MAP_EVERY ABBREV_TAC
   [`X' = read (memory :> bytes(word_add stackpointer (word 256),8 * 4)) s225`;
    `Y' = read (memory :> bytes(word_add stackpointer (word 288),8 * 4)) s225`;
    `Z' = read (memory :> bytes(word_add stackpointer (word 320),8 * 4)) s225`
   ] THEN
  ENSURES_FINAL_STATE_TAC THEN ASM_REWRITE_TAC[] THEN

  (*** The final mathematics ***)

  X_GEN_TAC `P:(int#int)option` THEN STRIP_TAC THEN
  CONV_TAC(RAND_CONV EXPAND_CASES_CONV) THEN
  REWRITE_TAC[bignum_triple_from_memory] THEN
  CONV_TAC NUM_REDUCE_CONV THEN
  CONV_TAC(ONCE_DEPTH_CONV NORMALIZE_RELATIVE_ADDRESS_CONV) THEN
  ASM_REWRITE_TAC[BIGNUM_FROM_MEMORY_BYTES] THEN
  FIRST_X_ASSUM(MP_TAC o SPEC `P:(int#int)option`) THEN
  ASM_REWRITE_TAC[] THEN
  DISCH_THEN(CONJUNCTS_THEN2 ASSUME_TAC (fun th -> REWRITE_TAC[th])) THEN
  ABBREV_TAC
   `Q = group_zpow sm2_group P
      (&(n DIV 2 EXP (4 * (i + 1))) -
       &(recoder DIV 2 EXP (4 * (i + 1))))` THEN
  SUBGOAL_THEN `Q IN group_carrier sm2_group` ASSUME_TAC THENL
   [EXPAND_TAC "Q" THEN MATCH_MP_TAC GROUP_ZPOW THEN ASM_REWRITE_TAC[];
    ALL_TAC] THEN
  UNDISCH_THEN
   `!P. represents_sm2 P (Xa,Ya,Za)
        ==> represents_sm2 (group_mul sm2_group P P) (X2a,Y2a,Z2a)`
   (MP_TAC o SPEC `Q:(int#int)option`) THEN
  ASM_SIMP_TAC[GROUP_RULE `group_mul G x x = group_pow G x 2`] THEN
  DISCH_TAC THEN UNDISCH_THEN
   `!P. represents_sm2 P (X2a,Y2a,Z2a)
        ==> represents_sm2 (group_mul sm2_group P P) (X4a,Y4a,Z4a)`
   (MP_TAC o SPEC `group_pow sm2_group Q 2`) THEN
  ASM_SIMP_TAC[GSYM GROUP_POW_ADD] THEN CONV_TAC NUM_REDUCE_CONV THEN
  DISCH_TAC THEN UNDISCH_THEN
   `!P. represents_sm2 P (X4a,Y4a,Z4a)
        ==> represents_sm2 (group_mul sm2_group P P) (X8a,Y8a,Z8a)`
   (MP_TAC o SPEC `group_pow sm2_group Q 4`) THEN
  ASM_SIMP_TAC[GSYM GROUP_POW_ADD] THEN CONV_TAC NUM_REDUCE_CONV THEN
  DISCH_TAC THEN UNDISCH_THEN
   `!P. represents_sm2 P (X8a,Y8a,Z8a)
        ==> represents_sm2 (group_mul sm2_group P P) (Xha,Yha,Zha)`
   (MP_TAC o SPEC `group_pow sm2_group Q 8`) THEN
  ASM_SIMP_TAC[GSYM GROUP_POW_ADD] THEN CONV_TAC NUM_REDUCE_CONV THEN
  DISCH_TAC THEN FIRST_X_ASSUM(MP_TAC o SPECL
   [`group_pow sm2_group Q 16`;
    `group_zpow sm2_group P (&bf - &8)`]) THEN
  FIRST_X_ASSUM(MP_TAC o SPEC `P:(int#int)option`) THEN
  ASM_REWRITE_TAC[] THEN DISCH_TAC THEN ASM_REWRITE_TAC[] THEN
  ASM_SIMP_TAC[GSYM GROUP_NPOW] THEN EXPAND_TAC "Q" THEN
  ASM_SIMP_TAC[GSYM GROUP_ZPOW_MUL; GSYM GROUP_ZPOW_ADD] THEN
  ANTS_TAC THENL
   [SUBST1_TAC(SYM(el 1 (CONJUNCTS SM2_GROUP))) THEN
    ASM_SIMP_TAC[GROUP_ZPOW_EQ; GROUP_ZPOW_EQ_ID;
                 SM2_GROUP_ELEMENT_ORDER] THEN
    COND_CASES_TAC THEN ASM_REWRITE_TAC[INT_DIVIDES_1] THEN
    DISCH_THEN(MP_TAC o MATCH_MP (REWRITE_RULE[IMP_CONJ_ALT]
        INT_CONG_IMP_EQ)) THEN
    ANTS_TAC THENL
     [MATCH_MP_TAC(INT_ARITH
       `abs(&16 * x) + abs(&16 * y) + abs(bf) + &8:int < n
        ==> abs((x - y) * &16 - (bf - &8)) < n`) THEN
      REWRITE_TAC[INT_ABS_NUM; INT_OF_NUM_CLAUSES] THEN
      REWRITE_TAC[ARITH_RULE `4 * (i + 1) = 4 * i + 4`; EXP_ADD] THEN
      REWRITE_TAC[GSYM DIV_DIV] THEN MATCH_MP_TAC(ARITH_RULE
       `a + b + c + d < n
        ==> 16 * a DIV 2 EXP 4 + 16 * b DIV 2 EXP 4 + c + d < n`) THEN
      TRANS_TAC LET_TRANS `n + recoder + bf + 8` THEN
      SIMP_TAC[LE_ADD2; LE_REFL; DIV_LE] THEN
      UNDISCH_TAC `n < 9 * 2 EXP 252` THEN
      MAP_EVERY EXPAND_TAC ["recoder"; "bf"] THEN
      REWRITE_TAC[n_sm2] THEN ARITH_TAC;
      ALL_TAC] THEN
    ASM_CASES_TAC `&bf - &8:int = &0` THEN ASM_REWRITE_TAC[INT_DIVIDES_0] THEN
    UNDISCH_TAC `~(&bf - &8:int = &0)` THEN
    MATCH_MP_TAC(TAUT `(p ==> ~q) ==> p ==> q ==> r`) THEN
    MATCH_MP_TAC(INT_ARITH
     `abs(y:int) < &16 /\ (~(x = &0) ==> &1 <= abs(x))
      ==> ~(y = &0) ==> ~(x * &16 = y)`) THEN
    CONJ_TAC THENL [EXPAND_TAC "bf"; CONV_TAC INT_ARITH] THEN
    REWRITE_TAC[GSYM INT_OF_NUM_CLAUSES; GSYM INT_OF_NUM_REM] THEN
    CONV_TAC INT_ARITH;
    MATCH_MP_TAC EQ_IMP] THEN
  AP_THM_TAC THEN AP_TERM_TAC THEN AP_TERM_TAC THEN
  SUBGOAL_THEN
   `!n. n DIV 2 EXP (4 * i) =
        16 * (n DIV 2 EXP (4 * (i + 1))) + (n DIV 2 EXP (4 * i)) MOD 16`
  MP_TAC THENL
   [REWRITE_TAC[ARITH_RULE `4 * (i + 1) = 4 * i + 4`; EXP_ADD] THEN
    REWRITE_TAC[GSYM DIV_DIV] THEN ARITH_TAC;
    DISCH_THEN(fun th -> ONCE_REWRITE_TAC[th]) THEN
    ASM_REWRITE_TAC[]] THEN
  SUBGOAL_THEN `(recoder DIV 2 EXP (4 * i)) MOD 16 = 8` SUBST1_TAC THENL
   [UNDISCH_TAC `i < 63` THEN SPEC_TAC(`i:num`,`i:num`) THEN
    EXPAND_TAC "recoder" THEN POP_ASSUM_LIST(K ALL_TAC) THEN
    CONV_TAC EXPAND_CASES_CONV THEN CONV_TAC NUM_REDUCE_CONV;
    ALL_TAC] THEN
  REWRITE_TAC[GSYM INT_OF_NUM_CLAUSES] THEN CONV_TAC INT_ARITH);;

let SM2_MONTJSCALARMUL_ALT_SUBROUTINE_CORRECT = time prove
 (`!res scalar point n xyz pc stackpointer returnaddress.
        aligned 16 stackpointer /\
        ALL (nonoverlapping (word_sub stackpointer (word 1248),1248))
            [(word pc,0x3720); (res,96); (scalar,32); (point,96)] /\
        nonoverlapping (res,96) (word pc,0x3720)
        ==> ensures arm
             (\s. aligned_bytes_loaded s (word pc) sm2_montjscalarmul_alt_mc /\
                  read PC s = word pc /\
                  read SP s = stackpointer /\
                  read X30 s = returnaddress /\
                  C_ARGUMENTS [res;scalar;point] s /\
                  bignum_from_memory (scalar,4) s = n /\
                  bignum_triple_from_memory (point,4) s = xyz)
             (\s. read PC s = returnaddress /\
                  !P. P IN group_carrier sm2_group /\
                      represents_sm2 P xyz
                      ==> represents_sm2
                            (group_pow sm2_group P n)
                            (bignum_triple_from_memory(res,4) s))
          (MAYCHANGE_REGS_AND_FLAGS_PERMITTED_BY_ABI ,,
           MAYCHANGE[memory :> bytes(res,96);
                     memory :> bytes(word_sub stackpointer (word 1248),1248)])`,
   ARM_ADD_RETURN_STACK_TAC SM2_MONTJSCALARMUL_ALT_EXEC
   SM2_MONTJSCALARMUL_ALT_CORRECT `[X19; X20; X21; X30]` 1248);;
